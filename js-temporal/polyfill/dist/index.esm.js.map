{"version":3,"file":"index.esm.js","sources":["../lib/assert.ts","../lib/bigintmath.ts","../lib/slots.ts","../lib/intrinsicclass.ts","../lib/math.ts","../lib/timeduration.ts","../lib/regex.ts","../lib/ecmascript.ts","../lib/calendar.ts","../lib/intl.ts","../lib/instant.ts","../lib/plaindate.ts","../lib/plaindatetime.ts","../lib/duration.ts","../lib/plainmonthday.ts","../lib/now.ts","../lib/plaintime.ts","../lib/plainyearmonth.ts","../lib/zoneddatetime.ts","../lib/legacydate.ts","../lib/index.ts"],"sourcesContent":["export function assert(condition: boolean, message: string): asserts condition {\r\n  if (!condition) throw new Error(`assertion failure: ${message}`);\r\n}\r\n\r\nexport function assertNotReached(message?: string): never {\r\n  const reason = message ? ` because ${message}` : '';\r\n  throw new Error(`assertion failure: code should not be reached${reason}`);\r\n}\r\n","export const ZERO = 0n;\r\nexport const ONE = 1n;\r\nexport const TWO = 2n;\r\nexport const TEN = 10n;\r\nconst TWENTY_FOUR = 24n;\r\nconst SIXTY = 60n;\r\nexport const THOUSAND = 1_000n;\r\nexport const MILLION = 1_000_000n;\r\nexport const BILLION = 1_000_000_000n;\r\nconst HOUR_SECONDS = 3600n;\r\nexport const HOUR_NANOS = HOUR_SECONDS * BILLION;\r\nexport const MINUTE_NANOS = SIXTY * BILLION;\r\nexport const DAY_NANOS = HOUR_NANOS * TWENTY_FOUR;\r\n\r\nexport function isEven(value: bigint): boolean {\r\n  return value % 2n === 0n;\r\n}\r\n\r\nexport function abs(x: bigint): bigint {\r\n  return x < 0n ? -x : x;\r\n}\r\n\r\nexport function compare(x: bigint, y: bigint): -1 | 0 | 1 {\r\n  return x < y ? -1 : x > y ? 1 : 0;\r\n}\r\n\r\nexport function divmod(x: bigint, y: bigint): { quotient: bigint; remainder: bigint } {\r\n  const quotient = x / y;\r\n  const remainder = x % y;\r\n  return { quotient, remainder };\r\n}\r\n","import type { Temporal } from '..';\r\nimport type {\r\n  BuiltinCalendarId,\r\n  AnySlottedType,\r\n  FormatterOrAmender,\r\n  ISODate,\r\n  ISODateTime,\r\n  TimeRecord\r\n} from './internaltypes';\r\nimport type { DateTimeFormatImpl } from './intl';\r\n\r\n// Instant\r\nexport const EPOCHNANOSECONDS = 'slot-epochNanoSeconds';\r\n\r\n// DateTime, Date, Time, YearMonth, MonthDay\r\nexport const ISO_DATE = 'slot-iso-date';\r\nexport const ISO_DATE_TIME = 'slot-iso-date-time';\r\nexport const TIME = 'slot-time';\r\nexport const CALENDAR = 'slot-calendar';\r\n// Date, YearMonth, and MonthDay all have the same slots, disambiguation needed:\r\nexport const DATE_BRAND = 'slot-date-brand';\r\nexport const YEAR_MONTH_BRAND = 'slot-year-month-brand';\r\nexport const MONTH_DAY_BRAND = 'slot-month-day-brand';\r\n\r\n// ZonedDateTime\r\nexport const TIME_ZONE = 'slot-time-zone';\r\n\r\n// Duration\r\nexport const YEARS = 'slot-years';\r\nexport const MONTHS = 'slot-months';\r\nexport const WEEKS = 'slot-weeks';\r\nexport const DAYS = 'slot-days';\r\nexport const HOURS = 'slot-hours';\r\nexport const MINUTES = 'slot-minutes';\r\nexport const SECONDS = 'slot-seconds';\r\nexport const MILLISECONDS = 'slot-milliseconds';\r\nexport const MICROSECONDS = 'slot-microseconds';\r\nexport const NANOSECONDS = 'slot-nanoseconds';\r\n\r\n// DateTimeFormatImpl\r\nexport const DATE = 'date';\r\nexport const YM = 'ym';\r\nexport const MD = 'md';\r\nexport const TIME_FMT = 'time';\r\nexport const DATETIME = 'datetime';\r\nexport const INST = 'instant';\r\nexport const ORIGINAL = 'original';\r\nexport const TZ_CANONICAL = 'timezone-canonical';\r\nexport const TZ_ORIGINAL = 'timezone-original';\r\nexport const CAL_ID = 'calendar-id';\r\nexport const LOCALE = 'locale';\r\nexport const OPTIONS = 'options';\r\n\r\ninterface SlotInfo<ValueType, UsedByType extends AnySlottedType> {\r\n  value: ValueType;\r\n  usedBy: UsedByType;\r\n}\r\n\r\ninterface SlotInfoRecord {\r\n  [k: string]: SlotInfo<unknown, AnySlottedType>;\r\n}\r\n\r\ninterface Slots extends SlotInfoRecord {\r\n  // Instant\r\n  [EPOCHNANOSECONDS]: SlotInfo<bigint, Temporal.Instant | Temporal.ZonedDateTime>; \r\n\r\n  // DateTime, Date, Time, YearMonth, MonthDay\r\n  [ISO_DATE]: SlotInfo<ISODate, Temporal.PlainDate | Temporal.PlainMonthDay | Temporal.PlainYearMonth>;\r\n  [ISO_DATE_TIME]: SlotInfo<ISODateTime, Temporal.PlainDateTime>;\r\n  [TIME]: SlotInfo<TimeRecord, Temporal.PlainTime>;\r\n  [CALENDAR]: SlotInfo<BuiltinCalendarId, TypesWithCalendarUnits>;\r\n\r\n  // Date, YearMonth, MonthDay common slots\r\n  [DATE_BRAND]: SlotInfo<true, Temporal.PlainDate>;\r\n  [YEAR_MONTH_BRAND]: SlotInfo<true, Temporal.PlainYearMonth>;\r\n  [MONTH_DAY_BRAND]: SlotInfo<true, Temporal.PlainMonthDay>;\r\n\r\n  // ZonedDateTime\r\n  [TIME_ZONE]: SlotInfo<string, Temporal.ZonedDateTime>;\r\n\r\n  // Duration\r\n  [YEARS]: SlotInfo<number, Temporal.Duration>;\r\n  [MONTHS]: SlotInfo<number, Temporal.Duration>;\r\n  [WEEKS]: SlotInfo<number, Temporal.Duration>;\r\n  [DAYS]: SlotInfo<number, Temporal.Duration>;\r\n  [HOURS]: SlotInfo<number, Temporal.Duration>;\r\n  [MINUTES]: SlotInfo<number, Temporal.Duration>;\r\n  [SECONDS]: SlotInfo<number, Temporal.Duration>;\r\n  [MILLISECONDS]: SlotInfo<number, Temporal.Duration>;\r\n  [MICROSECONDS]: SlotInfo<number, Temporal.Duration>;\r\n  [NANOSECONDS]: SlotInfo<number, Temporal.Duration>;\r\n\r\n  // DateTimeFormatImpl\r\n  [DATE]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [YM]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [MD]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [TIME_FMT]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [DATETIME]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [INST]: SlotInfo<FormatterOrAmender, DateTimeFormatImpl>;\r\n  [ORIGINAL]: SlotInfo<globalThis.Intl.DateTimeFormat, DateTimeFormatImpl>;\r\n  [TZ_CANONICAL]: SlotInfo<string, DateTimeFormatImpl>;\r\n  [TZ_ORIGINAL]: SlotInfo<string, DateTimeFormatImpl>;\r\n  [CAL_ID]: SlotInfo<globalThis.Intl.ResolvedDateTimeFormatOptions['calendar'], DateTimeFormatImpl>;\r\n  [LOCALE]: SlotInfo<globalThis.Intl.ResolvedDateTimeFormatOptions['locale'], DateTimeFormatImpl>;\r\n  [OPTIONS]: SlotInfo<Intl.DateTimeFormatOptions, DateTimeFormatImpl>;\r\n}\r\n\r\ntype TypesWithCalendarUnits =\r\n  | Temporal.PlainDateTime\r\n  | Temporal.PlainDate\r\n  | Temporal.PlainYearMonth\r\n  | Temporal.PlainMonthDay\r\n  | Temporal.ZonedDateTime;\r\n\r\ninterface SlotsToTypes {\r\n  // Instant\r\n  [EPOCHNANOSECONDS]: Temporal.Instant;\r\n\r\n  // DateTime, Date, Time, YearMonth, MonthDay\r\n  [ISO_DATE]: Temporal.PlainDate | Temporal.PlainYearMonth | Temporal.PlainMonthDay;\r\n  [ISO_DATE_TIME]: Temporal.PlainDateTime;\r\n  [TIME]: Temporal.PlainTime;\r\n  [CALENDAR]: TypesWithCalendarUnits;\r\n\r\n  // Date, YearMonth, MonthDay common slots\r\n  [DATE_BRAND]: Temporal.PlainDate;\r\n  [YEAR_MONTH_BRAND]: Temporal.PlainYearMonth;\r\n  [MONTH_DAY_BRAND]: Temporal.PlainMonthDay;\r\n\r\n  // ZonedDateTime\r\n  [TIME_ZONE]: Temporal.ZonedDateTime;\r\n\r\n  // Duration\r\n  [YEARS]: Temporal.Duration;\r\n  [MONTHS]: Temporal.Duration;\r\n  [WEEKS]: Temporal.Duration;\r\n  [DAYS]: Temporal.Duration;\r\n  [HOURS]: Temporal.Duration;\r\n  [MINUTES]: Temporal.Duration;\r\n  [SECONDS]: Temporal.Duration;\r\n  [MILLISECONDS]: Temporal.Duration;\r\n  [MICROSECONDS]: Temporal.Duration;\r\n  [NANOSECONDS]: Temporal.Duration;\r\n\r\n  // DateTimeFormatImpl\r\n  [DATE]: DateTimeFormatImpl;\r\n  [YM]: DateTimeFormatImpl;\r\n  [MD]: DateTimeFormatImpl;\r\n  [TIME_FMT]: DateTimeFormatImpl;\r\n  [DATETIME]: DateTimeFormatImpl;\r\n  [INST]: DateTimeFormatImpl;\r\n  [ORIGINAL]: DateTimeFormatImpl;\r\n  [TZ_CANONICAL]: DateTimeFormatImpl;\r\n  [TZ_ORIGINAL]: DateTimeFormatImpl;\r\n  [CAL_ID]: DateTimeFormatImpl;\r\n  [LOCALE]: DateTimeFormatImpl;\r\n  [OPTIONS]: DateTimeFormatImpl;\r\n}\r\n\r\ntype SlotKey = keyof SlotsToTypes;\r\n\r\nconst globalSlots = new WeakMap<Slots[keyof Slots]['usedBy'], Record<keyof Slots, Slots[keyof Slots]['value']>>();\r\n\r\nfunction _GetSlots(container: Slots[keyof Slots]['usedBy']) {\r\n  return globalSlots.get(container);\r\n}\r\n\r\nconst GetSlotsSymbol = Symbol.for('@@Temporal__GetSlots');\r\n\r\n// expose GetSlots to avoid dual package hazards\r\n(globalThis as any)[GetSlotsSymbol] ||= _GetSlots;\r\n\r\nconst GetSlots = (globalThis as any)[GetSlotsSymbol] as typeof _GetSlots;\r\n\r\nfunction _CreateSlots(container: Slots[keyof Slots]['usedBy']): void {\r\n  globalSlots.set(container, Object.create(null));\r\n}\r\n\r\nconst CreateSlotsSymbol = Symbol.for('@@Temporal__CreateSlots');\r\n\r\n// expose CreateSlots to avoid dual package hazards\r\n(globalThis as any)[CreateSlotsSymbol] ||= _CreateSlots;\r\n\r\nexport const CreateSlots = (globalThis as any)[CreateSlotsSymbol] as typeof _CreateSlots;\r\n\r\n// TODO: is there a better way than 9 overloads to make HasSlot into a type\r\n// guard that takes a variable number of parameters?\r\nexport function HasSlot<ID1 extends SlotKey>(container: unknown, id1: ID1): container is Slots[ID1]['usedBy'];\r\nexport function HasSlot<ID1 extends SlotKey, ID2 extends SlotKey>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2\r\n): container is Slots[ID1]['usedBy'] | Slots[ID2]['usedBy'];\r\nexport function HasSlot<ID1 extends SlotKey, ID2 extends SlotKey, ID3 extends SlotKey>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3\r\n): container is Slots[ID1]['usedBy'] | Slots[ID2]['usedBy'] | Slots[ID3]['usedBy'];\r\nexport function HasSlot<ID1 extends SlotKey, ID2 extends SlotKey, ID3 extends SlotKey, ID4 extends SlotKey>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4\r\n): container is Slots[ID1 | ID2 | ID3 | ID4]['usedBy'];\r\nexport function HasSlot<\r\n  ID1 extends SlotKey,\r\n  ID2 extends SlotKey,\r\n  ID3 extends SlotKey,\r\n  ID4 extends SlotKey,\r\n  ID5 extends SlotKey\r\n>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4,\r\n  id5: ID5\r\n): container is Slots[ID1 | ID2 | ID3 | ID4 | ID5]['usedBy'];\r\nexport function HasSlot<\r\n  ID1 extends SlotKey,\r\n  ID2 extends SlotKey,\r\n  ID3 extends SlotKey,\r\n  ID4 extends SlotKey,\r\n  ID5 extends SlotKey,\r\n  ID6 extends SlotKey\r\n>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4,\r\n  id5: ID5,\r\n  id6: ID6\r\n): container is Slots[ID1 | ID2 | ID3 | ID4 | ID5 | ID6]['usedBy'];\r\nexport function HasSlot<\r\n  ID1 extends SlotKey,\r\n  ID2 extends SlotKey,\r\n  ID3 extends SlotKey,\r\n  ID4 extends SlotKey,\r\n  ID5 extends SlotKey,\r\n  ID6 extends SlotKey,\r\n  ID7 extends SlotKey\r\n>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4,\r\n  id5: ID5,\r\n  id6: ID6,\r\n  id7: ID7\r\n): container is Slots[ID1 | ID2 | ID3 | ID4 | ID5 | ID6 | ID7]['usedBy'];\r\nexport function HasSlot<\r\n  ID1 extends SlotKey,\r\n  ID2 extends SlotKey,\r\n  ID3 extends SlotKey,\r\n  ID4 extends SlotKey,\r\n  ID5 extends SlotKey,\r\n  ID6 extends SlotKey,\r\n  ID7 extends SlotKey,\r\n  ID8 extends SlotKey\r\n>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4,\r\n  id5: ID5,\r\n  id6: ID6,\r\n  id7: ID7,\r\n  id8: ID8\r\n): container is Slots[ID1 | ID2 | ID3 | ID4 | ID5 | ID6 | ID7 | ID8]['usedBy'];\r\nexport function HasSlot<\r\n  ID1 extends SlotKey,\r\n  ID2 extends SlotKey,\r\n  ID3 extends SlotKey,\r\n  ID4 extends SlotKey,\r\n  ID5 extends SlotKey,\r\n  ID6 extends SlotKey,\r\n  ID7 extends SlotKey,\r\n  ID8 extends SlotKey,\r\n  ID9 extends SlotKey\r\n>(\r\n  container: unknown,\r\n  id1: ID1,\r\n  id2: ID2,\r\n  id3: ID3,\r\n  id4: ID4,\r\n  id5: ID5,\r\n  id6: ID6,\r\n  id7: ID7,\r\n  id8: ID8,\r\n  id9: ID9\r\n): container is Slots[ID1 | ID2 | ID3 | ID4 | ID5 | ID6 | ID7 | ID8 | ID9]['usedBy'];\r\nexport function HasSlot(container: unknown, ...ids: (keyof Slots)[]): boolean {\r\n  if (!container || 'object' !== typeof container) return false;\r\n  const myslots = GetSlots(container as AnySlottedType);\r\n  return !!myslots && ids.every((id) => id in myslots);\r\n}\r\nexport function GetSlot<KeyT extends keyof Slots>(\r\n  container: Slots[typeof id]['usedBy'],\r\n  id: KeyT\r\n): Slots[KeyT]['value'] {\r\n  const value = GetSlots(container)?.[id];\r\n  if (value === undefined) throw new TypeError(`Missing internal slot ${id}`);\r\n  return value;\r\n}\r\nexport function SetSlot<KeyT extends SlotKey>(\r\n  container: Slots[KeyT]['usedBy'],\r\n  id: KeyT,\r\n  value: Slots[KeyT]['value']\r\n): void {\r\n  const slots = GetSlots(container);\r\n\r\n  if (slots === undefined) throw new TypeError('Missing slots for the given container');\r\n\r\n  const existingSlot = slots[id];\r\n\r\n  if (existingSlot) throw new TypeError(`${id} already has set`);\r\n\r\n  slots[id] = value;\r\n}\r\n\r\nexport function ResetSlot<KeyT extends SlotKey>(\r\n  container: DateTimeFormatImpl,\r\n  id: KeyT,\r\n  value: Slots[KeyT]['value']\r\n): void {\r\n  const slots = GetSlots(container);\r\n\r\n  if (slots === undefined) throw new TypeError('Missing slots for the given container');\r\n\r\n  const existingSlot = slots[id];\r\n\r\n  if (existingSlot === undefined) throw new TypeError(`tried to reset ${id} which was not set`);\r\n\r\n  slots[id] = value;\r\n}\r\n","import type { Temporal } from '..';\r\nimport type { CalendarImpl } from './calendar';\r\nimport type { BuiltinCalendarId } from './internaltypes';\r\nimport type { DateTimeFormatImpl } from './intl';\r\n\r\nimport { DEBUG } from './debug';\r\nimport { GetSlot, ORIGINAL } from './slots';\r\n\r\ntype OmitConstructor<T> = { [P in keyof T as T[P] extends new (...args: any[]) => any ? P : never]: T[P] };\r\n\r\ntype TemporalIntrinsics = {\r\n  ['Intl.DateTimeFormat']: typeof globalThis.Intl.DateTimeFormat;\r\n  ['Temporal.Duration']: typeof Temporal.Duration;\r\n  ['Temporal.Instant']: OmitConstructor<Temporal.Instant> &\r\n    (new (epochNanoseconds: bigint) => Temporal.Instant) & { prototype: typeof Temporal.Instant.prototype };\r\n  ['Temporal.PlainDate']: typeof Temporal.PlainDate;\r\n  ['Temporal.PlainDateTime']: typeof Temporal.PlainDateTime;\r\n  ['Temporal.PlainMonthDay']: typeof Temporal.PlainMonthDay;\r\n  ['Temporal.PlainTime']: typeof Temporal.PlainTime;\r\n  ['Temporal.PlainYearMonth']: typeof Temporal.PlainYearMonth;\r\n  ['Temporal.ZonedDateTime']: OmitConstructor<Temporal.ZonedDateTime> &\r\n    (new (epochNanoseconds: bigint, timeZone: string, calendar?: string) => Temporal.ZonedDateTime) & {\r\n      prototype: typeof Temporal.ZonedDateTime.prototype;\r\n      from: typeof Temporal.ZonedDateTime.from;\r\n      compare: typeof Temporal.ZonedDateTime.compare;\r\n    };\r\n};\r\ntype TemporalIntrinsicRegistrations = {\r\n  [key in keyof TemporalIntrinsics]: TemporalIntrinsics[key];\r\n};\r\ntype TemporalIntrinsicPrototypeRegistrations = {\r\n  [key in keyof TemporalIntrinsics as `${key}.prototype`]: TemporalIntrinsics[key]['prototype'];\r\n};\r\ntype TemporalIntrinsicRegisteredKeys = {\r\n  [key in keyof TemporalIntrinsicRegistrations as `%${key}%`]: TemporalIntrinsicRegistrations[key];\r\n};\r\ntype TemporalIntrinsicPrototypeRegisteredKeys = {\r\n  [key in keyof TemporalIntrinsicPrototypeRegistrations as `%${key}%`]: TemporalIntrinsicPrototypeRegistrations[key];\r\n};\r\n\r\ntype OtherIntrinsics = {\r\n  calendarImpl: (id: BuiltinCalendarId) => CalendarImpl;\r\n};\r\ntype OtherIntrinsicKeys = { [key in keyof OtherIntrinsics as `%${key}%`]: OtherIntrinsics[key] };\r\n\r\nconst INTRINSICS = {} as TemporalIntrinsicRegisteredKeys &\r\n  TemporalIntrinsicPrototypeRegisteredKeys &\r\n  OtherIntrinsicKeys;\r\n\r\ntype StylizeOption = (value: unknown, type: 'number' | 'special') => string;\r\n\r\ntype customFormatFunction<T> = (\r\n  this: T & { _repr_: string }, // _repr_ is present if DEBUG\r\n  depth: number,\r\n  options: { stylize: StylizeOption },\r\n  inspect: (object: T, options?: { depth: number; stylize: StylizeOption }) => string\r\n) => string;\r\nconst customUtilInspectFormatters: Partial<{\r\n  [key in keyof TemporalIntrinsicRegistrations]: customFormatFunction<\r\n    InstanceType<TemporalIntrinsicRegistrations[key]>\r\n  >;\r\n}> = {\r\n  ['Intl.DateTimeFormat'](depth, options, inspect) {\r\n    return inspect(GetSlot(this as DateTimeFormatImpl, ORIGINAL), { depth, ...options });\r\n  },\r\n  ['Temporal.Duration'](depth, options) {\r\n    const descr = options.stylize(this._repr_, 'special');\r\n    if (depth < 1) return descr;\r\n    const entries: string[] = [];\r\n    const props = [\r\n      'years',\r\n      'months',\r\n      'weeks',\r\n      'days',\r\n      'hours',\r\n      'minutes',\r\n      'seconds',\r\n      'milliseconds',\r\n      'microseconds',\r\n      'nanoseconds'\r\n    ] as const;\r\n    for (let i = 0; i < props.length; i++) {\r\n      const prop = props[i];\r\n      if (this[prop] !== 0) {\r\n        entries.push(`  ${prop}: ${options.stylize(this[prop], 'number')}`);\r\n      }\r\n    }\r\n    return descr + ' {\\n' + entries.join(',\\n') + '\\n}';\r\n  }\r\n};\r\n\r\ntype InspectFormatterOptions = { stylize: (str: string, styleType: string) => string };\r\nfunction defaultUtilInspectFormatter(this: any, depth: number, options: InspectFormatterOptions) {\r\n  return options.stylize(this._repr_, 'special');\r\n}\r\n\r\nexport function MakeIntrinsicClass(\r\n  Class: TemporalIntrinsicRegistrations[typeof name],\r\n  name: keyof TemporalIntrinsicRegistrations\r\n) {\r\n  Object.defineProperty(Class.prototype, Symbol.toStringTag, {\r\n    value: name,\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true\r\n  });\r\n  if (DEBUG) {\r\n    Object.defineProperty(Class.prototype, Symbol.for('nodejs.util.inspect.custom'), {\r\n      value: customUtilInspectFormatters[name] || defaultUtilInspectFormatter,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true\r\n    });\r\n  }\r\n  const staticNames = Object.getOwnPropertyNames(Class);\r\n  for (let i = 0; i < staticNames.length; i++) {\r\n    const prop = staticNames[i];\r\n    // we know that `prop` is present, so the descriptor is never undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const desc = Object.getOwnPropertyDescriptor(Class, prop)!;\r\n    if (!desc.configurable || !desc.enumerable) continue;\r\n    desc.enumerable = false;\r\n    Object.defineProperty(Class, prop, desc);\r\n  }\r\n  const protoNames = Object.getOwnPropertyNames(Class.prototype);\r\n  for (let i = 0; i < protoNames.length; i++) {\r\n    const prop = protoNames[i];\r\n    // we know that `prop` is present, so the descriptor is never undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const desc = Object.getOwnPropertyDescriptor(Class.prototype, prop)!;\r\n    if (!desc.configurable || !desc.enumerable) continue;\r\n    desc.enumerable = false;\r\n    Object.defineProperty(Class.prototype, prop, desc);\r\n  }\r\n\r\n  DefineIntrinsic(name, Class);\r\n  DefineIntrinsic(`${name}.prototype`, Class.prototype);\r\n}\r\n\r\ntype IntrinsicDefinitionKeys =\r\n  | keyof TemporalIntrinsicRegistrations\r\n  | keyof TemporalIntrinsicPrototypeRegistrations\r\n  | keyof OtherIntrinsics;\r\nexport function DefineIntrinsic<KeyT extends keyof TemporalIntrinsicRegistrations>(\r\n  name: KeyT,\r\n  value: TemporalIntrinsicRegistrations[KeyT]\r\n): void;\r\nexport function DefineIntrinsic<KeyT extends keyof TemporalIntrinsicPrototypeRegistrations>(\r\n  name: KeyT,\r\n  value: TemporalIntrinsicPrototypeRegistrations[KeyT]\r\n): void;\r\nexport function DefineIntrinsic<KeyT extends keyof OtherIntrinsics>(name: KeyT, value: OtherIntrinsics[KeyT]): void;\r\nexport function DefineIntrinsic<KeyT>(name: KeyT, value: never): void;\r\nexport function DefineIntrinsic<KeyT extends IntrinsicDefinitionKeys>(name: KeyT, value: unknown): void {\r\n  const key: `%${IntrinsicDefinitionKeys}%` = `%${name}%`;\r\n  if (INTRINSICS[key] !== undefined) throw new Error(`intrinsic ${name} already exists`);\r\n  INTRINSICS[key] = value;\r\n}\r\nexport function GetIntrinsic<KeyT extends keyof typeof INTRINSICS>(intrinsic: KeyT): (typeof INTRINSICS)[KeyT] {\r\n  return INTRINSICS[intrinsic];\r\n}\r\n","import type { Temporal } from '..';\r\n\r\n// Computes trunc(x / 10**p) and x % 10**p, returning { div, mod }, with\r\n// precision loss only once in the quotient, by string manipulation. If the\r\n// quotient and remainder are safe integers, then they are exact. x must be an\r\n// integer. p must be a non-negative integer. Both div and mod have the sign of\r\n// x.\r\nexport function TruncatingDivModByPowerOf10(xParam: number, p: number) {\r\n  let x = xParam;\r\n  if (x === 0) return { div: x, mod: x }; // preserves signed zero\r\n\r\n  const sign = Math.sign(x);\r\n  x = Math.abs(x);\r\n\r\n  const xDigits = Math.trunc(1 + Math.log10(x));\r\n  if (p >= xDigits) return { div: sign * 0, mod: sign * x };\r\n  if (p === 0) return { div: sign * x, mod: sign * 0 };\r\n\r\n  // would perform nearest rounding if x was not an integer:\r\n  const xStr = x.toPrecision(xDigits);\r\n  const div = sign * Number.parseInt(xStr.slice(0, xDigits - p), 10);\r\n  const mod = sign * Number.parseInt(xStr.slice(xDigits - p), 10);\r\n\r\n  return { div, mod };\r\n}\r\n\r\n// Computes x * 10**p + z with precision loss only at the end, by string\r\n// manipulation. If the result is a safe integer, then it is exact. x must be\r\n// an integer. p must be a non-negative integer. z must have the same sign as\r\n// x and be less than 10**p.\r\nexport function FMAPowerOf10(xParam: number, p: number, zParam: number) {\r\n  let x = xParam;\r\n  let z = zParam;\r\n  if (x === 0) return z;\r\n\r\n  const sign = Math.sign(x) || Math.sign(z);\r\n  x = Math.abs(x);\r\n  z = Math.abs(z);\r\n\r\n  const xStr = x.toPrecision(Math.trunc(1 + Math.log10(x)));\r\n\r\n  if (z === 0) return sign * Number.parseInt(xStr + '0'.repeat(p), 10);\r\n\r\n  const zStr = z.toPrecision(Math.trunc(1 + Math.log10(z)));\r\n\r\n  const resStr = xStr + zStr.padStart(p, '0');\r\n  return sign * Number.parseInt(resStr, 10);\r\n}\r\n\r\ntype UnsignedRoundingMode = 'half-even' | 'half-infinity' | 'half-zero' | 'infinity' | 'zero';\r\n\r\nexport function GetUnsignedRoundingMode(\r\n  mode: Temporal.RoundingMode,\r\n  sign: 'positive' | 'negative'\r\n): UnsignedRoundingMode {\r\n  const isNegative = sign === 'negative';\r\n  switch (mode) {\r\n    case 'ceil':\r\n      return isNegative ? 'zero' : 'infinity';\r\n    case 'floor':\r\n      return isNegative ? 'infinity' : 'zero';\r\n    case 'expand':\r\n      return 'infinity';\r\n    case 'trunc':\r\n      return 'zero';\r\n    case 'halfCeil':\r\n      return isNegative ? 'half-zero' : 'half-infinity';\r\n    case 'halfFloor':\r\n      return isNegative ? 'half-infinity' : 'half-zero';\r\n    case 'halfExpand':\r\n      return 'half-infinity';\r\n    case 'halfTrunc':\r\n      return 'half-zero';\r\n    case 'halfEven':\r\n      return 'half-even';\r\n  }\r\n}\r\n\r\n// Omits first step from spec algorithm so that it can be used both for\r\n// RoundNumberToIncrement and RoundTimeDurationToIncrement\r\nexport function ApplyUnsignedRoundingMode<T extends number | bigint>(\r\n  r1: T,\r\n  r2: T,\r\n  cmp: -1 | 0 | 1,\r\n  evenCardinality: boolean,\r\n  unsignedRoundingMode: UnsignedRoundingMode\r\n) {\r\n  if (unsignedRoundingMode === 'zero') return r1;\r\n  if (unsignedRoundingMode === 'infinity') return r2;\r\n  if (cmp < 0) return r1;\r\n  if (cmp > 0) return r2;\r\n  if (unsignedRoundingMode === 'half-zero') return r1;\r\n  if (unsignedRoundingMode === 'half-infinity') return r2;\r\n  return evenCardinality ? r1 : r2;\r\n}\r\n","import { assert } from './assert';\r\nimport {\r\n  abs,\r\n  BILLION,\r\n  compare,\r\n  divmod,\r\n  DAY_NANOS,\r\n  HOUR_NANOS,\r\n  MINUTE_NANOS,\r\n  isEven,\r\n  MILLION,\r\n  ONE,\r\n  TEN,\r\n  THOUSAND,\r\n  TWO,\r\n  ZERO\r\n} from './bigintmath';\r\nimport { ApplyUnsignedRoundingMode, GetUnsignedRoundingMode } from './math';\r\nimport type { Temporal } from '..';\r\n\r\nexport class TimeDuration {\r\n  static MAX = 9007199254740991999999999n;\r\n  static ZERO = new TimeDuration(ZERO);\r\n\r\n  totalNs: bigint;\r\n  sec: number;\r\n  subsec: number;\r\n\r\n  constructor(totalNs: bigint) {\r\n    assert(typeof totalNs !== 'bigint', 'big integer required');\r\n    this.totalNs = totalNs;\r\n    assert(abs(this.totalNs) <= TimeDuration.MAX, 'integer too big');\r\n\r\n    this.sec = Number(this.totalNs / BILLION);\r\n    this.subsec = Number(this.totalNs % BILLION);\r\n    assert(Number.isSafeInteger(this.sec), 'seconds too big');\r\n    assert(Math.abs(this.subsec) <= 999_999_999, 'subseconds too big');\r\n  }\r\n\r\n  static validateNew(totalNs: bigint, operation: string) {\r\n    if (abs(totalNs) > TimeDuration.MAX) {\r\n      throw new RangeError(`${operation} of duration time units cannot exceed ${TimeDuration.MAX} s`);\r\n    }\r\n    return new TimeDuration(totalNs);\r\n  }\r\n\r\n  static fromEpochNsDiff(epochNs1: bigint, epochNs2: bigint) {\r\n    const diff = epochNs1 - epochNs2;\r\n    // No extra validate step. Should instead fail assertion if too big\r\n    return new TimeDuration(diff);\r\n  }\r\n\r\n  static fromComponents(h: number, min: number, s: number, ms: number, µs: number, ns: number) {\r\n    const totalNs =\r\n      BigInt(ns) +\r\n      BigInt(µs) * THOUSAND +\r\n      BigInt(ms) * MILLION +\r\n      BigInt(s) * BILLION +\r\n      BigInt(min) * MINUTE_NANOS +\r\n      BigInt(h) * HOUR_NANOS;\r\n    return TimeDuration.validateNew(totalNs, 'total');\r\n  }\r\n\r\n  abs() {\r\n    return new TimeDuration(abs(this.totalNs));\r\n  }\r\n\r\n  add(other: TimeDuration) {\r\n    return TimeDuration.validateNew(this.totalNs + other.totalNs, 'sum');\r\n  }\r\n\r\n  add24HourDays(days: number) {\r\n    assert(Number.isInteger(days), 'days must be an integer');\r\n    return TimeDuration.validateNew(this.totalNs + BigInt(days) * DAY_NANOS, 'sum');\r\n  }\r\n\r\n  addToEpochNs(epochNs: bigint) {\r\n    return epochNs + this.totalNs;\r\n  }\r\n\r\n  cmp(other: TimeDuration) {\r\n    return compare(this.totalNs, other.totalNs);\r\n  }\r\n\r\n  divmod(n: number) {\r\n    assert(n !== 0, 'division by zero');\r\n    const { quotient, remainder } = divmod(this.totalNs, BigInt(n));\r\n    const q = quotient;\r\n    const r = new TimeDuration(remainder);\r\n    return { quotient: q, remainder: r };\r\n  }\r\n\r\n  fdiv(nParam: bigint) {\r\n    const n = nParam;\r\n    assert(n !== ZERO, 'division by zero');\r\n    const nBigInt = BigInt(n);\r\n    let { quotient, remainder } = divmod(this.totalNs, nBigInt);\r\n\r\n    // Perform long division to calculate the fractional part of the quotient\r\n    // remainder / n with more accuracy than 64-bit floating point division\r\n    const precision = 50;\r\n    const decimalDigits: number[] = [];\r\n    let digit;\r\n    const sign = (this.totalNs < 0n ? -1 : 1) * Math.sign(Number(n));\r\n    while (remainder !== 0n && decimalDigits.length < precision) {\r\n      remainder = remainder * TEN;\r\n      ({ quotient: digit, remainder } = divmod(remainder, nBigInt));\r\n      decimalDigits.push(Math.abs(Number(digit)));\r\n    }\r\n    return sign * Number(abs(quotient).toString() + '.' + decimalDigits.join(''));\r\n  }\r\n\r\n  isZero() {\r\n    return this.totalNs === ZERO;\r\n  }\r\n\r\n  round(incrementParam: bigint, mode: Temporal.RoundingMode) {\r\n    const increment = incrementParam;\r\n    if (increment === ONE) return this;\r\n    const { quotient, remainder } = divmod(this.totalNs, increment);\r\n    const sign = this.totalNs < 0n ? 'negative' : 'positive';\r\n    const r1 = abs(quotient) * increment;\r\n    const r2 = r1 + increment;\r\n    const cmp = compare(abs(remainder * TWO), increment);\r\n    const unsignedRoundingMode = GetUnsignedRoundingMode(mode, sign);\r\n    const rounded = \r\n      remainder === 0n ? r1 : ApplyUnsignedRoundingMode(r1, r2, cmp, isEven(quotient), unsignedRoundingMode);\r\n    const result = sign === 'positive' ? rounded : -rounded;\r\n    return TimeDuration.validateNew(result, 'rounding');\r\n  }\r\n\r\n  sign() {\r\n    return this.cmp(new TimeDuration(ZERO));\r\n  }\r\n\r\n  subtract(other: TimeDuration) {\r\n    return TimeDuration.validateNew(this.totalNs - other.totalNs, 'difference');\r\n  }\r\n}\r\n","const offsetIdentifierNoCapture = /(?:[+-](?:[01][0-9]|2[0-3])(?::?[0-5][0-9])?)/;\r\nconst tzComponent = /[A-Za-z._][A-Za-z._0-9+-]*/;\r\nexport const timeZoneID = new RegExp(\r\n  `(?:${offsetIdentifierNoCapture.source}|(?:${tzComponent.source})(?:\\\\/(?:${tzComponent.source}))*)`\r\n);\r\n\r\nconst yearpart = /(?:[+-]\\d{6}|\\d{4})/;\r\nconst monthpart = /(?:0[1-9]|1[0-2])/;\r\nconst daypart = /(?:0[1-9]|[12]\\d|3[01])/;\r\nconst datesplit = new RegExp(\r\n  `(${yearpart.source})(?:-(${monthpart.source})-(${daypart.source})|(${monthpart.source})(${daypart.source}))`\r\n);\r\nconst timesplit = /(\\d{2})(?::(\\d{2})(?::(\\d{2})(?:[.,](\\d{1,9}))?)?|(\\d{2})(?:(\\d{2})(?:[.,](\\d{1,9}))?)?)?/;\r\nexport const offsetWithParts = /([+-])([01][0-9]|2[0-3])(?::?([0-5][0-9])(?::?([0-5][0-9])(?:[.,](\\d{1,9}))?)?)?/;\r\nexport const offset = /((?:[+-])(?:[01][0-9]|2[0-3])(?::?(?:[0-5][0-9])(?::?(?:[0-5][0-9])(?:[.,](?:\\d{1,9}))?)?)?)/;\r\nconst offsetpart = new RegExp(`([zZ])|${offset.source}?`);\r\nexport const offsetIdentifier = /([+-])([01][0-9]|2[0-3])(?::?([0-5][0-9])?)?/;\r\nexport const annotation = /\\[(!)?([a-z_][a-z0-9_-]*)=([A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)\\]/g;\r\n\r\nexport const zoneddatetime = new RegExp(\r\n  [\r\n    `^${datesplit.source}`,\r\n    `(?:(?:[tT]|\\\\s+)${timesplit.source}(?:${offsetpart.source})?)?`,\r\n    `(?:\\\\[!?(${timeZoneID.source})\\\\])?`,\r\n    `((?:${annotation.source})*)$`\r\n  ].join('')\r\n);\r\n\r\nexport const time = new RegExp(\r\n  [\r\n    `^[tT]?${timesplit.source}`,\r\n    `(?:${offsetpart.source})?`,\r\n    `(?:\\\\[!?${timeZoneID.source}\\\\])?`,\r\n    `((?:${annotation.source})*)$`\r\n  ].join('')\r\n);\r\n\r\n// The short forms of YearMonth and MonthDay are only for the ISO calendar, but\r\n// annotations are still allowed, and will throw if the calendar annotation is\r\n// not ISO.\r\n// Non-ISO calendar YearMonth and MonthDay have to parse as a Temporal.PlainDate,\r\n// with the reference fields.\r\n// YYYYMM forbidden by ISO 8601 because ambiguous with YYMMDD, but allowed by\r\n// RFC 3339 and we don't allow 2-digit years, so we allow it.\r\n// Not ambiguous with HHMMSS because that requires a 'T' prefix\r\n// UTC offsets are not allowed, because they are not allowed with any date-only\r\n// format; also, YYYY-MM-UU is ambiguous with YYYY-MM-DD\r\nexport const yearmonth = new RegExp(\r\n  `^(${yearpart.source})-?(${monthpart.source})(?:\\\\[!?${timeZoneID.source}\\\\])?((?:${annotation.source})*)$`\r\n);\r\nexport const monthday = new RegExp(\r\n  `^(?:--)?(${monthpart.source})-?(${daypart.source})(?:\\\\[!?${timeZoneID.source}\\\\])?((?:${annotation.source})*)$`\r\n);\r\n\r\nconst fraction = /(\\d+)(?:[.,](\\d{1,9}))?/;\r\n\r\nconst durationDate = /(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)W)?(?:(\\d+)D)?/;\r\nconst durationTime = new RegExp(`(?:${fraction.source}H)?(?:${fraction.source}M)?(?:${fraction.source}S)?`);\r\nexport const duration = new RegExp(`^([+-])?P${durationDate.source}(?:T(?!$)${durationTime.source})?$`, 'i');\r\n","import { DEBUG, ENABLE_ASSERTS } from './debug';\r\n\r\nimport type { Temporal } from '..';\r\nimport { assert, assertNotReached } from './assert';\r\nimport { abs, compare, divmod, isEven, MILLION, ONE, TWO, ZERO } from './bigintmath';\r\nimport type { CalendarImpl } from './calendar';\r\nimport type {\r\n  AnyTemporalLikeType,\r\n  UnitSmallerThanOrEqualTo,\r\n  InstantParams,\r\n  PlainMonthDayParams,\r\n  ZonedDateTimeParams,\r\n  PlainDateParams,\r\n  PlainTimeParams,\r\n  DurationParams,\r\n  PlainDateTimeParams,\r\n  PlainYearMonthParams,\r\n  BuiltinCalendarId,\r\n  Keys,\r\n  AnyTemporalKey,\r\n  FieldKey,\r\n  InternalDuration,\r\n  ISODateTime,\r\n  ISODate,\r\n  TimeRecord,\r\n  ISODateToFieldsType,\r\n  DateDuration,\r\n  CalendarFieldsRecord,\r\n  MonthDayFromFieldsObject,\r\n  Overflow,\r\n  Resolve,\r\n  AnySlottedType\r\n} from './internaltypes';\r\nimport { GetIntrinsic } from './intrinsicclass';\r\nimport { ApplyUnsignedRoundingMode, FMAPowerOf10, GetUnsignedRoundingMode, TruncatingDivModByPowerOf10 } from './math';\r\nimport { TimeDuration } from './timeduration';\r\nimport {\r\n  CreateSlots,\r\n  GetSlot,\r\n  HasSlot,\r\n  SetSlot,\r\n  EPOCHNANOSECONDS,\r\n  ISO_DATE,\r\n  ISO_DATE_TIME,\r\n  TIME,\r\n  DATE_BRAND,\r\n  YEAR_MONTH_BRAND,\r\n  MONTH_DAY_BRAND,\r\n  TIME_ZONE,\r\n  CALENDAR,\r\n  YEARS,\r\n  MONTHS,\r\n  WEEKS,\r\n  DAYS,\r\n  HOURS,\r\n  MINUTES,\r\n  SECONDS,\r\n  MILLISECONDS,\r\n  MICROSECONDS,\r\n  NANOSECONDS\r\n} from './slots';\r\n\r\nconst DAY_MS = 86400_000;\r\nexport const DAY_NANOS = DAY_MS * 1e6;\r\nexport const DAY_NANOS_BI = BigInt(DAY_NANOS);\r\nconst MINUTE_NANOS = 60e9;\r\n// Instant range is 100 million days (inclusive) before or after epoch.\r\nconst MS_MAX = DAY_MS * 1e8;\r\nconst NS_MAX = epochMsToNs(MS_MAX);\r\nconst NS_MIN = -NS_MAX;\r\n// PlainDateTime range is 24 hours wider (exclusive) than the Instant range on\r\n// both ends, to allow for valid Instant=>PlainDateTime conversion for all\r\n// built-in time zones (whose offsets must have a magnitude less than 24 hours).\r\nconst DATETIME_NS_MIN = DAY_NANOS_BI - NS_MIN + ONE;\r\nconst DATETIME_NS_MAX = DAY_NANOS_BI + NS_MAX - ONE;\r\n// The pattern of leap years in the ISO 8601 calendar repeats every 400 years.\r\n// The constant below is the number of nanoseconds in 400 years. It is used to\r\n// avoid overflows when dealing with values at the edge legacy Date's range.\r\nconst MS_IN_400_YEAR_CYCLE = (400 * 365 + 97) * DAY_MS;\r\nconst YEAR_MIN = -271821;\r\nconst YEAR_MAX = 275760;\r\nconst BEFORE_FIRST_DST = Date.UTC(1847, 0, 1); // 1847-01-01T00:00:00Z\r\n\r\nconst BUILTIN_CALENDAR_IDS = [\r\n  'iso8601',\r\n  'hebrew',\r\n  'islamic',\r\n  'islamic-umalqura',\r\n  'islamic-tbla',\r\n  'islamic-civil',\r\n  'islamic-rgsa',\r\n  'islamicc',\r\n  'persian',\r\n  'ethiopic',\r\n  'ethioaa',\r\n  'ethiopic-amete-alem',\r\n  'coptic',\r\n  'chinese',\r\n  'dangi',\r\n  'roc',\r\n  'indian',\r\n  'buddhist',\r\n  'japanese',\r\n  'gregory'\r\n];\r\n\r\nconst ICU_LEGACY_TIME_ZONE_IDS = new Set([\r\n  'ACT',\r\n  'AET',\r\n  'AGT',\r\n  'ART',\r\n  'AST',\r\n  'BET',\r\n  'BST',\r\n  'CAT',\r\n  'CNT',\r\n  'CST',\r\n  'CTT',\r\n  'EAT',\r\n  'ECT',\r\n  'IET',\r\n  'IST',\r\n  'JST',\r\n  'MIT',\r\n  'NET',\r\n  'NST',\r\n  'PLT',\r\n  'PNT',\r\n  'PRT',\r\n  'PST',\r\n  'SST',\r\n  'VST'\r\n]);\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */\r\n/**\r\n * uncheckedAssertNarrowedType forces TypeScript to change the type of the argument to the one given in\r\n * the type parameter. This should only be used to help TS understand when variables change types,\r\n * but TS can't or won't infer this automatically. They should be used sparingly, because\r\n * if used incorrectly can lead to difficult-to-diagnose problems.\r\n * */\r\nexport function uncheckedAssertNarrowedType<T = unknown>(\r\n  arg: unknown,\r\n  justification: string\r\n): asserts arg is T extends typeof arg ? T : never {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * In debug builds, this function verifies that the given argument \"exists\" (is not\r\n * null or undefined). This function becomes a no-op in the final bundles distributed via NPM.\r\n * @param arg\r\n */\r\nexport function assertExists<A>(arg: A): asserts arg is NonNullable<A> {\r\n  if (ENABLE_ASSERTS) {\r\n    if (arg == null) {\r\n      throw new Error('Expected arg to be set.');\r\n    }\r\n  }\r\n}\r\n\r\n/** Similar to assertExists, but returns the argument. */\r\nfunction castExists<A>(arg: A): NonNullable<A> {\r\n  assertExists(arg);\r\n  return arg;\r\n}\r\n\r\n// For unknown values, this narrows the result to a Record. But for union types\r\n// like `Temporal.DurationLike | string`, it'll strip the primitive types while\r\n// leaving the object type(s) unchanged.\r\nexport function IsObject<T>(\r\n  value: T\r\n): value is Exclude<T, string | null | undefined | number | bigint | symbol | boolean>;\r\nexport function IsObject(value: unknown): value is Record<string | number | symbol, unknown> {\r\n  return (typeof value === 'object' && value !== null) || typeof value === 'function';\r\n}\r\n\r\nexport function ToNumber(value: unknown): number {\r\n  // ES 2022's es-abstract made minor changes to ToNumber, but polyfilling these\r\n  // changes adds zero benefit to Temporal and brings in a lot of extra code. So\r\n  // we'll leave ToNumber as-is.\r\n  // See https://github.com/ljharb/es-abstract/blob/main/2022/ToNumber.js\r\n  if (typeof value === 'bigint') throw new TypeError('Cannot convert BigInt to number');\r\n  return Number(value);\r\n}\r\n\r\nfunction IsIntegralNumber(argument: unknown) {\r\n  if (typeof argument !== 'number' || Number.isNaN(argument) || argument === Infinity || argument === -Infinity) {\r\n    return false;\r\n  }\r\n  const absValue = Math.abs(argument);\r\n  return Math.floor(absValue) === absValue;\r\n}\r\n\r\nexport function ToString(value: unknown): string {\r\n  if (typeof value === 'symbol') {\r\n    throw new TypeError('Cannot convert a Symbol value to a String');\r\n  }\r\n  return String(value);\r\n}\r\n\r\nexport function ToIntegerWithTruncation(value: unknown): number {\r\n  const number = ToNumber(value);\r\n  if (number === 0) return 0;\r\n  if (Number.isNaN(number) || number === Infinity || number === -Infinity) {\r\n    throw new RangeError('invalid number value');\r\n  }\r\n  const integer = Math.trunc(number);\r\n  if (integer === 0) return 0; // ℝ(value) in spec text; converts -0 to 0\r\n  return integer;\r\n}\r\n\r\nfunction ToPositiveIntegerWithTruncation(valueParam: unknown, property?: string): number {\r\n  const integer = ToIntegerWithTruncation(valueParam);\r\n  if (integer <= 0) {\r\n    if (property !== undefined) {\r\n      throw new RangeError(`property '${property}' cannot be a a number less than one`);\r\n    }\r\n    throw new RangeError('Cannot convert a number less than one to a positive integer');\r\n  }\r\n  return integer;\r\n}\r\n\r\nexport function ToIntegerIfIntegral(valueParam: unknown): number {\r\n  const number = ToNumber(valueParam);\r\n  if (Number.isNaN(number)) throw new RangeError('not a number');\r\n  if (number === Infinity || number === -Infinity) throw new RangeError('infinity is out of range');\r\n  if (!IsIntegralNumber(number)) throw new RangeError(`unsupported fractional value ${valueParam}`);\r\n  if (number === 0) return 0; // ℝ(value) in spec text; converts -0 to 0\r\n  return number;\r\n}\r\n\r\nfunction ToZeroPaddedDecimalString(n: number, minLength: number) {\r\n  if (DEBUG) {\r\n    if (!IsIntegralNumber(n) || n < 0) {\r\n      throw new RangeError('Assertion failed: `${n}` must be a non-negative integer');\r\n    }\r\n  }\r\n  const s = String(n);\r\n  return s.padStart(minLength, '0');\r\n}\r\n\r\n// This convenience function isn't in the spec, but is useful in the polyfill\r\n// for DRY and better error messages.\r\nexport function RequireString(value: unknown): string {\r\n  if (typeof value !== 'string') {\r\n    // Use String() to ensure that Symbols won't throw\r\n    throw new TypeError(`expected a string, not ${String(value)}`);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction ToSyntacticallyValidMonthCode(valueParam: unknown) {\r\n  const value = RequireString(ToPrimitive(valueParam, String));\r\n  if (\r\n    value.length < 3 ||\r\n    value.length > 4 ||\r\n    value[0] !== 'M' ||\r\n    '0123456789'.indexOf(value[1]) === -1 ||\r\n    '0123456789'.indexOf(value[2]) === -1 ||\r\n    (value[1] + value[2] === '00' && value[3] !== 'L') ||\r\n    (value[3] !== 'L' && value[3] !== undefined)\r\n  ) {\r\n    throw new RangeError(`bad month code ${value}; must match M01-M99 or M00L-M99L`);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction ToOffsetString(valueParam: unknown) {\r\n  const value = RequireString(ToPrimitive(valueParam, String));\r\n  ParseDateTimeUTCOffset(value);\r\n  return value;\r\n}\r\n\r\n// Limited implementation of ToPrimitive that only handles the string case,\r\n// because that's all that's used in this polyfill.\r\nfunction ToPrimitive(value: unknown, preferredType: typeof String): string | number {\r\n  assertExists(preferredType === String);\r\n  if (IsObject(value)) {\r\n    const result = value?.toString();\r\n    if (typeof result === 'string' || typeof result === 'number') return result;\r\n    throw new TypeError('Cannot convert object to primitive value');\r\n  }\r\n  return value;\r\n}\r\n\r\nconst CALENDAR_FIELD_KEYS: readonly FieldKey[] = [\r\n  'era',\r\n  'eraYear',\r\n  'year',\r\n  'month',\r\n  'monthCode',\r\n  'day',\r\n  'hour',\r\n  'minute',\r\n  'second',\r\n  'millisecond',\r\n  'microsecond',\r\n  'nanosecond',\r\n  'offset',\r\n  'timeZone'\r\n] as const;\r\n\r\ntype BuiltinCastFunction = (v: unknown) => string | number;\r\nconst BUILTIN_CASTS: Partial<Record<FieldKey, BuiltinCastFunction>> = {\r\n  era: ToString,\r\n  eraYear: ToIntegerWithTruncation,\r\n  year: ToIntegerWithTruncation,\r\n  month: ToPositiveIntegerWithTruncation,\r\n  monthCode: ToSyntacticallyValidMonthCode,\r\n  day: ToPositiveIntegerWithTruncation,\r\n  hour: ToIntegerWithTruncation,\r\n  minute: ToIntegerWithTruncation,\r\n  second: ToIntegerWithTruncation,\r\n  millisecond: ToIntegerWithTruncation,\r\n  microsecond: ToIntegerWithTruncation,\r\n  nanosecond: ToIntegerWithTruncation,\r\n  offset: ToOffsetString,\r\n  timeZone: ToTemporalTimeZoneIdentifier\r\n};\r\n\r\nconst BUILTIN_DEFAULTS: Partial<Record<FieldKey, number>> = {\r\n  hour: 0,\r\n  minute: 0,\r\n  second: 0,\r\n  millisecond: 0,\r\n  microsecond: 0,\r\n  nanosecond: 0\r\n};\r\n\r\n// each item is [plural, singular, category, (length in ns)]\r\nconst TEMPORAL_UNITS = [\r\n  ['years', 'year', 'date'],\r\n  ['months', 'month', 'date'],\r\n  ['weeks', 'week', 'date'],\r\n  ['days', 'day', 'date'],\r\n  ['hours', 'hour', 'time'],\r\n  ['minutes', 'minute', 'time'],\r\n  ['seconds', 'second', 'time'],\r\n  ['milliseconds', 'millisecond', 'time'],\r\n  ['microseconds', 'microsecond', 'time'],\r\n  ['nanoseconds', 'nanosecond', 'time']\r\n] as const;\r\nconst SINGULAR_FOR = Object.fromEntries(TEMPORAL_UNITS.map((e) => [e[0], e[1]] as const));\r\nconst PLURAL_FOR = Object.fromEntries(TEMPORAL_UNITS.map(([p, s]) => [s, p] as const));\r\nconst UNITS_DESCENDING = TEMPORAL_UNITS.map(([, s]) => s);\r\ntype TimeUnitOrDay = Temporal.TimeUnit | 'day';\r\nconst NS_PER_TIME_UNIT = {\r\n  day: DAY_NANOS,\r\n  hour: 3600e9,\r\n  minute: 60e9,\r\n  second: 1e9,\r\n  millisecond: 1e6,\r\n  microsecond: 1e3,\r\n  nanosecond: 1\r\n};\r\n\r\nconst DURATION_FIELDS = [\r\n  'days',\r\n  'hours',\r\n  'microseconds',\r\n  'milliseconds',\r\n  'minutes',\r\n  'months',\r\n  'nanoseconds',\r\n  'seconds',\r\n  'weeks',\r\n  'years'\r\n] as const;\r\n\r\nimport * as PARSE from './regex';\r\n\r\n// Save the original Intl.DateTimeFormat, it will likely be overwritten with the\r\n// one from this polyfill. Caching the formatter below may be reentrant, so we\r\n// need to use the original one\r\nconst OriginalIntlDateTimeFormat = Intl.DateTimeFormat;\r\nconst IntlDateTimeFormatEnUsCache = new Map<string, Intl.DateTimeFormat>();\r\n\r\nfunction getIntlDateTimeFormatEnUsForTimeZone(timeZoneIdentifier: string) {\r\n  const lowercaseIdentifier = ASCIILowercase(timeZoneIdentifier);\r\n  let instance = IntlDateTimeFormatEnUsCache.get(lowercaseIdentifier);\r\n  if (instance === undefined) {\r\n    instance = new OriginalIntlDateTimeFormat('en-us', {\r\n      timeZone: lowercaseIdentifier,\r\n      hour12: false,\r\n      era: 'short',\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      second: 'numeric'\r\n    });\r\n    IntlDateTimeFormatEnUsCache.set(lowercaseIdentifier, instance);\r\n  }\r\n  return instance;\r\n}\r\n\r\nexport function ToObject<T>(value: T): T extends Record<string, unknown> ? T : Record<PropertyKey, unknown> {\r\n  if (typeof value === 'undefined' || value === null) {\r\n    throw new TypeError(`Expected object not ${value}`);\r\n  }\r\n  return Object(value);\r\n}\r\n\r\n// Adapted from https://github.com/ljharb/es-abstract/blob/main/2022/CopyDataProperties.js\r\n// but simplified (e.g. removed assertions) for this polyfill to reduce bundle size.\r\nexport function CopyDataProperties<K extends PropertyKey, T extends Record<K, unknown>>(\r\n  target: T,\r\n  source: T | undefined,\r\n  excludedKeys: K[],\r\n  excludedValues?: unknown[]\r\n) {\r\n  if (typeof source === 'undefined' || source === null) return;\r\n\r\n  const keys = Reflect.ownKeys(source) as (keyof T)[];\r\n  for (let index = 0; index < keys.length; index++) {\r\n    const nextKey = keys[index];\r\n    if (excludedKeys.some((e) => Object.is(e, nextKey))) continue;\r\n    if (Object.prototype.propertyIsEnumerable.call(source, nextKey)) {\r\n      const propValue = source[nextKey];\r\n      if (excludedValues && excludedValues.some((e) => Object.is(e, propValue))) continue;\r\n\r\n      target[nextKey] = propValue;\r\n    }\r\n  }\r\n}\r\n\r\nexport function IsTemporalInstant(item: unknown): item is Temporal.Instant {\r\n  return HasSlot(item, EPOCHNANOSECONDS) && !HasSlot(item, TIME_ZONE, CALENDAR);\r\n}\r\n\r\nexport function IsTemporalDuration(item: unknown): item is Temporal.Duration {\r\n  return HasSlot(item, YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS);\r\n}\r\nexport function IsTemporalDate(item: unknown): item is Temporal.PlainDate {\r\n  return HasSlot(item, DATE_BRAND);\r\n}\r\n\r\nexport function IsTemporalTime(item: unknown): item is Temporal.PlainTime {\r\n  return HasSlot(item, TIME);\r\n}\r\n\r\nexport function IsTemporalDateTime(item: unknown): item is Temporal.PlainDateTime {\r\n  return HasSlot(item, ISO_DATE_TIME);\r\n}\r\n\r\nexport function IsTemporalYearMonth(item: unknown): item is Temporal.PlainYearMonth {\r\n  return HasSlot(item, YEAR_MONTH_BRAND);\r\n}\r\nexport function IsTemporalMonthDay(item: unknown): item is Temporal.PlainMonthDay {\r\n  return HasSlot(item, MONTH_DAY_BRAND);\r\n}\r\nexport function IsTemporalZonedDateTime(item: unknown): item is Temporal.ZonedDateTime {\r\n  return HasSlot(item, EPOCHNANOSECONDS, TIME_ZONE, CALENDAR);\r\n}\r\n\r\nexport function CheckReceiver<T extends AnySlottedType>(\r\n  item: unknown,\r\n  test: (item: unknown) => item is T\r\n): asserts item is T {\r\n  if (!test(item)) throw new TypeError('invalid receiver: method called with the wrong type of this-object');\r\n}\r\n\r\nexport function RejectTemporalLikeObject(item: AnyTemporalLikeType) {\r\n  if (HasSlot(item, CALENDAR) || HasSlot(item, TIME_ZONE)) {\r\n    throw new TypeError('with() does not support a calendar or timeZone property');\r\n  }\r\n  if (IsTemporalTime(item)) {\r\n    throw new TypeError('with() does not accept Temporal.PlainTime, use withPlainTime() instead');\r\n  }\r\n  if ((item as { calendar: unknown }).calendar !== undefined) {\r\n    throw new TypeError('with() does not support a calendar property');\r\n  }\r\n  if ((item as { timeZone: unknown }).timeZone !== undefined) {\r\n    throw new TypeError('with() does not support a timeZone property');\r\n  }\r\n}\r\n\r\nfunction FormatCalendarAnnotation(id: BuiltinCalendarId, showCalendar: Temporal.ShowCalendarOption['calendarName']) {\r\n  if (showCalendar === 'never') return '';\r\n  if (showCalendar === 'auto' && id === 'iso8601') return '';\r\n  const flag = showCalendar === 'critical' ? '!' : '';\r\n  return `[${flag}u-ca=${id}]`;\r\n}\r\n\r\n// Not a separate abstract operation in the spec, because it only occurs in one\r\n// place: ParseISODateTime. In the code it's more convenient to split up\r\n// ParseISODateTime for the YYYY-MM, MM-DD, and THH:MM:SS parse goals, so it's\r\n// repeated four times.\r\nfunction processAnnotations(annotations: string) {\r\n  let calendar;\r\n  let calendarWasCritical = false;\r\n  // Avoid the user code minefield of matchAll.\r\n  let match;\r\n  PARSE.annotation.lastIndex = 0;\r\n  while ((match = PARSE.annotation.exec(annotations))) {\r\n    const { 1: critical, 2: key, 3: value } = match;\r\n    if (key === 'u-ca') {\r\n      if (calendar === undefined) {\r\n        calendar = value;\r\n        calendarWasCritical = critical === '!';\r\n      } else if (critical === '!' || calendarWasCritical) {\r\n        throw new RangeError(`Invalid annotations in ${annotations}: more than one u-ca present with critical flag`);\r\n      }\r\n    } else if (critical === '!') {\r\n      throw new RangeError(`Unrecognized annotation: !${key}=${value}`);\r\n    }\r\n  }\r\n  return calendar;\r\n}\r\n\r\nfunction ParseISODateTime(isoString: string) {\r\n  // ZDT is the superset of fields for every other Temporal type\r\n  const match = PARSE.zoneddatetime.exec(isoString);\r\n  if (!match) throw new RangeError(`invalid RFC 9557 string: ${isoString}`);\r\n  const calendar = processAnnotations(match[16]);\r\n  let yearString = match[1];\r\n  if (yearString === '-000000') throw new RangeError(`invalid RFC 9557 string: ${isoString}`);\r\n  const year = +yearString;\r\n  const month = +(match[2] ?? match[4] ?? 1);\r\n  const day = +(match[3] ?? match[5] ?? 1);\r\n  const hasTime = match[6] !== undefined;\r\n  const hour = +(match[6] ?? 0);\r\n  const minute = +(match[7] ?? match[10] ?? 0);\r\n  let second = +(match[8] ?? match[11] ?? 0);\r\n  if (second === 60) second = 59;\r\n  const fraction = (match[9] ?? match[12] ?? '') + '000000000';\r\n  const millisecond = +fraction.slice(0, 3);\r\n  const microsecond = +fraction.slice(3, 6);\r\n  const nanosecond = +fraction.slice(6, 9);\r\n  let offset;\r\n  let z = false;\r\n  if (match[13]) {\r\n    offset = undefined;\r\n    z = true;\r\n  } else if (match[14]) {\r\n    offset = match[14];\r\n  }\r\n  const tzAnnotation = match[15];\r\n  RejectDateTime(year, month, day, hour, minute, second, millisecond, microsecond, nanosecond);\r\n  return {\r\n    year,\r\n    month,\r\n    day,\r\n    time: hasTime ? { hour, minute, second, millisecond, microsecond, nanosecond } : ('start-of-day' as const),\r\n    tzAnnotation,\r\n    offset,\r\n    z,\r\n    calendar\r\n  };\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalInstantString(isoString: string) {\r\n  const result = ParseISODateTime(isoString);\r\n  if (!result.z && !result.offset) throw new RangeError('Temporal.Instant requires a time zone offset');\r\n  return result;\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalZonedDateTimeString(isoString: string) {\r\n  const result = ParseISODateTime(isoString);\r\n  if (!result.tzAnnotation) throw new RangeError('Temporal.ZonedDateTime requires a time zone ID in brackets');\r\n  return result;\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalDateTimeString(isoString: string) {\r\n  return ParseISODateTime(isoString);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalDateString(isoString: string) {\r\n  return ParseISODateTime(isoString);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalTimeString(isoString: string) {\r\n  const match = PARSE.time.exec(isoString);\r\n  let hour, minute, second, millisecond, microsecond, nanosecond, calendar;\r\n  if (match) {\r\n    calendar = processAnnotations(match[10]);\r\n    hour = +(match[1] ?? 0);\r\n    minute = +(match[2] ?? match[5] ?? 0);\r\n    second = +(match[3] ?? match[6] ?? 0);\r\n    if (second === 60) second = 59;\r\n    const fraction = (match[4] ?? match[7] ?? '') + '000000000';\r\n    millisecond = +fraction.slice(0, 3);\r\n    microsecond = +fraction.slice(3, 6);\r\n    nanosecond = +fraction.slice(6, 9);\r\n    if (match[8]) throw new RangeError('Z designator not supported for PlainTime');\r\n  } else {\r\n    let time, z;\r\n    ({ time, z, calendar } = ParseISODateTime(isoString));\r\n    if (time === 'start-of-day') throw new RangeError(`time is missing in string: ${isoString}`);\r\n    if (z) throw new RangeError('Z designator not supported for PlainTime');\r\n    ({ hour, minute, second, millisecond, microsecond, nanosecond } = time);\r\n  }\r\n  RejectTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n  // if it's a date-time string, OK\r\n  if (/[tT ][0-9][0-9]/.test(isoString)) {\r\n    return { hour, minute, second, millisecond, microsecond, nanosecond, calendar };\r\n  }\r\n  try {\r\n    const { month, day } = ParseTemporalMonthDayString(isoString);\r\n    RejectISODate(1972, month, day);\r\n  } catch {\r\n    try {\r\n      const { year, month } = ParseTemporalYearMonthString(isoString);\r\n      RejectISODate(year, month, 1);\r\n    } catch {\r\n      return { hour, minute, second, millisecond, microsecond, nanosecond, calendar };\r\n    }\r\n  }\r\n  throw new RangeError(`invalid RFC 9557 time-only string ${isoString}; may need a T prefix`);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalYearMonthString(isoString: string) {\r\n  const match = PARSE.yearmonth.exec(isoString);\r\n  let year, month, calendar, referenceISODay;\r\n  if (match) {\r\n    calendar = processAnnotations(match[3]);\r\n    let yearString = match[1];\r\n    if (yearString === '-000000') throw new RangeError(`invalid RFC 9557 string: ${isoString}`);\r\n    year = +yearString;\r\n    month = +match[2];\r\n    referenceISODay = 1;\r\n    if (calendar !== undefined && calendar !== 'iso8601') {\r\n      throw new RangeError('YYYY-MM format is only valid with iso8601 calendar');\r\n    }\r\n  } else {\r\n    let z;\r\n    ({ year, month, calendar, day: referenceISODay, z } = ParseISODateTime(isoString));\r\n    if (z) throw new RangeError('Z designator not supported for PlainYearMonth');\r\n  }\r\n  return { year, month, calendar, referenceISODay };\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalMonthDayString(isoString: string) {\r\n  const match = PARSE.monthday.exec(isoString);\r\n  let month, day, calendar, referenceISOYear;\r\n  if (match) {\r\n    calendar = processAnnotations(match[3]);\r\n    month = +match[1];\r\n    day = +match[2];\r\n    if (calendar !== undefined && calendar !== 'iso8601') {\r\n      throw new RangeError('MM-DD format is only valid with iso8601 calendar');\r\n    }\r\n  } else {\r\n    let z;\r\n    ({ month, day, calendar, year: referenceISOYear, z } = ParseISODateTime(isoString));\r\n    if (z) throw new RangeError('Z designator not supported for PlainMonthDay');\r\n  }\r\n  return { month, day, calendar, referenceISOYear };\r\n}\r\n\r\nconst TIMEZONE_IDENTIFIER = new RegExp(`^${PARSE.timeZoneID.source}$`, 'i');\r\nconst OFFSET_IDENTIFIER = new RegExp(`^${PARSE.offsetIdentifier.source}$`);\r\n\r\nfunction throwBadTimeZoneStringError(timeZoneString: string): never {\r\n  // Offset identifiers only support minute precision, but offsets in ISO\r\n  // strings support nanosecond precision. If the identifier is invalid but\r\n  // it's a valid ISO offset, then it has sub-minute precision. Show a clearer\r\n  // error message in that case.\r\n  const msg = OFFSET.test(timeZoneString) ? 'Seconds not allowed in offset time zone' : 'Invalid time zone';\r\n  throw new RangeError(`${msg}: ${timeZoneString}`);\r\n}\r\n\r\nexport function ParseTimeZoneIdentifier(\r\n  identifier: string\r\n): { tzName: string; offsetMinutes?: undefined } | { tzName?: undefined; offsetMinutes: number } {\r\n  if (!TIMEZONE_IDENTIFIER.test(identifier)) {\r\n    throwBadTimeZoneStringError(identifier);\r\n  }\r\n  if (OFFSET_IDENTIFIER.test(identifier)) {\r\n    const offsetNanoseconds = ParseDateTimeUTCOffset(identifier);\r\n    // The regex limits the input to minutes precision, so we know that the\r\n    // division below will result in an integer.\r\n    return { offsetMinutes: offsetNanoseconds / 60e9 };\r\n  }\r\n  return { tzName: identifier };\r\n}\r\n\r\n// This operation doesn't exist in the spec, but in the polyfill it's split from\r\n// ParseTemporalTimeZoneString so that parsing can be tested separately from the\r\n// logic of converting parsed values into a named or offset identifier.\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalTimeZoneStringRaw(timeZoneString: string): {\r\n  tzAnnotation: string;\r\n  offset: string | undefined;\r\n  z: boolean;\r\n} {\r\n  if (TIMEZONE_IDENTIFIER.test(timeZoneString)) {\r\n    return { tzAnnotation: timeZoneString, offset: undefined, z: false };\r\n  }\r\n  try {\r\n    // Try parsing ISO string instead\r\n    const { tzAnnotation, offset, z } = ParseISODateTime(timeZoneString);\r\n    if (z || tzAnnotation || offset) {\r\n      return { tzAnnotation, offset, z };\r\n    }\r\n  } catch {\r\n    // fall through\r\n  }\r\n  throwBadTimeZoneStringError(timeZoneString);\r\n}\r\n\r\nfunction ParseTemporalTimeZoneString(stringIdent: string): ReturnType<typeof ParseTimeZoneIdentifier> {\r\n  const { tzAnnotation, offset, z } = ParseTemporalTimeZoneStringRaw(stringIdent);\r\n  if (tzAnnotation) return ParseTimeZoneIdentifier(tzAnnotation);\r\n  if (z) return ParseTimeZoneIdentifier('UTC');\r\n  if (offset) return ParseTimeZoneIdentifier(offset);\r\n  /* c8 ignore next */ assertNotReached();\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove if test/validStrings is converted to TS.\r\nexport function ParseTemporalDurationStringRaw(isoString: string) {\r\n  const match = PARSE.duration.exec(isoString);\r\n  if (!match) throw new RangeError(`invalid duration: ${isoString}`);\r\n  if (match.every((part, i) => i < 2 || part === undefined)) {\r\n    throw new RangeError(`invalid duration: ${isoString}`);\r\n  }\r\n  const sign = match[1] === '-' ? -1 : 1;\r\n  const years = match[2] === undefined ? 0 : ToIntegerWithTruncation(match[2]) * sign;\r\n  const months = match[3] === undefined ? 0 : ToIntegerWithTruncation(match[3]) * sign;\r\n  const weeks = match[4] === undefined ? 0 : ToIntegerWithTruncation(match[4]) * sign;\r\n  const days = match[5] === undefined ? 0 : ToIntegerWithTruncation(match[5]) * sign;\r\n  const hours = match[6] === undefined ? 0 : ToIntegerWithTruncation(match[6]) * sign;\r\n  const fHours = match[7];\r\n  const minutesStr = match[8];\r\n  const fMinutes = match[9];\r\n  const secondsStr = match[10];\r\n  const fSeconds = match[11];\r\n  let minutes = 0;\r\n  let seconds = 0;\r\n  // fractional hours, minutes, or seconds, expressed in whole nanoseconds:\r\n  let excessNanoseconds = 0;\r\n\r\n  if (fHours !== undefined) {\r\n    if (minutesStr ?? fMinutes ?? secondsStr ?? fSeconds ?? false) {\r\n      throw new RangeError('only the smallest unit can be fractional');\r\n    }\r\n    excessNanoseconds = ToIntegerWithTruncation((fHours + '000000000').slice(0, 9)) * 3600 * sign;\r\n  } else {\r\n    minutes = minutesStr === undefined ? 0 : ToIntegerWithTruncation(minutesStr) * sign;\r\n    if (fMinutes !== undefined) {\r\n      if (secondsStr ?? fSeconds ?? false) {\r\n        throw new RangeError('only the smallest unit can be fractional');\r\n      }\r\n      excessNanoseconds = ToIntegerWithTruncation((fMinutes + '000000000').slice(0, 9)) * 60 * sign;\r\n    } else {\r\n      seconds = secondsStr === undefined ? 0 : ToIntegerWithTruncation(secondsStr) * sign;\r\n      if (fSeconds !== undefined) {\r\n        excessNanoseconds = ToIntegerWithTruncation((fSeconds + '000000000').slice(0, 9)) * sign;\r\n      }\r\n    }\r\n  }\r\n\r\n  const nanoseconds = excessNanoseconds % 1000;\r\n  const microseconds = Math.trunc(excessNanoseconds / 1000) % 1000;\r\n  const milliseconds = Math.trunc(excessNanoseconds / 1e6) % 1000;\r\n  seconds += Math.trunc(excessNanoseconds / 1e9) % 60;\r\n  minutes += Math.trunc(excessNanoseconds / 60e9);\r\n\r\n  RejectDuration(years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds);\r\n  return { years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds };\r\n}\r\n\r\nfunction ParseTemporalDurationString(isoString: string) {\r\n  const { years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds } =\r\n    ParseTemporalDurationStringRaw(isoString);\r\n  const TemporalDuration = GetIntrinsic('%Temporal.Duration%');\r\n  return new TemporalDuration(\r\n    years,\r\n    months,\r\n    weeks,\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    milliseconds,\r\n    microseconds,\r\n    nanoseconds\r\n  );\r\n}\r\n\r\nexport function RegulateISODate(yearParam: number, monthParam: number, dayParam: number, overflow: Overflow) {\r\n  let year = yearParam;\r\n  let month = monthParam;\r\n  let day = dayParam;\r\n  switch (overflow) {\r\n    case 'reject':\r\n      RejectISODate(year, month, day);\r\n      break;\r\n    case 'constrain':\r\n      ({ year, month, day } = ConstrainISODate(year, month, day));\r\n      break;\r\n  }\r\n  return { year, month, day };\r\n}\r\n\r\nexport function RegulateTime(\r\n  hourParam: number,\r\n  minuteParam: number,\r\n  secondParam: number,\r\n  millisecondParam: number,\r\n  microsecondParam: number,\r\n  nanosecondParam: number,\r\n  overflow: Overflow\r\n) {\r\n  let hour = hourParam;\r\n  let minute = minuteParam;\r\n  let second = secondParam;\r\n  let millisecond = millisecondParam;\r\n  let microsecond = microsecondParam;\r\n  let nanosecond = nanosecondParam;\r\n\r\n  switch (overflow) {\r\n    case 'reject':\r\n      RejectTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n      break;\r\n    case 'constrain':\r\n      hour = ConstrainToRange(hour, 0, 23);\r\n      minute = ConstrainToRange(minute, 0, 59);\r\n      second = ConstrainToRange(second, 0, 59);\r\n      millisecond = ConstrainToRange(millisecond, 0, 999);\r\n      microsecond = ConstrainToRange(microsecond, 0, 999);\r\n      nanosecond = ConstrainToRange(nanosecond, 0, 999);\r\n      break;\r\n  }\r\n  return { hour, minute, second, millisecond, microsecond, nanosecond };\r\n}\r\n\r\nexport function ToTemporalPartialDurationRecord(temporalDurationLike: Temporal.DurationLike | string) {\r\n  if (!IsObject(temporalDurationLike)) {\r\n    throw new TypeError('invalid duration-like');\r\n  }\r\n  const result: Record<(typeof DURATION_FIELDS)[number], number | undefined> = {\r\n    years: undefined,\r\n    months: undefined,\r\n    weeks: undefined,\r\n    days: undefined,\r\n    hours: undefined,\r\n    minutes: undefined,\r\n    seconds: undefined,\r\n    milliseconds: undefined,\r\n    microseconds: undefined,\r\n    nanoseconds: undefined\r\n  };\r\n  let any = false;\r\n  for (let index = 0; index < DURATION_FIELDS.length; index++) {\r\n    const property = DURATION_FIELDS[index];\r\n    const value = temporalDurationLike[property];\r\n    if (value !== undefined) {\r\n      any = true;\r\n      result[property] = ToIntegerIfIntegral(value);\r\n    }\r\n  }\r\n  if (!any) {\r\n    throw new TypeError('invalid duration-like');\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function AdjustDateDurationRecord(\r\n  { years, months, weeks, days }: DateDuration,\r\n  newDays: number,\r\n  newWeeks?: number,\r\n  newMonths?: number\r\n) {\r\n  return {\r\n    years,\r\n    months: newMonths ?? months,\r\n    weeks: newWeeks ?? weeks,\r\n    days: newDays ?? days\r\n  };\r\n}\r\n\r\nexport function ZeroDateDuration() {\r\n  return { years: 0, months: 0, weeks: 0, days: 0 };\r\n}\r\n\r\nexport function CombineISODateAndTimeRecord(isoDate: ISODate, time: TimeRecord) {\r\n  return { isoDate, time };\r\n}\r\n\r\nexport function MidnightTimeRecord() {\r\n  return { deltaDays: 0, hour: 0, minute: 0, second: 0, millisecond: 0, microsecond: 0, nanosecond: 0 };\r\n}\r\n\r\nexport function NoonTimeRecord() {\r\n  return { deltaDays: 0, hour: 12, minute: 0, second: 0, millisecond: 0, microsecond: 0, nanosecond: 0 };\r\n}\r\n\r\nexport function GetTemporalOverflowOption(options: Temporal.AssignmentOptions) {\r\n  return GetOption(options, 'overflow', ['constrain', 'reject'], 'constrain');\r\n}\r\n\r\nexport function GetTemporalDisambiguationOption(options: Temporal.ToInstantOptions) {\r\n  return GetOption(options, 'disambiguation', ['compatible', 'earlier', 'later', 'reject'], 'compatible');\r\n}\r\n\r\nexport function GetRoundingModeOption(\r\n  options: { roundingMode?: Temporal.RoundingMode },\r\n  fallback: Temporal.RoundingMode\r\n) {\r\n  return GetOption(\r\n    options,\r\n    'roundingMode',\r\n    ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'],\r\n    fallback\r\n  );\r\n}\r\n\r\nfunction NegateRoundingMode(roundingMode: Temporal.RoundingMode) {\r\n  switch (roundingMode) {\r\n    case 'ceil':\r\n      return 'floor';\r\n    case 'floor':\r\n      return 'ceil';\r\n    case 'halfCeil':\r\n      return 'halfFloor';\r\n    case 'halfFloor':\r\n      return 'halfCeil';\r\n    default:\r\n      return roundingMode;\r\n  }\r\n}\r\n\r\nexport function GetTemporalOffsetOption(\r\n  options: Temporal.OffsetDisambiguationOptions,\r\n  fallback: Required<Temporal.OffsetDisambiguationOptions>['offset']\r\n) {\r\n  return GetOption(options, 'offset', ['prefer', 'use', 'ignore', 'reject'], fallback);\r\n}\r\n\r\nexport function GetTemporalShowCalendarNameOption(options: Temporal.ShowCalendarOption) {\r\n  return GetOption(options, 'calendarName', ['auto', 'always', 'never', 'critical'], 'auto');\r\n}\r\n\r\nexport function GetTemporalShowTimeZoneNameOption(options: Temporal.ZonedDateTimeToStringOptions) {\r\n  return GetOption(options, 'timeZoneName', ['auto', 'never', 'critical'], 'auto');\r\n}\r\n\r\nexport function GetTemporalShowOffsetOption(options: Temporal.ZonedDateTimeToStringOptions) {\r\n  return GetOption(options, 'offset', ['auto', 'never'], 'auto');\r\n}\r\n\r\nexport function GetDirectionOption(options: { direction?: 'next' | 'previous' }) {\r\n  return GetOption(options, 'direction', ['next', 'previous'], REQUIRED);\r\n}\r\n\r\nexport function GetTemporalRoundingIncrementOption(options: { roundingIncrement?: number }) {\r\n  let increment = options.roundingIncrement;\r\n  if (increment === undefined) return 1;\r\n  const integerIncrement = ToIntegerWithTruncation(increment);\r\n  if (integerIncrement < 1 || integerIncrement > 1e9) {\r\n    throw new RangeError(`roundingIncrement must be at least 1 and at most 1e9, not ${increment}`);\r\n  }\r\n  return integerIncrement;\r\n}\r\nexport function ValidateTemporalRoundingIncrement(increment: number, dividend: number, inclusive: boolean) {\r\n  const maximum = inclusive ? dividend : dividend - 1;\r\n  if (increment > maximum) {\r\n    throw new RangeError(`roundingIncrement must be at least 1 and less than ${maximum}, not ${increment}`);\r\n  }\r\n  if (dividend % increment !== 0) {\r\n    throw new RangeError(`Rounding increment must divide evenly into ${dividend}`);\r\n  }\r\n}\r\n\r\nexport function GetTemporalFractionalSecondDigitsOption(\r\n  normalizedOptions: Temporal.ToStringPrecisionOptions\r\n): Temporal.ToStringPrecisionOptions['fractionalSecondDigits'] {\r\n  const digitsValue = normalizedOptions.fractionalSecondDigits;\r\n  if (digitsValue === undefined) return 'auto';\r\n  if (typeof digitsValue !== 'number') {\r\n    if (ToString(digitsValue) !== 'auto') {\r\n      throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${digitsValue}`);\r\n    }\r\n    return 'auto';\r\n  }\r\n  const digitCount = Math.floor(digitsValue);\r\n  if (!Number.isFinite(digitCount) || digitCount < 0 || digitCount > 9) {\r\n    throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${digitsValue}`);\r\n  }\r\n  return digitCount as Exclude<Temporal.ToStringPrecisionOptions['fractionalSecondDigits'], 'auto'>;\r\n}\r\n\r\ninterface SecondsStringPrecisionRecord {\r\n  precision: Temporal.ToStringPrecisionOptions['fractionalSecondDigits'] | 'minute';\r\n  unit: UnitSmallerThanOrEqualTo<'minute'>;\r\n  increment: number;\r\n}\r\n\r\nexport function ToSecondsStringPrecisionRecord(\r\n  smallestUnit: Temporal.ToStringPrecisionOptions['smallestUnit'],\r\n  precision: Temporal.ToStringPrecisionOptions['fractionalSecondDigits']\r\n): SecondsStringPrecisionRecord {\r\n  switch (smallestUnit) {\r\n    case 'minute':\r\n      return { precision: 'minute', unit: 'minute', increment: 1 };\r\n    case 'second':\r\n      return { precision: 0, unit: 'second', increment: 1 };\r\n    case 'millisecond':\r\n      return { precision: 3, unit: 'millisecond', increment: 1 };\r\n    case 'microsecond':\r\n      return { precision: 6, unit: 'microsecond', increment: 1 };\r\n    case 'nanosecond':\r\n      return { precision: 9, unit: 'nanosecond', increment: 1 };\r\n    default: // fall through if option not given\r\n  }\r\n  switch (precision) {\r\n    case 'auto':\r\n      return { precision, unit: 'nanosecond', increment: 1 };\r\n    case 0:\r\n      return { precision, unit: 'second', increment: 1 };\r\n    case 1:\r\n    case 2:\r\n    case 3:\r\n      return { precision, unit: 'millisecond', increment: 10 ** (3 - precision) };\r\n    case 4:\r\n    case 5:\r\n    case 6:\r\n      return { precision, unit: 'microsecond', increment: 10 ** (6 - precision) };\r\n    case 7:\r\n    case 8:\r\n    case 9:\r\n      return { precision, unit: 'nanosecond', increment: 10 ** (9 - precision) };\r\n    default:\r\n      throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${precision}`);\r\n  }\r\n}\r\n\r\nexport const REQUIRED = Symbol('~required~');\r\n\r\ninterface TemporalUnitOptionsBag {\r\n  smallestUnit?: Temporal.PluralUnit<Temporal.DateTimeUnit> | Temporal.DateTimeUnit;\r\n  largestUnit?: Temporal.PluralUnit<Temporal.DateTimeUnit> | Temporal.DateTimeUnit | 'auto';\r\n  unit?: Temporal.PluralUnit<Temporal.DateTimeUnit> | Temporal.DateTimeUnit;\r\n}\r\ntype UnitTypeMapping = {\r\n  date: Temporal.DateUnit;\r\n  time: Temporal.TimeUnit;\r\n  datetime: Temporal.DateTimeUnit;\r\n};\r\n// This type specifies the allowed defaults for each unit key type.\r\ntype AllowedGetTemporalUnitDefaultValues = {\r\n  smallestUnit: undefined;\r\n  largestUnit: 'auto' | undefined;\r\n  unit: undefined;\r\n};\r\n\r\nexport function GetTemporalUnitValuedOption<\r\n  U extends keyof TemporalUnitOptionsBag,\r\n  T extends keyof UnitTypeMapping,\r\n  D extends typeof REQUIRED | UnitTypeMapping[T] | AllowedGetTemporalUnitDefaultValues[U],\r\n  R extends Exclude<D, typeof REQUIRED> | UnitTypeMapping[T]\r\n>(options: TemporalUnitOptionsBag, key: U, unitGroup: T, requiredOrDefault: D): R;\r\nexport function GetTemporalUnitValuedOption<\r\n  U extends keyof TemporalUnitOptionsBag,\r\n  T extends keyof UnitTypeMapping,\r\n  D extends typeof REQUIRED | UnitTypeMapping[T] | AllowedGetTemporalUnitDefaultValues[U],\r\n  E extends 'auto' | Temporal.DateTimeUnit,\r\n  R extends UnitTypeMapping[T] | Exclude<D, typeof REQUIRED> | E\r\n>(options: TemporalUnitOptionsBag, key: U, unitGroup: T, requiredOrDefault: D, extraValues: ReadonlyArray<E>): R;\r\n// This signature of the function is NOT used in type-checking, so restricting\r\n// the default value via generic binding like the other overloads isn't\r\n// necessary.\r\nexport function GetTemporalUnitValuedOption<\r\n  T extends keyof UnitTypeMapping,\r\n  D extends typeof REQUIRED | UnitTypeMapping[T] | 'auto' | undefined,\r\n  E extends 'auto' | Temporal.DateTimeUnit,\r\n  R extends UnitTypeMapping[T] | Exclude<D, typeof REQUIRED> | E\r\n>(\r\n  options: TemporalUnitOptionsBag,\r\n  key: keyof typeof options,\r\n  unitGroup: T,\r\n  requiredOrDefault: D,\r\n  extraValues: ReadonlyArray<E> | never[] = []\r\n): R {\r\n  let allowedSingular: Array<Temporal.DateTimeUnit | 'auto'> = [];\r\n  for (let index = 0; index < TEMPORAL_UNITS.length; index++) {\r\n    const unitInfo = TEMPORAL_UNITS[index];\r\n    const singular = unitInfo[1];\r\n    const category = unitInfo[2];\r\n    if (unitGroup === 'datetime' || unitGroup === category) {\r\n      allowedSingular.push(singular);\r\n    }\r\n  }\r\n  allowedSingular = allowedSingular.concat(extraValues);\r\n  let defaultVal: typeof REQUIRED | Temporal.DateTimeUnit | 'auto' | undefined = requiredOrDefault;\r\n  if (defaultVal === REQUIRED) {\r\n    defaultVal = undefined;\r\n  } else if (defaultVal !== undefined) {\r\n    allowedSingular.push(defaultVal);\r\n  }\r\n  let allowedValues: Array<Temporal.DateTimeUnit | Temporal.PluralUnit<Temporal.DateTimeUnit> | 'auto'> = [];\r\n  allowedValues = allowedValues.concat(allowedSingular);\r\n  for (let index = 0; index < allowedSingular.length; index++) {\r\n    const singular = allowedSingular[index];\r\n    const plural = PLURAL_FOR[singular];\r\n    if (plural !== undefined) allowedValues.push(plural);\r\n  }\r\n  let retval = GetOption(options, key, allowedValues, defaultVal);\r\n  if (retval === undefined && requiredOrDefault === REQUIRED) {\r\n    throw new RangeError(`${key} is required`);\r\n  }\r\n  // Coerce any plural units into their singular form\r\n  return (retval && retval in SINGULAR_FOR ? SINGULAR_FOR[retval] : retval) as R;\r\n}\r\n\r\nexport function GetTemporalRelativeToOption(options: {\r\n  relativeTo?:\r\n    | Temporal.ZonedDateTime\r\n    | Temporal.PlainDateTime\r\n    | Temporal.ZonedDateTimeLike\r\n    | Temporal.PlainDateTimeLike\r\n    | string\r\n    | undefined;\r\n}):\r\n  | { zonedRelativeTo?: Temporal.ZonedDateTime; plainRelativeTo?: never }\r\n  | { plainRelativeTo?: Temporal.PlainDate; zonedRelativeTo?: never } {\r\n  const relativeTo = options.relativeTo;\r\n  if (relativeTo === undefined) return {};\r\n\r\n  let offsetBehaviour: OffsetBehaviour = 'option';\r\n  let matchMinutes = false;\r\n  let isoDate, time, calendar, timeZone, offset;\r\n  if (IsObject(relativeTo)) {\r\n    if (IsTemporalZonedDateTime(relativeTo)) {\r\n      return { zonedRelativeTo: relativeTo };\r\n    }\r\n    if (IsTemporalDate(relativeTo)) return { plainRelativeTo: relativeTo };\r\n    if (IsTemporalDateTime(relativeTo)) {\r\n      return {\r\n        plainRelativeTo: CreateTemporalDate(GetSlot(relativeTo, ISO_DATE_TIME).isoDate, GetSlot(relativeTo, CALENDAR))\r\n      };\r\n    }\r\n    calendar = GetTemporalCalendarIdentifierWithISODefault(relativeTo);\r\n    const fields = PrepareCalendarFields(\r\n      calendar,\r\n      relativeTo,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'offset', 'timeZone'],\r\n      []\r\n    );\r\n    ({ isoDate, time } = InterpretTemporalDateTimeFields(calendar, fields, 'constrain'));\r\n    ({ offset, timeZone } = fields);\r\n    if (offset === undefined) offsetBehaviour = 'wall';\r\n  } else {\r\n    let tzAnnotation, z, year, month, day;\r\n    ({ year, month, day, time, calendar, tzAnnotation, offset, z } = ParseISODateTime(RequireString(relativeTo)));\r\n    if (tzAnnotation) {\r\n      timeZone = ToTemporalTimeZoneIdentifier(tzAnnotation);\r\n      if (z) {\r\n        offsetBehaviour = 'exact';\r\n      } else if (!offset) {\r\n        offsetBehaviour = 'wall';\r\n      }\r\n      matchMinutes = true;\r\n    } else if (z) {\r\n      throw new RangeError(\r\n        'Z designator not supported for PlainDate relativeTo; either remove the Z or add a bracketed time zone'\r\n      );\r\n    }\r\n    if (!calendar) calendar = 'iso8601';\r\n    calendar = CanonicalizeCalendar(calendar);\r\n    isoDate = { year, month, day };\r\n  }\r\n  if (timeZone === undefined) {\r\n    return { plainRelativeTo: CreateTemporalDate(isoDate, calendar) };\r\n  }\r\n  const offsetNs = offsetBehaviour === 'option' ? ParseDateTimeUTCOffset(castExists(offset)) : 0;\r\n  const epochNanoseconds = InterpretISODateTimeOffset(\r\n    isoDate,\r\n    time,\r\n    offsetBehaviour,\r\n    offsetNs,\r\n    timeZone,\r\n    'compatible',\r\n    'reject',\r\n    matchMinutes\r\n  );\r\n  return { zonedRelativeTo: CreateTemporalZonedDateTime(epochNanoseconds, timeZone, calendar) };\r\n}\r\n\r\nexport function DefaultTemporalLargestUnit(duration: Temporal.Duration) {\r\n  if (GetSlot(duration, YEARS) !== 0) return 'year';\r\n  if (GetSlot(duration, MONTHS) !== 0) return 'month';\r\n  if (GetSlot(duration, WEEKS) !== 0) return 'week';\r\n  if (GetSlot(duration, DAYS) !== 0) return 'day';\r\n  if (GetSlot(duration, HOURS) !== 0) return 'hour';\r\n  if (GetSlot(duration, MINUTES) !== 0) return 'minute';\r\n  if (GetSlot(duration, SECONDS) !== 0) return 'second';\r\n  if (GetSlot(duration, MILLISECONDS) !== 0) return 'millisecond';\r\n  if (GetSlot(duration, MICROSECONDS) !== 0) return 'microsecond';\r\n  return 'nanosecond';\r\n}\r\n\r\nexport function LargerOfTwoTemporalUnits<T1 extends Temporal.DateTimeUnit, T2 extends Temporal.DateTimeUnit>(\r\n  unit1: T1,\r\n  unit2: T2\r\n) {\r\n  const i1 = UNITS_DESCENDING.indexOf(unit1);\r\n  const i2 = UNITS_DESCENDING.indexOf(unit2);\r\n  if (i1 > i2) {\r\n    return unit2;\r\n  }\r\n  return unit1;\r\n}\r\n\r\nexport function IsCalendarUnit(unit: Temporal.DateTimeUnit): unit is Exclude<Temporal.DateUnit, 'day'> {\r\n  return unit === 'year' || unit === 'month' || unit === 'week';\r\n}\r\n\r\nexport function TemporalUnitCategory(unit: Temporal.DateTimeUnit) {\r\n  if (IsCalendarUnit(unit) || unit === 'day') return 'date';\r\n  return 'time';\r\n}\r\n\r\nfunction calendarImplForID(calendar: BuiltinCalendarId) {\r\n  return GetIntrinsic('%calendarImpl%')(calendar);\r\n}\r\n\r\nexport function calendarImplForObj(\r\n  temporalObj:\r\n    | Temporal.PlainDate\r\n    | Temporal.PlainDateTime\r\n    | Temporal.PlainMonthDay\r\n    | Temporal.PlainYearMonth\r\n    | Temporal.ZonedDateTime\r\n) {\r\n  return GetIntrinsic('%calendarImpl%')(GetSlot(temporalObj, CALENDAR));\r\n}\r\n\r\ntype ISODateToFieldsReturn<Type extends ISODateToFieldsType> = Resolve<{\r\n  year: Type extends 'date' | 'year-month' ? number : never;\r\n  monthCode: string;\r\n  day: Type extends 'date' | 'month-day' ? number : never;\r\n}>;\r\n\r\nexport function ISODateToFields(calendar: BuiltinCalendarId, isoDate: ISODate): ISODateToFieldsReturn<'date'>;\r\nexport function ISODateToFields<T extends ISODateToFieldsType>(\r\n  calendar: BuiltinCalendarId,\r\n  isoDate: ISODate,\r\n  type: T\r\n): ISODateToFieldsReturn<T>;\r\nexport function ISODateToFields(calendar: BuiltinCalendarId, isoDate: ISODate, type = 'date') {\r\n  const fields = Object.create(null);\r\n  const calendarImpl = calendarImplForID(calendar);\r\n  const calendarDate = calendarImpl.isoToDate(isoDate, { year: true, monthCode: true, day: true });\r\n\r\n  fields.monthCode = calendarDate.monthCode;\r\n  if (type === 'month-day' || type === 'date') {\r\n    fields.day = calendarDate.day;\r\n  }\r\n  if (type === 'year-month' || type === 'date') {\r\n    fields.year = calendarDate.year;\r\n  }\r\n  return fields;\r\n}\r\n\r\ntype Prop<T, K> = T extends unknown ? (K extends keyof T ? T[K] : undefined) : 'ThisShouldNeverHappen';\r\n\r\ntype FieldObjectWithRequired<FieldKeys extends FieldKey> = Resolve<\r\n  // The resulting object type contains:\r\n  // - All keys in FieldKeys, which are required properties and their values\r\n  //   don't include undefined.\r\n  // - All the other keys in CalendarFieldsRecord that aren't in FieldKeys,\r\n  //   which are optional properties and their value types explicitly include\r\n  //   undefined.\r\n  {\r\n    -readonly [k in FieldKeys]: Exclude<Prop<CalendarFieldsRecord, k>, undefined>;\r\n  } & {\r\n    -readonly [k in Exclude<Keys<CalendarFieldsRecord>, FieldKeys>]?: Prop<CalendarFieldsRecord, k> | undefined;\r\n  }\r\n>;\r\n\r\ntype PrepareCalendarFieldsReturn<\r\n  FieldKeys extends FieldKey,\r\n  RequiredFieldsOpt extends ReadonlyArray<FieldKey> | 'partial'\r\n> = RequiredFieldsOpt extends 'partial' ? Partial<CalendarFieldsRecord> : FieldObjectWithRequired<FieldKeys>;\r\n\r\nexport function PrepareCalendarFields<\r\n  FieldKeys extends FieldKey,\r\n  RequiredFields extends ReadonlyArray<FieldKey> | 'partial'\r\n>(\r\n  calendar: BuiltinCalendarId,\r\n  bag: Partial<Record<FieldKeys, unknown>>,\r\n  calendarFieldNames: Array<FieldKeys>,\r\n  nonCalendarFieldNames: Array<FieldKeys>,\r\n  requiredFields: RequiredFields\r\n): PrepareCalendarFieldsReturn<FieldKeys, RequiredFields> {\r\n  const extraFieldNames = calendarImplForID(calendar).extraFields(calendarFieldNames) as FieldKeys[];\r\n  const fields = calendarFieldNames.concat(nonCalendarFieldNames, extraFieldNames);\r\n  const result: Partial<Record<AnyTemporalKey, unknown>> = Object.create(null);\r\n  let any = false;\r\n  fields.sort();\r\n  for (let index = 0; index < fields.length; index++) {\r\n    const property = fields[index];\r\n    const value = bag[property];\r\n    if (value !== undefined) {\r\n      any = true;\r\n      result[property] = castExists(BUILTIN_CASTS[property])(value);\r\n    } else if (requiredFields !== 'partial') {\r\n      if (requiredFields.includes(property)) {\r\n        throw new TypeError(`required property '${property}' missing or undefined`);\r\n      }\r\n      result[property] = BUILTIN_DEFAULTS[property];\r\n    }\r\n  }\r\n  if (requiredFields === 'partial' && !any) {\r\n    throw new TypeError('no supported properties found');\r\n  }\r\n  return result as unknown as PrepareCalendarFieldsReturn<FieldKeys, RequiredFields>;\r\n}\r\n\r\ntype FieldCompleteness = 'complete' | 'partial';\r\n\r\nexport function ToTemporalTimeRecord(bag: Partial<Record<keyof TimeRecord, string | number>>): TimeRecord;\r\nexport function ToTemporalTimeRecord(\r\n  bag: Partial<Record<keyof TimeRecord, string | number | undefined>>,\r\n  completeness: 'partial'\r\n): Partial<TimeRecord>;\r\nexport function ToTemporalTimeRecord(\r\n  bag: Partial<Record<keyof TimeRecord, string | number>>,\r\n  completeness: 'complete'\r\n): TimeRecord;\r\nexport function ToTemporalTimeRecord(\r\n  bag: Partial<Record<keyof TimeRecord, string | number | undefined>>,\r\n  completeness: FieldCompleteness = 'complete'\r\n): Partial<TimeRecord> {\r\n  // NOTE: Field order is sorted to make the sort in PrepareTemporalFields more efficient.\r\n  const fields: (keyof TimeRecord)[] = ['hour', 'microsecond', 'millisecond', 'minute', 'nanosecond', 'second'];\r\n  let any = false;\r\n  const result: Partial<TimeRecord> = Object.create(null);\r\n  for (let index = 0; index < fields.length; index++) {\r\n    const field = fields[index];\r\n    const value = bag[field];\r\n    if (value !== undefined) {\r\n      result[field] = ToIntegerWithTruncation(value);\r\n      any = true;\r\n    } else if (completeness === 'complete') {\r\n      result[field] = 0;\r\n    }\r\n  }\r\n  if (!any) throw new TypeError('invalid time-like');\r\n  return result;\r\n}\r\n\r\nexport function ToTemporalDate(\r\n  item: PlainDateParams['from'][0],\r\n  options?: PlainDateParams['from'][1]\r\n): Temporal.PlainDate {\r\n  if (IsObject(item)) {\r\n    if (IsTemporalDate(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalDate(GetSlot(item, ISO_DATE), GetSlot(item, CALENDAR));\r\n    }\r\n    if (IsTemporalZonedDateTime(item)) {\r\n      const isoDateTime = GetISODateTimeFor(GetSlot(item, TIME_ZONE), GetSlot(item, EPOCHNANOSECONDS));\r\n      GetTemporalOverflowOption(GetOptionsObject(options)); // validate and ignore\r\n      const isoDate = isoDateTime.isoDate;\r\n      return CreateTemporalDate(isoDate, GetSlot(item, CALENDAR));\r\n    }\r\n    if (IsTemporalDateTime(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options)); // validate and ignore\r\n      return CreateTemporalDate(GetSlot(item, ISO_DATE_TIME).isoDate, GetSlot(item, CALENDAR));\r\n    }\r\n    const calendar = GetTemporalCalendarIdentifierWithISODefault(item);\r\n    const fields = PrepareCalendarFields(calendar, item, ['year', 'month', 'monthCode', 'day'], [], []);\r\n    const overflow = GetTemporalOverflowOption(GetOptionsObject(options));\r\n    const isoDate = CalendarDateFromFields(calendar, fields, overflow);\r\n    return CreateTemporalDate(isoDate, calendar);\r\n  }\r\n  let { year, month, day, calendar, z } = ParseTemporalDateString(RequireString(item));\r\n  if (z) throw new RangeError('Z designator not supported for PlainDate');\r\n  if (!calendar) calendar = 'iso8601';\r\n  calendar = CanonicalizeCalendar(calendar);\r\n  uncheckedAssertNarrowedType<BuiltinCalendarId>(calendar, 'lowercased and canonicalized');\r\n  GetTemporalOverflowOption(GetOptionsObject(options)); // validate and ignore\r\n  return CreateTemporalDate({ year, month, day }, calendar);\r\n}\r\n\r\nexport function InterpretTemporalDateTimeFields(\r\n  calendar: BuiltinCalendarId,\r\n  fields: CalendarFieldsRecord & TimeRecord,\r\n  overflow: Overflow\r\n) {\r\n  const isoDate = CalendarDateFromFields(calendar, fields, overflow);\r\n  const time = RegulateTime(\r\n    fields.hour,\r\n    fields.minute,\r\n    fields.second,\r\n    fields.millisecond,\r\n    fields.microsecond,\r\n    fields.nanosecond,\r\n    overflow\r\n  );\r\n  return CombineISODateAndTimeRecord(isoDate, time);\r\n}\r\n\r\nexport function ToTemporalDateTime(item: PlainDateTimeParams['from'][0], options?: PlainDateTimeParams['from'][1]) {\r\n  let isoDate, time, calendar;\r\n\r\n  if (IsObject(item)) {\r\n    if (IsTemporalDateTime(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalDateTime(GetSlot(item, ISO_DATE_TIME), GetSlot(item, CALENDAR));\r\n    }\r\n    if (IsTemporalZonedDateTime(item)) {\r\n      const isoDateTime = GetISODateTimeFor(GetSlot(item, TIME_ZONE), GetSlot(item, EPOCHNANOSECONDS));\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalDateTime(isoDateTime, GetSlot(item, CALENDAR));\r\n    }\r\n    if (IsTemporalDate(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalDateTime(\r\n        CombineISODateAndTimeRecord(GetSlot(item, ISO_DATE), MidnightTimeRecord()),\r\n        GetSlot(item, CALENDAR)\r\n      );\r\n    }\r\n\r\n    calendar = GetTemporalCalendarIdentifierWithISODefault(item);\r\n    const fields = PrepareCalendarFields(\r\n      calendar,\r\n      item,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\r\n      []\r\n    );\r\n    const overflow = GetTemporalOverflowOption(GetOptionsObject(options));\r\n    ({ isoDate, time } = InterpretTemporalDateTimeFields(calendar, fields, overflow));\r\n  } else {\r\n    let z, year, month, day;\r\n    ({ year, month, day, time, calendar, z } = ParseTemporalDateTimeString(RequireString(item)));\r\n    if (z) throw new RangeError('Z designator not supported for PlainDateTime');\r\n    if (time === 'start-of-day') time = MidnightTimeRecord();\r\n    RejectDateTime(\r\n      year,\r\n      month,\r\n      day,\r\n      time.hour,\r\n      time.minute,\r\n      time.second,\r\n      time.millisecond,\r\n      time.microsecond,\r\n      time.nanosecond\r\n    );\r\n    if (!calendar) calendar = 'iso8601';\r\n    calendar = CanonicalizeCalendar(calendar);\r\n    GetTemporalOverflowOption(GetOptionsObject(options));\r\n    isoDate = { year, month, day };\r\n  }\r\n  const isoDateTime = CombineISODateAndTimeRecord(isoDate, time);\r\n  return CreateTemporalDateTime(isoDateTime, calendar);\r\n}\r\n\r\nexport function ToTemporalDuration(item: DurationParams['from'][0]) {\r\n  const TemporalDuration = GetIntrinsic('%Temporal.Duration%');\r\n  if (IsTemporalDuration(item)) {\r\n    return new TemporalDuration(\r\n      GetSlot(item, YEARS),\r\n      GetSlot(item, MONTHS),\r\n      GetSlot(item, WEEKS),\r\n      GetSlot(item, DAYS),\r\n      GetSlot(item, HOURS),\r\n      GetSlot(item, MINUTES),\r\n      GetSlot(item, SECONDS),\r\n      GetSlot(item, MILLISECONDS),\r\n      GetSlot(item, MICROSECONDS),\r\n      GetSlot(item, NANOSECONDS)\r\n    );\r\n  }\r\n  if (!IsObject(item)) {\r\n    return ParseTemporalDurationString(RequireString(item));\r\n  }\r\n  const result = {\r\n    years: 0,\r\n    months: 0,\r\n    weeks: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    milliseconds: 0,\r\n    microseconds: 0,\r\n    nanoseconds: 0\r\n  };\r\n  let partial = ToTemporalPartialDurationRecord(item);\r\n  for (let index = 0; index < DURATION_FIELDS.length; index++) {\r\n    const property = DURATION_FIELDS[index];\r\n    const value = partial[property];\r\n    if (value !== undefined) {\r\n      result[property] = value;\r\n    }\r\n  }\r\n  return new TemporalDuration(\r\n    result.years,\r\n    result.months,\r\n    result.weeks,\r\n    result.days,\r\n    result.hours,\r\n    result.minutes,\r\n    result.seconds,\r\n    result.milliseconds,\r\n    result.microseconds,\r\n    result.nanoseconds\r\n  );\r\n}\r\n\r\nexport function ToTemporalInstant(itemParam: InstantParams['from'][0]) {\r\n  let item: string | number;\r\n  if (IsObject(itemParam)) {\r\n    if (IsTemporalInstant(itemParam) || IsTemporalZonedDateTime(itemParam)) {\r\n      return CreateTemporalInstant(GetSlot(itemParam, EPOCHNANOSECONDS));\r\n    }\r\n    item = ToPrimitive(itemParam, String);\r\n  } else {\r\n    item = itemParam;\r\n  }\r\n  const { year, month, day, time, offset, z } = ParseTemporalInstantString(RequireString(item));\r\n  const {\r\n    hour = 0,\r\n    minute = 0,\r\n    second = 0,\r\n    millisecond = 0,\r\n    microsecond = 0,\r\n    nanosecond = 0\r\n  } = time === 'start-of-day' ? {} : time;\r\n\r\n  // ParseTemporalInstantString ensures that either `z` is true or or `offset` is non-undefined\r\n  const offsetNanoseconds = z ? 0 : ParseDateTimeUTCOffset(castExists(offset));\r\n  const balanced = BalanceISODateTime(\r\n    year,\r\n    month,\r\n    day,\r\n    hour,\r\n    minute,\r\n    second,\r\n    millisecond,\r\n    microsecond,\r\n    nanosecond - offsetNanoseconds\r\n  );\r\n  CheckISODaysRange(balanced.isoDate);\r\n  const epochNanoseconds = GetUTCEpochNanoseconds(balanced);\r\n  return CreateTemporalInstant(epochNanoseconds);\r\n}\r\n\r\nexport function ToTemporalMonthDay(item: PlainMonthDayParams['from'][0], options?: PlainMonthDayParams['from'][1]) {\r\n  if (IsObject(item)) {\r\n    if (IsTemporalMonthDay(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalMonthDay(GetSlot(item, ISO_DATE), GetSlot(item, CALENDAR));\r\n    }\r\n    let calendar;\r\n    if (HasSlot(item, CALENDAR)) {\r\n      calendar = GetSlot(item, CALENDAR);\r\n    } else {\r\n      calendar = item.calendar;\r\n      if (calendar === undefined) calendar = 'iso8601';\r\n      calendar = ToTemporalCalendarIdentifier(calendar);\r\n    }\r\n    const fields = PrepareCalendarFields(calendar, item, ['year', 'month', 'monthCode', 'day'], [], []);\r\n    const overflow = GetTemporalOverflowOption(GetOptionsObject(options));\r\n    const isoDate = CalendarMonthDayFromFields(calendar, fields, overflow);\r\n    return CreateTemporalMonthDay(isoDate, calendar);\r\n  }\r\n\r\n  let { month, day, referenceISOYear, calendar } = ParseTemporalMonthDayString(RequireString(item));\r\n  if (calendar === undefined) calendar = 'iso8601';\r\n  calendar = CanonicalizeCalendar(calendar);\r\n  uncheckedAssertNarrowedType<BuiltinCalendarId>(calendar, 'lowercased and canonicalized');\r\n\r\n  GetTemporalOverflowOption(GetOptionsObject(options));\r\n  if (calendar === 'iso8601') {\r\n    const isoCalendarReferenceYear = 1972; // First leap year after Unix epoch\r\n    return CreateTemporalMonthDay({ year: isoCalendarReferenceYear, month, day }, calendar);\r\n  }\r\n  assertExists(referenceISOYear);\r\n  let isoDate = { year: referenceISOYear, month, day };\r\n  RejectDateRange(isoDate);\r\n  const result = ISODateToFields(calendar, isoDate, 'month-day');\r\n  isoDate = CalendarMonthDayFromFields(calendar, result, 'constrain');\r\n  return CreateTemporalMonthDay(isoDate, calendar);\r\n}\r\n\r\nexport function ToTemporalTime(item: PlainTimeParams['from'][0], options?: PlainTimeParams['from'][1]) {\r\n  let time;\r\n  if (IsObject(item)) {\r\n    if (IsTemporalTime(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalTime(GetSlot(item, TIME));\r\n    }\r\n    if (IsTemporalDateTime(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalTime(GetSlot(item, ISO_DATE_TIME).time);\r\n    }\r\n    if (IsTemporalZonedDateTime(item)) {\r\n      const isoDateTime = GetISODateTimeFor(GetSlot(item, TIME_ZONE), GetSlot(item, EPOCHNANOSECONDS));\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalTime(isoDateTime.time);\r\n    }\r\n    const { hour, minute, second, millisecond, microsecond, nanosecond } = ToTemporalTimeRecord(item);\r\n    const overflow = GetTemporalOverflowOption(GetOptionsObject(options));\r\n    time = RegulateTime(hour, minute, second, millisecond, microsecond, nanosecond, overflow);\r\n  } else {\r\n    time = ParseTemporalTimeString(RequireString(item));\r\n    GetTemporalOverflowOption(GetOptionsObject(options));\r\n  }\r\n  return CreateTemporalTime(time);\r\n}\r\n\r\nexport function ToTimeRecordOrMidnight(item: PlainTimeParams['from'][0] | undefined) {\r\n  if (item === undefined) return MidnightTimeRecord();\r\n  return GetSlot(ToTemporalTime(item), TIME);\r\n}\r\n\r\nexport function ToTemporalYearMonth(\r\n  item: PlainYearMonthParams['from'][0],\r\n  options?: PlainYearMonthParams['from'][1]\r\n): Temporal.PlainYearMonth {\r\n  if (IsObject(item)) {\r\n    if (IsTemporalYearMonth(item)) {\r\n      GetTemporalOverflowOption(GetOptionsObject(options));\r\n      return CreateTemporalYearMonth(GetSlot(item, ISO_DATE), GetSlot(item, CALENDAR));\r\n    }\r\n    const calendar = GetTemporalCalendarIdentifierWithISODefault(item);\r\n    const fields = PrepareCalendarFields(calendar, item, ['year', 'month', 'monthCode'], [], []);\r\n    const overflow = GetTemporalOverflowOption(GetOptionsObject(options));\r\n    const isoDate = CalendarYearMonthFromFields(calendar, fields, overflow);\r\n    return CreateTemporalYearMonth(isoDate, calendar);\r\n  }\r\n\r\n  let { year, month, referenceISODay, calendar } = ParseTemporalYearMonthString(RequireString(item));\r\n  if (calendar === undefined) calendar = 'iso8601';\r\n  calendar = CanonicalizeCalendar(calendar);\r\n  uncheckedAssertNarrowedType<BuiltinCalendarId>(calendar, 'lowercased and canonicalized');\r\n\r\n  GetTemporalOverflowOption(GetOptionsObject(options));\r\n  let isoDate = { year, month, day: referenceISODay };\r\n  RejectYearMonthRange(isoDate);\r\n  const result = ISODateToFields(calendar, isoDate, 'year-month');\r\n  isoDate = CalendarYearMonthFromFields(calendar, result, 'constrain');\r\n  return CreateTemporalYearMonth(isoDate, calendar);\r\n}\r\n\r\ntype OffsetBehaviour = 'wall' | 'exact' | 'option';\r\n\r\nexport function InterpretISODateTimeOffset(\r\n  isoDate: ISODate,\r\n  time: 'start-of-day' | TimeRecord,\r\n  offsetBehaviour: OffsetBehaviour,\r\n  offsetNs: number,\r\n  timeZone: string,\r\n  disambiguation: NonNullable<Temporal.ToInstantOptions['disambiguation']>,\r\n  offsetOpt: Temporal.OffsetDisambiguationOptions['offset'],\r\n  matchMinute: boolean\r\n) {\r\n  // start-of-day signifies that we had a string such as YYYY-MM-DD[Zone]. It is\r\n  // grammatically not possible to specify a UTC offset in that string, so the\r\n  // behaviour collapses into ~WALL~, which is equivalent to offset: \"ignore\".\r\n  if (time === 'start-of-day') {\r\n    assert(offsetBehaviour === 'wall', 'offset cannot be provided in YYYY-MM-DD[Zone] string');\r\n    assert(offsetNs === 0, 'offset cannot be provided in YYYY-MM-DD[Zone] string');\r\n    return GetStartOfDay(timeZone, isoDate);\r\n  }\r\n\r\n  const dt = CombineISODateAndTimeRecord(isoDate, time);\r\n\r\n  if (offsetBehaviour === 'wall' || offsetOpt === 'ignore') {\r\n    // Simple case: ISO string without a TZ offset (or caller wants to ignore\r\n    // the offset), so just convert DateTime to Instant in the given time zone\r\n    return GetEpochNanosecondsFor(timeZone, dt, disambiguation);\r\n  }\r\n\r\n  // The caller wants the offset to always win ('use') OR the caller is OK\r\n  // with the offset winning ('prefer' or 'reject') as long as it's valid\r\n  // for this timezone and date/time.\r\n  if (offsetBehaviour === 'exact' || offsetOpt === 'use') {\r\n    // Calculate the instant for the input's date/time and offset\r\n    const balanced = BalanceISODateTime(\r\n      isoDate.year,\r\n      isoDate.month,\r\n      isoDate.day,\r\n      time.hour,\r\n      time.minute,\r\n      time.second,\r\n      time.millisecond,\r\n      time.microsecond,\r\n      time.nanosecond - offsetNs\r\n    );\r\n    CheckISODaysRange(balanced.isoDate);\r\n    const epochNs = GetUTCEpochNanoseconds(balanced);\r\n    ValidateEpochNanoseconds(epochNs);\r\n    return epochNs;\r\n  }\r\n\r\n  CheckISODaysRange(isoDate);\r\n  const utcEpochNs = GetUTCEpochNanoseconds(dt);\r\n\r\n  // \"prefer\" or \"reject\"\r\n  const possibleEpochNs = GetPossibleEpochNanoseconds(timeZone, dt);\r\n  for (let index = 0; index < possibleEpochNs.length; index++) {\r\n    const candidate = possibleEpochNs[index];\r\n    const candidateOffset = ToNumber(utcEpochNs - candidate);\r\n    const roundedCandidateOffset = RoundNumberToIncrement(candidateOffset, 60e9, 'halfExpand');\r\n    if (candidateOffset === offsetNs || (matchMinute && roundedCandidateOffset === offsetNs)) {\r\n      return candidate;\r\n    }\r\n  }\r\n\r\n  // the user-provided offset doesn't match any instants for this time\r\n  // zone and date/time.\r\n  if (offsetOpt === 'reject') {\r\n    const offsetStr = FormatUTCOffsetNanoseconds(BigInt(offsetNs));\r\n    const dtStr = ISODateTimeToString(dt, 'iso8601', 'auto');\r\n    throw new RangeError(`Offset ${offsetStr} is invalid for ${dtStr} in ${timeZone}`);\r\n  }\r\n  // fall through: offsetOpt === 'prefer', but the offset doesn't match\r\n  // so fall back to use the time zone instead.\r\n  return DisambiguatePossibleEpochNanoseconds(possibleEpochNs, timeZone, dt, disambiguation);\r\n}\r\n\r\nexport function ToTemporalZonedDateTime(\r\n  item: ZonedDateTimeParams['from'][0],\r\n  options?: ZonedDateTimeParams['from'][1]\r\n) {\r\n  let isoDate, time, timeZone, offset, calendar;\r\n  let matchMinute = false;\r\n  let offsetBehaviour: OffsetBehaviour = 'option';\r\n  let disambiguation, offsetOpt;\r\n  if (IsObject(item)) {\r\n    if (IsTemporalZonedDateTime(item)) {\r\n      const resolvedOptions = GetOptionsObject(options);\r\n      GetTemporalDisambiguationOption(resolvedOptions); // validate and ignore\r\n      GetTemporalOffsetOption(resolvedOptions, 'reject');\r\n      GetTemporalOverflowOption(resolvedOptions);\r\n      return CreateTemporalZonedDateTime(\r\n        GetSlot(item, EPOCHNANOSECONDS),\r\n        GetSlot(item, TIME_ZONE),\r\n        GetSlot(item, CALENDAR)\r\n      );\r\n    }\r\n    calendar = GetTemporalCalendarIdentifierWithISODefault(item);\r\n    const fields = PrepareCalendarFields(\r\n      calendar,\r\n      item,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'offset', 'timeZone'],\r\n      ['timeZone']\r\n    );\r\n    ({ offset, timeZone } = fields);\r\n    if (offset === undefined) {\r\n      offsetBehaviour = 'wall';\r\n    }\r\n    const resolvedOptions = GetOptionsObject(options);\r\n    disambiguation = GetTemporalDisambiguationOption(resolvedOptions);\r\n    offsetOpt = GetTemporalOffsetOption(resolvedOptions, 'reject');\r\n    const overflow = GetTemporalOverflowOption(resolvedOptions);\r\n    ({ isoDate, time } = InterpretTemporalDateTimeFields(calendar, fields, overflow));\r\n  } else {\r\n    let tzAnnotation, z, year, month, day;\r\n    ({ year, month, day, time, tzAnnotation, offset, z, calendar } = ParseTemporalZonedDateTimeString(\r\n      RequireString(item)\r\n    ));\r\n    timeZone = ToTemporalTimeZoneIdentifier(tzAnnotation);\r\n    if (z) {\r\n      offsetBehaviour = 'exact';\r\n    } else if (!offset) {\r\n      offsetBehaviour = 'wall';\r\n    }\r\n    if (!calendar) calendar = 'iso8601';\r\n    calendar = CanonicalizeCalendar(calendar);\r\n    matchMinute = true; // ISO strings may specify offset with less precision\r\n    const resolvedOptions = GetOptionsObject(options);\r\n    disambiguation = GetTemporalDisambiguationOption(resolvedOptions);\r\n    offsetOpt = GetTemporalOffsetOption(resolvedOptions, 'reject');\r\n    GetTemporalOverflowOption(resolvedOptions); // validate and ignore\r\n    isoDate = { year, month, day };\r\n  }\r\n  let offsetNs = 0;\r\n  if (offsetBehaviour === 'option') offsetNs = ParseDateTimeUTCOffset(castExists(offset));\r\n  const epochNanoseconds = InterpretISODateTimeOffset(\r\n    isoDate,\r\n    time,\r\n    offsetBehaviour,\r\n    offsetNs,\r\n    timeZone,\r\n    disambiguation,\r\n    offsetOpt,\r\n    matchMinute\r\n  );\r\n  return CreateTemporalZonedDateTime(epochNanoseconds, timeZone, calendar);\r\n}\r\n\r\nexport function CreateTemporalDateSlots(result: Temporal.PlainDate, isoDate: ISODate, calendar: BuiltinCalendarId) {\r\n  RejectDateRange(isoDate);\r\n\r\n  CreateSlots(result);\r\n  SetSlot(result, ISO_DATE, isoDate);\r\n  SetSlot(result, CALENDAR, calendar);\r\n  SetSlot(result, DATE_BRAND, true);\r\n\r\n  if (DEBUG) {\r\n    const repr = TemporalDateToString(result, 'auto');\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.PlainDate <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalDate(isoDate: ISODate, calendar: BuiltinCalendarId) {\r\n  const TemporalPlainDate = GetIntrinsic('%Temporal.PlainDate%');\r\n  const result = Object.create(TemporalPlainDate.prototype);\r\n  CreateTemporalDateSlots(result, isoDate, calendar);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalDateTimeSlots(\r\n  result: Temporal.PlainDateTime,\r\n  isoDateTime: ISODateTime,\r\n  calendar: BuiltinCalendarId\r\n) {\r\n  RejectDateTimeRange(isoDateTime);\r\n\r\n  CreateSlots(result);\r\n  SetSlot(result, ISO_DATE_TIME, isoDateTime);\r\n  SetSlot(result, CALENDAR, calendar);\r\n\r\n  if (DEBUG) {\r\n    let repr = ISODateTimeToString(isoDateTime, calendar, 'auto');\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.PlainDateTime <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalDateTime(isoDateTime: ISODateTime, calendar: BuiltinCalendarId) {\r\n  const TemporalPlainDateTime = GetIntrinsic('%Temporal.PlainDateTime%');\r\n  const result = Object.create(TemporalPlainDateTime.prototype);\r\n  CreateTemporalDateTimeSlots(result, isoDateTime, calendar);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalMonthDaySlots(\r\n  result: Temporal.PlainMonthDay,\r\n  isoDate: ISODate,\r\n  calendar: BuiltinCalendarId\r\n) {\r\n  RejectDateRange(isoDate);\r\n\r\n  CreateSlots(result);\r\n  SetSlot(result, ISO_DATE, isoDate);\r\n  SetSlot(result, CALENDAR, calendar);\r\n  SetSlot(result, MONTH_DAY_BRAND, true);\r\n\r\n  if (DEBUG) {\r\n    const repr = TemporalMonthDayToString(result, 'auto');\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.PlainMonthDay <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalMonthDay(isoDate: ISODate, calendar: BuiltinCalendarId) {\r\n  const TemporalPlainMonthDay = GetIntrinsic('%Temporal.PlainMonthDay%');\r\n  const result = Object.create(TemporalPlainMonthDay.prototype);\r\n  CreateTemporalMonthDaySlots(result, isoDate, calendar);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalTimeSlots(result: Temporal.PlainTime, time: TimeRecord) {\r\n  CreateSlots(result);\r\n  SetSlot(result, TIME, time);\r\n\r\n  if (DEBUG) {\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.PlainTime <${TimeRecordToString(time, 'auto')}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalTime(time: TimeRecord) {\r\n  const TemporalPlainTime = GetIntrinsic('%Temporal.PlainTime%');\r\n  const result = Object.create(TemporalPlainTime.prototype);\r\n  CreateTemporalTimeSlots(result, time);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalYearMonthSlots(\r\n  result: Temporal.PlainYearMonth,\r\n  isoDate: ISODate,\r\n  calendar: BuiltinCalendarId\r\n) {\r\n  RejectYearMonthRange(isoDate);\r\n\r\n  CreateSlots(result);\r\n  SetSlot(result, ISO_DATE, isoDate);\r\n  SetSlot(result, CALENDAR, calendar);\r\n  SetSlot(result, YEAR_MONTH_BRAND, true);\r\n\r\n  if (DEBUG) {\r\n    const repr = TemporalYearMonthToString(result, 'auto');\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.PlainYearMonth <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalYearMonth(isoDate: ISODate, calendar: BuiltinCalendarId) {\r\n  const TemporalPlainYearMonth = GetIntrinsic('%Temporal.PlainYearMonth%');\r\n  const result = Object.create(TemporalPlainYearMonth.prototype);\r\n  CreateTemporalYearMonthSlots(result, isoDate, calendar);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalInstantSlots(result: Temporal.Instant, epochNanoseconds: bigint) {\r\n  ValidateEpochNanoseconds(epochNanoseconds);\r\n  CreateSlots(result);\r\n  SetSlot(result, EPOCHNANOSECONDS, epochNanoseconds);\r\n\r\n  if (DEBUG) {\r\n    const iso = GetISOPartsFromEpoch(epochNanoseconds);\r\n    const repr = ISODateTimeToString(iso, 'iso8601', 'auto', 'never') + 'Z';\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `${result[Symbol.toStringTag]} <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalInstant(epochNanoseconds: bigint) {\r\n  const TemporalInstant = GetIntrinsic('%Temporal.Instant%');\r\n  const result: Temporal.Instant = Object.create(TemporalInstant.prototype);\r\n  CreateTemporalInstantSlots(result, epochNanoseconds);\r\n  return result;\r\n}\r\n\r\nexport function CreateTemporalZonedDateTimeSlots(\r\n  result: Temporal.ZonedDateTime,\r\n  epochNanoseconds: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId\r\n) {\r\n  ValidateEpochNanoseconds(epochNanoseconds);\r\n\r\n  CreateSlots(result);\r\n  SetSlot(result, EPOCHNANOSECONDS, epochNanoseconds);\r\n  SetSlot(result, TIME_ZONE, timeZone);\r\n  SetSlot(result, CALENDAR, calendar);\r\n\r\n  if (DEBUG) {\r\n    const repr = TemporalZonedDateTimeToString(result, 'auto');\r\n    Object.defineProperty(result, '_repr_', {\r\n      value: `Temporal.ZonedDateTime <${repr}>`,\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: false\r\n    });\r\n  }\r\n}\r\n\r\nexport function CreateTemporalZonedDateTime(\r\n  epochNanoseconds: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId = 'iso8601'\r\n) {\r\n  const TemporalZonedDateTime = GetIntrinsic('%Temporal.ZonedDateTime%');\r\n  const result: Temporal.ZonedDateTime = Object.create(TemporalZonedDateTime.prototype);\r\n  CreateTemporalZonedDateTimeSlots(result, epochNanoseconds, timeZone, calendar);\r\n  return result;\r\n}\r\n\r\nfunction CalendarFieldKeysPresent(fields: Record<FieldKey, unknown>) {\r\n  return CALENDAR_FIELD_KEYS.filter((key) => fields[key] !== undefined);\r\n}\r\n\r\nexport function CalendarMergeFields<Base extends Record<string, unknown>, ToAdd extends Record<string, unknown>>(\r\n  calendar: BuiltinCalendarId,\r\n  fields: Base,\r\n  additionalFields: ToAdd\r\n) {\r\n  const additionalKeys = CalendarFieldKeysPresent(additionalFields);\r\n  const overriddenKeys = calendarImplForID(calendar).fieldKeysToIgnore(additionalKeys);\r\n  const merged = Object.create(null);\r\n  const fieldsKeys = CalendarFieldKeysPresent(fields);\r\n  for (let ix = 0; ix < CALENDAR_FIELD_KEYS.length; ix++) {\r\n    let propValue = undefined;\r\n    const key = CALENDAR_FIELD_KEYS[ix];\r\n    if (fieldsKeys.includes(key) && !overriddenKeys.includes(key)) {\r\n      propValue = fields[key];\r\n    }\r\n    if (additionalKeys.includes(key)) {\r\n      propValue = additionalFields[key];\r\n    }\r\n    if (propValue !== undefined) merged[key] = propValue;\r\n  }\r\n  return merged as Base & ToAdd;\r\n}\r\n\r\nexport function CalendarDateAdd(\r\n  calendar: BuiltinCalendarId,\r\n  isoDate: ISODate,\r\n  dateDuration: Partial<DateDuration>,\r\n  overflow: Overflow\r\n) {\r\n  const result = calendarImplForID(calendar).dateAdd(isoDate, dateDuration, overflow);\r\n  RejectDateRange(result);\r\n  return result;\r\n}\r\n\r\nfunction CalendarDateUntil(\r\n  calendar: BuiltinCalendarId,\r\n  isoDate: ISODate,\r\n  isoOtherDate: ISODate,\r\n  largestUnit: Temporal.DateUnit\r\n) {\r\n  return calendarImplForID(calendar).dateUntil(isoDate, isoOtherDate, largestUnit);\r\n}\r\n\r\nexport function ToTemporalCalendarIdentifier(calendarLike: Temporal.CalendarLike): BuiltinCalendarId {\r\n  if (IsObject(calendarLike)) {\r\n    if (HasSlot(calendarLike, CALENDAR)) return GetSlot(calendarLike, CALENDAR);\r\n  }\r\n  const identifier = RequireString(calendarLike);\r\n  try {\r\n    // Fast path: identifier is a calendar type, no ISO string parsing needed\r\n    return CanonicalizeCalendar(identifier);\r\n  } catch {\r\n    // fall through\r\n  }\r\n  let calendar;\r\n  try {\r\n    ({ calendar } = ParseISODateTime(identifier));\r\n  } catch {\r\n    try {\r\n      ({ calendar } = ParseTemporalTimeString(identifier));\r\n    } catch {\r\n      try {\r\n        ({ calendar } = ParseTemporalYearMonthString(identifier));\r\n      } catch {\r\n        ({ calendar } = ParseTemporalMonthDayString(identifier));\r\n      }\r\n    }\r\n  }\r\n  if (!calendar) calendar = 'iso8601';\r\n  return CanonicalizeCalendar(calendar);\r\n}\r\n\r\nfunction GetTemporalCalendarIdentifierWithISODefault(item: { calendar?: Temporal.CalendarLike }) {\r\n  if (HasSlot(item, CALENDAR)) return GetSlot(item, CALENDAR);\r\n  const { calendar } = item;\r\n  if (calendar === undefined) return 'iso8601';\r\n  return ToTemporalCalendarIdentifier(calendar);\r\n}\r\n\r\nexport function CalendarEquals(one: BuiltinCalendarId, two: BuiltinCalendarId) {\r\n  return CanonicalizeCalendar(one) === CanonicalizeCalendar(two);\r\n}\r\n\r\nexport function CalendarDateFromFields(calendar: BuiltinCalendarId, fields: CalendarFieldsRecord, overflow: Overflow) {\r\n  const calendarImpl: CalendarImpl = calendarImplForID(calendar);\r\n  calendarImpl.resolveFields(fields, 'date');\r\n  const result = calendarImpl.dateToISO(fields, overflow);\r\n  RejectDateRange(result);\r\n  return result;\r\n}\r\n\r\nexport function CalendarYearMonthFromFields(\r\n  calendar: BuiltinCalendarId,\r\n  fields: CalendarFieldsRecord,\r\n  overflow: Overflow\r\n) {\r\n  const calendarImpl: CalendarImpl = calendarImplForID(calendar);\r\n  calendarImpl.resolveFields(fields, 'year-month');\r\n  fields.day = 1;\r\n  const result = calendarImpl.dateToISO(fields, overflow);\r\n  RejectYearMonthRange(result);\r\n  return result;\r\n}\r\n\r\nexport function CalendarMonthDayFromFields(\r\n  calendar: BuiltinCalendarId,\r\n  fields: MonthDayFromFieldsObject,\r\n  overflow: Overflow\r\n) {\r\n  const calendarImpl: CalendarImpl = calendarImplForID(calendar);\r\n  calendarImpl.resolveFields(fields, 'month-day');\r\n  const result = calendarImpl.monthDayToISOReferenceDate(fields, overflow);\r\n  RejectDateRange(result);\r\n  return result;\r\n}\r\n\r\nexport function ToTemporalTimeZoneIdentifier(temporalTimeZoneLike: unknown): string {\r\n  if (IsObject(temporalTimeZoneLike)) {\r\n    if (IsTemporalZonedDateTime(temporalTimeZoneLike)) return GetSlot(temporalTimeZoneLike, TIME_ZONE);\r\n  }\r\n  const timeZoneString = RequireString(temporalTimeZoneLike);\r\n  if (timeZoneString === 'UTC') return 'UTC'; // UTC fast path\r\n\r\n  const { tzName, offsetMinutes } = ParseTemporalTimeZoneString(timeZoneString);\r\n  if (offsetMinutes !== undefined) {\r\n    return FormatOffsetTimeZoneIdentifier(offsetMinutes);\r\n  }\r\n  // if offsetMinutes is undefined, then tzName must be present\r\n  const record = GetAvailableNamedTimeZoneIdentifier(castExists(tzName));\r\n  if (!record) throw new RangeError(`Unrecognized time zone ${tzName}`);\r\n  return record.identifier;\r\n}\r\n\r\nexport function TimeZoneEquals(one: string, two: string) {\r\n  if (one === two) return true;\r\n  const offsetMinutes1 = ParseTimeZoneIdentifier(one).offsetMinutes;\r\n  const offsetMinutes2 = ParseTimeZoneIdentifier(two).offsetMinutes;\r\n  if (offsetMinutes1 === undefined && offsetMinutes2 === undefined) {\r\n    // Calling GetAvailableNamedTimeZoneIdentifier is costly, so (unlike the\r\n    // spec) the polyfill will early-return if one of them isn't recognized. Try\r\n    // the second ID first because it's more likely to be unknown, because it\r\n    // can come from the argument of TimeZone.p.equals as opposed to the first\r\n    // ID which comes from the receiver.\r\n    const idRecord2 = GetAvailableNamedTimeZoneIdentifier(two);\r\n    if (!idRecord2) return false;\r\n    const idRecord1 = GetAvailableNamedTimeZoneIdentifier(one);\r\n    if (!idRecord1) return false;\r\n    return idRecord1.primaryIdentifier === idRecord2.primaryIdentifier;\r\n  } else {\r\n    return offsetMinutes1 === offsetMinutes2;\r\n  }\r\n}\r\n\r\nexport function GetOffsetNanosecondsFor(timeZone: string, epochNs: bigint): number {\r\n  const offsetMinutes = ParseTimeZoneIdentifier(timeZone).offsetMinutes ?? 0;\r\n  if (offsetMinutes !== undefined) return offsetMinutes * 60_000_000_000; //60*1e9\r\n\r\n  return GetNamedTimeZoneOffsetNanoseconds(timeZone, epochNs);\r\n}\r\n\r\nexport function FormatUTCOffsetNanoseconds(offsetNs: bigint): string {\r\n  const sign = offsetNs < 0n ? '-' : '+';\r\n  const absoluteNs = offsetNs < 0n ? -offsetNs : offsetNs;\r\n  const hour = Number(absoluteNs / 3600_000_000_000n);\r\n  const minute = Number(absoluteNs / 60_000_000_000n) % 60;\r\n  const second = Number(absoluteNs / 1_000_000_000n) % 60;\r\n  const subSecondNs = Number(absoluteNs % 1_000_000_000n);\r\n  const precision = second === 0 && subSecondNs === 0 ? 'minute' : 'auto';\r\n  const timeString = FormatTimeString(hour, minute, second, subSecondNs, precision);\r\n  return `${sign}${timeString}`;\r\n}\r\n\r\nexport function GetISODateTimeFor(timeZone: string, epochNs: bigint) {\r\n  const offsetNs = GetOffsetNanosecondsFor(timeZone, epochNs);\r\n  let {\r\n    isoDate: { year, month, day },\r\n    time: { hour, minute, second, millisecond, microsecond, nanosecond }\r\n  } = GetISOPartsFromEpoch(epochNs);\r\n  return BalanceISODateTime(year, month, day, hour, minute, second, millisecond, microsecond, nanosecond + offsetNs);\r\n}\r\n\r\nexport function GetEpochNanosecondsFor(\r\n  timeZone: string,\r\n  isoDateTime: ISODateTime,\r\n  disambiguation: NonNullable<Temporal.ToInstantOptions['disambiguation']>\r\n) {\r\n  const possibleEpochNs = GetPossibleEpochNanoseconds(timeZone, isoDateTime);\r\n  return DisambiguatePossibleEpochNanoseconds(possibleEpochNs, timeZone, isoDateTime, disambiguation);\r\n}\r\n\r\n// TODO: See if this logic can be removed in favour of GetNamedTimeZoneEpochNanoseconds\r\nfunction DisambiguatePossibleEpochNanoseconds(\r\n  possibleEpochNs: bigint[],\r\n  timeZone: string,\r\n  isoDateTime: ISODateTime,\r\n  disambiguation: NonNullable<Temporal.ToInstantOptions['disambiguation']>\r\n) {\r\n  const numInstants = possibleEpochNs.length;\r\n\r\n  if (numInstants === 1) return possibleEpochNs[0];\r\n  if (numInstants) {\r\n    switch (disambiguation) {\r\n      case 'compatible':\r\n      // fall through because 'compatible' means 'earlier' for \"fall back\" transitions\r\n      case 'earlier':\r\n        return possibleEpochNs[0];\r\n      case 'later':\r\n        return possibleEpochNs[numInstants - 1];\r\n      case 'reject': {\r\n        throw new RangeError('multiple instants found');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (disambiguation === 'reject') throw new RangeError('multiple instants found');\r\n  const utcns = GetUTCEpochNanoseconds(isoDateTime);\r\n\r\n  const dayBefore = utcns - DAY_NANOS_BI;\r\n  ValidateEpochNanoseconds(dayBefore);\r\n  const offsetBefore = GetOffsetNanosecondsFor(timeZone, dayBefore);\r\n  const dayAfter = DAY_NANOS_BI + utcns;\r\n  ValidateEpochNanoseconds(dayAfter);\r\n  const offsetAfter = GetOffsetNanosecondsFor(timeZone, dayAfter);\r\n  const nanoseconds = offsetAfter - offsetBefore;\r\n  assert(Math.abs(nanoseconds) <= DAY_NANOS, 'UTC offset shift longer than 24 hours');\r\n\r\n  switch (disambiguation) {\r\n    case 'earlier': {\r\n      const timeDuration = TimeDuration.fromComponents(0, 0, 0, 0, 0, -nanoseconds);\r\n      const earlierTime = AddTime(isoDateTime.time, timeDuration);\r\n      const earlierDate = BalanceISODate(\r\n        isoDateTime.isoDate.year,\r\n        isoDateTime.isoDate.month,\r\n        isoDateTime.isoDate.day + earlierTime.deltaDays\r\n      );\r\n      const earlier = CombineISODateAndTimeRecord(earlierDate, earlierTime);\r\n      return GetPossibleEpochNanoseconds(timeZone, earlier)[0];\r\n    }\r\n    case 'compatible':\r\n    // fall through because 'compatible' means 'later' for \"spring forward\" transitions\r\n    case 'later': {\r\n      const timeDuration = TimeDuration.fromComponents(0, 0, 0, 0, 0, nanoseconds);\r\n      const laterTime = AddTime(isoDateTime.time, timeDuration);\r\n      const laterDate = BalanceISODate(\r\n        isoDateTime.isoDate.year,\r\n        isoDateTime.isoDate.month,\r\n        isoDateTime.isoDate.day + laterTime.deltaDays\r\n      );\r\n      const later = CombineISODateAndTimeRecord(laterDate, laterTime);\r\n      const possible = GetPossibleEpochNanoseconds(timeZone, later);\r\n      return possible[possible.length - 1];\r\n    }\r\n  }\r\n}\r\n\r\nfunction GetPossibleEpochNanoseconds(timeZone: string, isoDateTime: ISODateTime) {\r\n  // UTC fast path\r\n  if (timeZone === 'UTC') {\r\n    CheckISODaysRange(isoDateTime.isoDate);\r\n    return [GetUTCEpochNanoseconds(isoDateTime)];\r\n  }\r\n\r\n  const offsetMinutes = ParseTimeZoneIdentifier(timeZone).offsetMinutes;\r\n  if (offsetMinutes !== undefined) {\r\n    const balanced = BalanceISODateTime(\r\n      isoDateTime.isoDate.year,\r\n      isoDateTime.isoDate.month,\r\n      isoDateTime.isoDate.day,\r\n      isoDateTime.time.hour,\r\n      isoDateTime.time.minute - offsetMinutes,\r\n      isoDateTime.time.second,\r\n      isoDateTime.time.millisecond,\r\n      isoDateTime.time.microsecond,\r\n      isoDateTime.time.nanosecond\r\n    );\r\n    CheckISODaysRange(balanced.isoDate);\r\n    const epochNs = GetUTCEpochNanoseconds(balanced);\r\n    ValidateEpochNanoseconds(epochNs);\r\n    return [epochNs];\r\n  }\r\n\r\n  CheckISODaysRange(isoDateTime.isoDate);\r\n  return GetNamedTimeZoneEpochNanoseconds(timeZone, isoDateTime);\r\n}\r\n\r\nexport function GetStartOfDay(timeZone: string, isoDate: ISODate) {\r\n  const isoDateTime = CombineISODateAndTimeRecord(isoDate, MidnightTimeRecord());\r\n  const possibleEpochNs = GetPossibleEpochNanoseconds(timeZone, isoDateTime);\r\n  // If not a DST gap, return the single or earlier epochNs\r\n  if (possibleEpochNs.length) return possibleEpochNs[0];\r\n\r\n  // Otherwise, 00:00:00 lies within a DST gap. Compute an epochNs that's\r\n  // guaranteed to be before the transition\r\n  assert(!IsOffsetTimeZoneIdentifier(timeZone), 'should only be reached with named time zone');\r\n\r\n  const utcns = GetUTCEpochNanoseconds(isoDateTime);\r\n  const dayBefore = utcns - DAY_NANOS_BI;\r\n  ValidateEpochNanoseconds(dayBefore);\r\n  return castExists(GetNamedTimeZoneNextTransition(timeZone, dayBefore));\r\n}\r\n\r\nexport function ISOYearString(year: number) {\r\n  let yearString;\r\n  if (year < 0 || year > 9999) {\r\n    const sign = year < 0 ? '-' : '+';\r\n    const yearNumber = Math.abs(year);\r\n    yearString = sign + ToZeroPaddedDecimalString(yearNumber, 6);\r\n  } else {\r\n    yearString = ToZeroPaddedDecimalString(year, 4);\r\n  }\r\n  return yearString;\r\n}\r\n\r\nexport function ISODateTimePartString(part: number) {\r\n  return ToZeroPaddedDecimalString(part, 2);\r\n}\r\n\r\nfunction FormatFractionalSeconds(\r\n  subSecondNanoseconds: number,\r\n  precision: Exclude<SecondsStringPrecisionRecord['precision'], 'minute'>\r\n): string {\r\n  let fraction;\r\n  if (precision === 'auto') {\r\n    if (subSecondNanoseconds === 0) return '';\r\n    const fractionFullPrecision = ToZeroPaddedDecimalString(subSecondNanoseconds, 9);\r\n    // now remove any trailing zeroes\r\n    fraction = fractionFullPrecision.replace(/0+$/, '');\r\n  } else {\r\n    if (precision === 0) return '';\r\n    const fractionFullPrecision = ToZeroPaddedDecimalString(subSecondNanoseconds, 9);\r\n    fraction = fractionFullPrecision.slice(0, precision);\r\n  }\r\n  return `.${fraction}`;\r\n}\r\n\r\nfunction FormatTimeString(\r\n  hour: number,\r\n  minute: number,\r\n  second: number,\r\n  subSecondNanoseconds: number,\r\n  precision: SecondsStringPrecisionRecord['precision']\r\n): string {\r\n  let result = `${ISODateTimePartString(hour)}:${ISODateTimePartString(minute)}`;\r\n  if (precision === 'minute') return result;\r\n\r\n  result += `:${ISODateTimePartString(second)}`;\r\n  result += FormatFractionalSeconds(subSecondNanoseconds, precision);\r\n  return result;\r\n}\r\n\r\nexport function TemporalInstantToString(\r\n  instant: Temporal.Instant,\r\n  timeZone: string | undefined,\r\n  precision: SecondsStringPrecisionRecord['precision']\r\n) {\r\n  let outputTimeZone = timeZone;\r\n  if (outputTimeZone === undefined) outputTimeZone = 'UTC';\r\n  const epochNs = GetSlot(instant, EPOCHNANOSECONDS);\r\n  const iso = GetISODateTimeFor(outputTimeZone, epochNs);\r\n  const dateTimeString = ISODateTimeToString(iso, 'iso8601', precision, 'never');\r\n  let timeZoneString = 'Z';\r\n  if (timeZone !== undefined) {\r\n    const offsetNs = GetOffsetNanosecondsFor(outputTimeZone, epochNs);\r\n    timeZoneString = FormatDateTimeUTCOffsetRounded(offsetNs);\r\n  }\r\n  return `${dateTimeString}${timeZoneString}`;\r\n}\r\n\r\ninterface ToStringOptions {\r\n  unit: SecondsStringPrecisionRecord['unit'];\r\n  increment: number;\r\n  roundingMode: ReturnType<typeof GetRoundingModeOption>;\r\n}\r\n\r\nexport function TemporalDurationToString(\r\n  duration: Temporal.Duration,\r\n  precision: Exclude<SecondsStringPrecisionRecord['precision'], 'minute'>\r\n) {\r\n  const years = GetSlot(duration, YEARS);\r\n  const months = GetSlot(duration, MONTHS);\r\n  const weeks = GetSlot(duration, WEEKS);\r\n  const days = GetSlot(duration, DAYS);\r\n  const hours = GetSlot(duration, HOURS);\r\n  const minutes = GetSlot(duration, MINUTES);\r\n  const sign = DurationSign(duration);\r\n\r\n  let datePart = '';\r\n  if (years !== 0) datePart += `${Math.abs(years)}Y`;\r\n  if (months !== 0) datePart += `${Math.abs(months)}M`;\r\n  if (weeks !== 0) datePart += `${Math.abs(weeks)}W`;\r\n  if (days !== 0) datePart += `${Math.abs(days)}D`;\r\n\r\n  let timePart = '';\r\n  if (hours !== 0) timePart += `${Math.abs(hours)}H`;\r\n  if (minutes !== 0) timePart += `${Math.abs(minutes)}M`;\r\n\r\n  // Keeping sub-second units separate avoids losing precision after resolving\r\n  // any overflows from rounding\r\n  const secondsDuration = TimeDuration.fromComponents(\r\n    0,\r\n    0,\r\n    GetSlot(duration, SECONDS),\r\n    GetSlot(duration, MILLISECONDS),\r\n    GetSlot(duration, MICROSECONDS),\r\n    GetSlot(duration, NANOSECONDS)\r\n  );\r\n  if (\r\n    !secondsDuration.isZero() ||\r\n    ['second', 'millisecond', 'microsecond', 'nanosecond'].includes(DefaultTemporalLargestUnit(duration)) ||\r\n    precision !== 'auto'\r\n  ) {\r\n    const secondsPart = Math.abs(secondsDuration.sec);\r\n    const subSecondsPart = FormatFractionalSeconds(Math.abs(secondsDuration.subsec), precision);\r\n    timePart += `${secondsPart}${subSecondsPart}S`;\r\n  }\r\n  let result = `${sign < 0 ? '-' : ''}P${datePart}`;\r\n  if (timePart) result = `${result}T${timePart}`;\r\n  return result;\r\n}\r\n\r\nexport function TemporalDateToString(\r\n  date: Temporal.PlainDate,\r\n  showCalendar: Temporal.ShowCalendarOption['calendarName'] = 'auto'\r\n) {\r\n  const { year, month, day } = GetSlot(date, ISO_DATE);\r\n  const yearString = ISOYearString(year);\r\n  const monthString = ISODateTimePartString(month);\r\n  const dayString = ISODateTimePartString(day);\r\n  const calendar = FormatCalendarAnnotation(GetSlot(date, CALENDAR), showCalendar);\r\n  return `${yearString}-${monthString}-${dayString}${calendar}`;\r\n}\r\n\r\nexport function TimeRecordToString(\r\n  { hour, minute, second, millisecond, microsecond, nanosecond }: TimeRecord,\r\n  precision: SecondsStringPrecisionRecord['precision']\r\n) {\r\n  const subSecondNanoseconds = millisecond * 1e6 + microsecond * 1e3 + nanosecond;\r\n  return FormatTimeString(hour, minute, second, subSecondNanoseconds, precision);\r\n}\r\n\r\nexport function ISODateTimeToString(\r\n  isoDateTime: ISODateTime,\r\n  calendar: BuiltinCalendarId,\r\n  precision: SecondsStringPrecisionRecord['precision'],\r\n  showCalendar: ReturnType<typeof GetTemporalShowCalendarNameOption> = 'auto'\r\n) {\r\n  const {\r\n    isoDate: { year, month, day },\r\n    time: { hour, minute, second, millisecond, microsecond, nanosecond }\r\n  } = isoDateTime;\r\n  const yearString = ISOYearString(year);\r\n  const monthString = ISODateTimePartString(month);\r\n  const dayString = ISODateTimePartString(day);\r\n  const subSecondNanoseconds = millisecond * 1e6 + microsecond * 1e3 + nanosecond;\r\n  const timeString = FormatTimeString(hour, minute, second, subSecondNanoseconds, precision);\r\n  const calendarString = FormatCalendarAnnotation(calendar, showCalendar);\r\n  return `${yearString}-${monthString}-${dayString}T${timeString}${calendarString}`;\r\n}\r\n\r\nexport function TemporalMonthDayToString(\r\n  monthDay: Temporal.PlainMonthDay,\r\n  showCalendar: Temporal.ShowCalendarOption['calendarName'] = 'auto'\r\n) {\r\n  const { year, month, day } = GetSlot(monthDay, ISO_DATE);\r\n  const monthString = ISODateTimePartString(month);\r\n  const dayString = ISODateTimePartString(day);\r\n  let resultString = `${monthString}-${dayString}`;\r\n  const calendar = GetSlot(monthDay, CALENDAR);\r\n  if (showCalendar === 'always' || showCalendar === 'critical' || calendar !== 'iso8601') {\r\n    const yearString = ISOYearString(year);\r\n    resultString = `${yearString}-${resultString}`;\r\n  }\r\n  const calendarString = FormatCalendarAnnotation(calendar, showCalendar);\r\n  if (calendarString) resultString += calendarString;\r\n  return resultString;\r\n}\r\n\r\nexport function TemporalYearMonthToString(\r\n  yearMonth: Temporal.PlainYearMonth,\r\n  showCalendar: Temporal.ShowCalendarOption['calendarName'] = 'auto'\r\n) {\r\n  const { year, month, day } = GetSlot(yearMonth, ISO_DATE);\r\n  const yearString = ISOYearString(year);\r\n  const monthString = ISODateTimePartString(month);\r\n  let resultString = `${yearString}-${monthString}`;\r\n  const calendar = GetSlot(yearMonth, CALENDAR);\r\n  if (showCalendar === 'always' || showCalendar === 'critical' || calendar !== 'iso8601') {\r\n    const dayString = ISODateTimePartString(day);\r\n    resultString += `-${dayString}`;\r\n  }\r\n  const calendarString = FormatCalendarAnnotation(calendar, showCalendar);\r\n  if (calendarString) resultString += calendarString;\r\n  return resultString;\r\n}\r\n\r\nexport function TemporalZonedDateTimeToString(\r\n  zdt: Temporal.ZonedDateTime,\r\n  precision: SecondsStringPrecisionRecord['precision'],\r\n  showCalendar: ReturnType<typeof GetTemporalShowCalendarNameOption> = 'auto',\r\n  showTimeZone: ReturnType<typeof GetTemporalShowTimeZoneNameOption> = 'auto',\r\n  showOffset: ReturnType<typeof GetTemporalShowOffsetOption> = 'auto',\r\n  options: ToStringOptions | undefined = undefined\r\n) {\r\n  let epochNs = GetSlot(zdt, EPOCHNANOSECONDS);\r\n\r\n  if (options) {\r\n    const { unit, increment, roundingMode } = options;\r\n    epochNs = RoundTemporalInstant(epochNs, increment, unit, roundingMode);\r\n  }\r\n\r\n  const tz = GetSlot(zdt, TIME_ZONE);\r\n  const offsetNs = GetOffsetNanosecondsFor(tz, epochNs);\r\n  const iso = GetISODateTimeFor(tz, epochNs);\r\n  let dateTimeString = ISODateTimeToString(iso, 'iso8601', precision, 'never');\r\n  if (showOffset !== 'never') {\r\n    dateTimeString += FormatDateTimeUTCOffsetRounded(offsetNs);\r\n  }\r\n  if (showTimeZone !== 'never') {\r\n    const flag = showTimeZone === 'critical' ? '!' : '';\r\n    dateTimeString += `[${flag}${tz}]`;\r\n  }\r\n  dateTimeString += FormatCalendarAnnotation(GetSlot(zdt, CALENDAR), showCalendar);\r\n  return dateTimeString;\r\n}\r\n\r\nexport function IsOffsetTimeZoneIdentifier(string: string) {\r\n  return OFFSET_IDENTIFIER.test(string);\r\n}\r\n\r\nexport function ParseDateTimeUTCOffset(string: string): number {\r\n  const match = OFFSET_WITH_PARTS.exec(string);\r\n  if (!match) {\r\n    throw new RangeError(`invalid time zone offset: ${string}; must match ±HH:MM[:SS.SSSSSSSSS]`);\r\n  }\r\n  const sign = match[1] === '-' ? -1 : +1;\r\n  const hours = +match[2];\r\n  const minutes = +(match[3] || 0);\r\n  const seconds = +(match[4] || 0);\r\n  const nanoseconds = +((match[5] || 0) + '000000000').slice(0, 9);\r\n  const offsetNanoseconds = sign * (((hours * 60 + minutes) * 60 + seconds) * 1e9 + nanoseconds);\r\n  return offsetNanoseconds;\r\n}\r\n\r\nlet canonicalTimeZoneIdsCache: Map<string, string> | undefined | null = undefined;\r\nconst isTZIDSep = Object.assign(Object.create(null), { '/': true, '-': true, _: true });\r\n\r\nexport function GetAvailableNamedTimeZoneIdentifier(\r\n  identifier: string\r\n): { identifier: string; primaryIdentifier: string } | undefined {\r\n  // The most common case is when the identifier is a canonical time zone ID.\r\n  // Fast-path that case by caching all canonical IDs. For old ECMAScript\r\n  // implementations lacking this API, set the cache to `null` to avoid retries.\r\n  if (canonicalTimeZoneIdsCache === undefined) {\r\n    const canonicalTimeZoneIds = Intl.supportedValuesOf?.('timeZone');\r\n    if (canonicalTimeZoneIds) {\r\n      canonicalTimeZoneIdsCache = new Map();\r\n      for (let ix = 0; ix < canonicalTimeZoneIds.length; ix++) {\r\n        const id = canonicalTimeZoneIds[ix];\r\n        canonicalTimeZoneIdsCache.set(ASCIILowercase(id), id);\r\n      }\r\n    } else {\r\n      canonicalTimeZoneIdsCache = null;\r\n    }\r\n  }\r\n\r\n  const lower = ASCIILowercase(identifier);\r\n  let primaryIdentifier = canonicalTimeZoneIdsCache?.get(lower);\r\n  if (primaryIdentifier) return { identifier: primaryIdentifier, primaryIdentifier };\r\n\r\n  // It's not already a primary identifier, so get its primary identifier (or\r\n  // return if it's not an available named time zone ID).\r\n  try {\r\n    const formatter = getIntlDateTimeFormatEnUsForTimeZone(identifier);\r\n    primaryIdentifier = formatter.resolvedOptions().timeZone;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n\r\n  // Special case this legacy identifier that is listed both in `backzone` and\r\n  // `backward` in the TZDB. Work around implementations that incorrectly use\r\n  // the `backward` data.\r\n  if (lower === 'antarctica/south_pole') primaryIdentifier = 'Antarctica/McMurdo';\r\n\r\n  // Some legacy identifiers are aliases in ICU but not legal IANA identifiers.\r\n  // Reject them even if the implementation's Intl supports them, as they are\r\n  // not present in the IANA time zone database.\r\n  if (ICU_LEGACY_TIME_ZONE_IDS.has(identifier)) {\r\n    throw new RangeError(`${identifier} is a legacy time zone identifier from ICU. Use ${primaryIdentifier} instead`);\r\n  }\r\n\r\n  // The identifier is an alias (a deprecated identifier that's a synonym for a\r\n  // primary identifier), so we need to case-normalize the identifier to match\r\n  // the IANA TZDB, e.g. america/new_york => America/New_York. There's no\r\n  // built-in way to do this using Intl.DateTimeFormat, but the we can normalize\r\n  // almost all aliases (modulo a few special cases) using the TZDB's basic\r\n  // capitalization pattern:\r\n  // 1. capitalize the first letter of the identifier\r\n  // 2. capitalize the letter after every slash, dash, or underscore delimiter\r\n  const chars = [...lower].map((c, i) => (i === 0 || isTZIDSep[lower[i - 1]] ? c.toUpperCase() : c));\r\n  const standardCase = chars.join('');\r\n  const segments = standardCase.split('/');\r\n\r\n  if (segments.length === 1) {\r\n    // If a single-segment legacy ID is 2-3 chars or contains a number or dash, then\r\n    // (except for the \"GB-Eire\" special case) the case-normalized form is uppercase.\r\n    // These are: GMT+0, GMT-0, GB, NZ, PRC, ROC, ROK, UCT, GMT, GMT0, CET, CST6CDT,\r\n    // EET, EST, HST, MET, MST, MST7MDT, PST8PDT, WET, NZ-CHAT, and W-SU.\r\n    // Otherwise it's standard form: first letter capitalized, e.g. Iran, Egypt, Hongkong\r\n    if (lower === 'gb-eire') return { identifier: 'GB-Eire', primaryIdentifier };\r\n    return {\r\n      identifier: lower.length <= 3 || /[-0-9]/.test(lower) ? lower.toUpperCase() : segments[0],\r\n      primaryIdentifier\r\n    };\r\n  }\r\n\r\n  // All Etc zone names are uppercase except three exceptions.\r\n  if (segments[0] === 'Etc') {\r\n    const etcName = ['Zulu', 'Greenwich', 'Universal'].includes(segments[1]) ? segments[1] : segments[1].toUpperCase();\r\n    return { identifier: `Etc/${etcName}`, primaryIdentifier };\r\n  }\r\n\r\n  // Legacy US identifiers like US/Alaska or US/Indiana-Starke are 2 segments and use standard form.\r\n  if (segments[0] === 'Us') return { identifier: `US/${segments[1]}`, primaryIdentifier };\r\n\r\n  // For multi-segment IDs, there's a few special cases in the second/third segments\r\n  const specialCases = new Map([\r\n    ['Act', 'ACT'],\r\n    ['Lhi', 'LHI'],\r\n    ['Nsw', 'NSW'],\r\n    ['Dar_Es_Salaam', 'Dar_es_Salaam'],\r\n    ['Port_Of_Spain', 'Port_of_Spain'],\r\n    ['Port-Au-Prince', 'Port-au-Prince'],\r\n    ['Isle_Of_Man', 'Isle_of_Man'],\r\n    ['Comodrivadavia', 'ComodRivadavia'],\r\n    ['Knox_In', 'Knox_IN'],\r\n    ['Dumontdurville', 'DumontDUrville'],\r\n    ['Mcmurdo', 'McMurdo'],\r\n    ['Denoronha', 'DeNoronha'],\r\n    ['Easterisland', 'EasterIsland'],\r\n    ['Bajanorte', 'BajaNorte'],\r\n    ['Bajasur', 'BajaSur']\r\n  ]);\r\n  segments[1] = specialCases.get(segments[1]) ?? segments[1];\r\n  if (segments.length > 2) segments[2] = specialCases.get(segments[2]) ?? segments[2];\r\n  return { identifier: segments.join('/'), primaryIdentifier };\r\n}\r\n\r\nfunction GetNamedTimeZoneOffsetNanosecondsImpl(id: string, epochMilliseconds: number) {\r\n  const { year, month, day, hour, minute, second } = GetFormatterParts(id, epochMilliseconds);\r\n  let millisecond = epochMilliseconds % 1000;\r\n  if (millisecond < 0) millisecond += 1000;\r\n  const utc = GetUTCEpochMilliseconds({ isoDate: { year, month, day }, time: { hour, minute, second, millisecond } });\r\n  return (utc - epochMilliseconds) * 1e6;\r\n}\r\n\r\nfunction GetNamedTimeZoneOffsetNanoseconds(id: string, epochNanoseconds: bigint): number {\r\n  // Optimization: We get the offset nanoseconds only with millisecond\r\n  // resolution, assuming that time zone offset changes don't happen in the\r\n  // middle of a millisecond\r\n  return GetNamedTimeZoneOffsetNanosecondsImpl(id, epochNsToMs(epochNanoseconds, 'floor'));\r\n}\r\n\r\nexport function FormatOffsetTimeZoneIdentifier(offsetMinutes: number): string {\r\n  const sign = offsetMinutes < 0 ? '-' : '+';\r\n  const absoluteMinutes = Math.abs(offsetMinutes);\r\n  const hour = Math.floor(absoluteMinutes / 60);\r\n  const minute = absoluteMinutes % 60;\r\n  const timeString = FormatTimeString(hour, minute, 0, 0, 'minute');\r\n  return `${sign}${timeString}`;\r\n}\r\n\r\nfunction FormatDateTimeUTCOffsetRounded(offsetNanosecondsParam: number): string {\r\n  const offsetNanoseconds = RoundNumberToIncrement(offsetNanosecondsParam, MINUTE_NANOS, 'halfExpand');\r\n  return FormatOffsetTimeZoneIdentifier(offsetNanoseconds / 60e9);\r\n}\r\n\r\nfunction GetUTCEpochMilliseconds({\r\n  isoDate: { year, month, day },\r\n  time: { hour, minute, second, millisecond }\r\n}: {\r\n  isoDate: ISODate;\r\n  time: Omit<TimeRecord, 'microsecond' | 'nanosecond'>;\r\n}) {\r\n  // The pattern of leap years in the ISO 8601 calendar repeats every 400\r\n  // years. To avoid overflowing at the edges of the range, we reduce the year\r\n  // to the remainder after dividing by 400, and then add back all the\r\n  // nanoseconds from the multiples of 400 years at the end.\r\n  const reducedYear = year % 400;\r\n  const yearCycles = (year - reducedYear) / 400;\r\n\r\n  // Note: Date.UTC() interprets one and two-digit years as being in the\r\n  // 20th century, so don't use it\r\n  const legacyDate = new Date();\r\n  legacyDate.setUTCHours(hour, minute, second, millisecond);\r\n  legacyDate.setUTCFullYear(reducedYear, month - 1, day);\r\n  const ms = legacyDate.getTime();\r\n  return ms + MS_IN_400_YEAR_CYCLE * yearCycles;\r\n}\r\n\r\nfunction GetUTCEpochNanoseconds(isoDateTime: ISODateTime) {\r\n  const ms = GetUTCEpochMilliseconds(isoDateTime);\r\n  const subMs = isoDateTime.time.microsecond * 1e3 + isoDateTime.time.nanosecond;\r\n  return epochMsToNs(ms) + BigInt(subMs);\r\n}\r\n\r\nfunction GetISOPartsFromEpoch(epochNanoseconds: bigint) {\r\n  let epochMilliseconds = epochNsToMs(epochNanoseconds, 'trunc');\r\n  let nanos = Number(epochNanoseconds % BigInt(MILLION));\r\n  if (nanos < 0) {\r\n    nanos += 1e6;\r\n    epochMilliseconds -= 1;\r\n  }\r\n  const microsecond = Math.floor(nanos / 1e3) % 1e3;\r\n  const nanosecond = nanos % 1e3;\r\n\r\n  const item = new Date(epochMilliseconds);\r\n  const year = item.getUTCFullYear();\r\n  const month = item.getUTCMonth() + 1;\r\n  const day = item.getUTCDate();\r\n  const hour = item.getUTCHours();\r\n  const minute = item.getUTCMinutes();\r\n  const second = item.getUTCSeconds();\r\n  const millisecond = item.getUTCMilliseconds();\r\n\r\n  return {\r\n    epochMilliseconds,\r\n    isoDate: { year, month, day },\r\n    time: { hour, minute, second, millisecond, microsecond, nanosecond }\r\n  };\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove this after tests are converted to TS\r\nexport function GetNamedTimeZoneDateTimeParts(id: string, epochNanoseconds: bigint) {\r\n  const {\r\n    epochMilliseconds,\r\n    time: { millisecond, microsecond, nanosecond }\r\n  } = GetISOPartsFromEpoch(epochNanoseconds);\r\n  const { year, month, day, hour, minute, second } = GetFormatterParts(id, epochMilliseconds);\r\n  return BalanceISODateTime(year, month, day, hour, minute, second, millisecond, microsecond, nanosecond);\r\n}\r\n\r\n// Most time zones never transition twice within a short span of days. We still\r\n// accommodate twitchy zones, albeit at a performance penalty. 19 days is the\r\n// default window, past which we'd need to start adding many more special cases.\r\nfunction searchWindowForTransitions(id: string) {\r\n  if (id === 'Africa/El_Aaiun') return DAY_MS * 17;\r\n  if (id === 'America/Argentina/Tucuman') return DAY_MS * 12;\r\n  if (id === 'Europe/Tirane') return DAY_MS * 11;\r\n  if (id === 'Europe/Riga') return DAY_MS * 10;\r\n  if (id === 'Europe/Simferopol' || id === 'Europe/Vienna') return DAY_MS * 9;\r\n  if (id === 'Africa/Tunis') return DAY_MS * 8;\r\n  if (\r\n    id === 'America/Boa_Vista' ||\r\n    id === 'America/Fortaleza' ||\r\n    id === 'America/Maceio' ||\r\n    id === 'America/Noronha' ||\r\n    id === 'America/Recife' ||\r\n    id === 'Asia/Gaza' || // dubious, only in future calculations\r\n    id === 'Asia/Hebron' || // ditto\r\n    id === 'Brazil/DeNoronha'\r\n  ) {\r\n    return DAY_MS * 6;\r\n  }\r\n  return DAY_MS * 19;\r\n}\r\n\r\nexport function GetNamedTimeZoneNextTransition(id: string, epochNanoseconds: bigint): bigint | null {\r\n  if (id === 'UTC') return null; // UTC fast path\r\n\r\n  // Optimization: we floor the instant to the previous millisecond boundary\r\n  // so that we can do Number math instead of BigInt math. This assumes that\r\n  // time zone transitions don't happen in the middle of a millisecond.\r\n  const epochMilliseconds = epochNsToMs(epochNanoseconds, 'floor');\r\n  if (epochMilliseconds < BEFORE_FIRST_DST) {\r\n    return GetNamedTimeZoneNextTransition(id, epochMsToNs(BEFORE_FIRST_DST));\r\n  }\r\n\r\n  // Optimization: the farthest that we'll look for a next transition is 3 years\r\n  // after the later of epochNanoseconds or the current time. If there are no\r\n  // transitions found before then, we'll assume that there will not be any more\r\n  // transitions after that.\r\n  const now = Date.now();\r\n  const base = Math.max(epochMilliseconds, now);\r\n  const uppercap = base + DAY_MS * 366 * 3;\r\n  let leftMs = epochMilliseconds;\r\n  let leftOffsetNs = GetNamedTimeZoneOffsetNanosecondsImpl(id, leftMs);\r\n  let rightMs = leftMs;\r\n  let rightOffsetNs = leftOffsetNs;\r\n  const searchWindow = searchWindowForTransitions(id);\r\n  while (leftOffsetNs === rightOffsetNs && leftMs < uppercap) {\r\n    rightMs = leftMs + searchWindow;\r\n    if (rightMs > MS_MAX) return null;\r\n    rightOffsetNs = GetNamedTimeZoneOffsetNanosecondsImpl(id, rightMs);\r\n    if (leftOffsetNs === rightOffsetNs) {\r\n      leftMs = rightMs;\r\n    }\r\n  }\r\n  if (leftOffsetNs === rightOffsetNs) return null;\r\n  const result = bisect(\r\n    (epochMs: number) => GetNamedTimeZoneOffsetNanosecondsImpl(id, epochMs),\r\n    leftMs,\r\n    rightMs,\r\n    leftOffsetNs,\r\n    rightOffsetNs\r\n  );\r\n  return epochMsToNs(result);\r\n}\r\n\r\nexport function GetNamedTimeZonePreviousTransition(id: string, epochNanoseconds: bigint): bigint | null {\r\n  if (id === 'UTC') return null; // UTC fast path\r\n\r\n  // Optimization: we raise the instant to the next millisecond boundary so\r\n  // that we can do Number math instead of BigInt math. This assumes that time\r\n  // zone transitions don't happen in the middle of a millisecond.\r\n  const epochMilliseconds = epochNsToMs(epochNanoseconds, 'ceil');\r\n\r\n  // Optimization: if the instant is more than 3 years in the future and there\r\n  // are no transitions between the present day and 3 years from now, assume\r\n  // there are none after.\r\n  const now = Date.now();\r\n  const lookahead = now + DAY_MS * 366 * 3;\r\n  if (epochMilliseconds > lookahead) {\r\n    const prevBeforeLookahead = GetNamedTimeZonePreviousTransition(id, epochMsToNs(lookahead));\r\n    if (prevBeforeLookahead === null || prevBeforeLookahead < epochMsToNs(now)) {\r\n      return prevBeforeLookahead;\r\n    }\r\n  }\r\n\r\n  // We assume most time zones either have regular DST rules that extend\r\n  // indefinitely into the future, or they have no DST transitions between now\r\n  // and next year. Africa/Casablanca and Africa/El_Aaiun are unique cases\r\n  // that fit neither of these. Their irregular DST transitions are\r\n  // precomputed until 2087 in the current time zone database, so requesting\r\n  // the previous transition for an instant far in the future may take an\r\n  // extremely long time as it loops backward 2 weeks at a time.\r\n  if (id === 'Africa/Casablanca' || id === 'Africa/El_Aaiun') {\r\n    const lastPrecomputed = Date.UTC(2088, 0, 1); // 2088-01-01T00Z\r\n    if (lastPrecomputed < epochMilliseconds) {\r\n      return GetNamedTimeZonePreviousTransition(id, epochMsToNs(lastPrecomputed));\r\n    }\r\n  }\r\n\r\n  let rightMs = epochMilliseconds - 1;\r\n  if (rightMs < BEFORE_FIRST_DST) return null;\r\n  let rightOffsetNs = GetNamedTimeZoneOffsetNanosecondsImpl(id, rightMs);\r\n  let leftMs = rightMs;\r\n  let leftOffsetNs = rightOffsetNs;\r\n  const searchWindow = searchWindowForTransitions(id);\r\n  while (rightOffsetNs === leftOffsetNs && rightMs > BEFORE_FIRST_DST) {\r\n    leftMs = rightMs - searchWindow;\r\n    if (leftMs < BEFORE_FIRST_DST) return null;\r\n    leftOffsetNs = GetNamedTimeZoneOffsetNanosecondsImpl(id, leftMs);\r\n    if (rightOffsetNs === leftOffsetNs) {\r\n      rightMs = leftMs;\r\n    }\r\n  }\r\n  if (rightOffsetNs === leftOffsetNs) return null;\r\n  const result = bisect(\r\n    (epochMs: number) => GetNamedTimeZoneOffsetNanosecondsImpl(id, epochMs),\r\n    leftMs,\r\n    rightMs,\r\n    leftOffsetNs,\r\n    rightOffsetNs\r\n  );\r\n  return epochMsToNs(result);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove this after tests are converted to TS\r\nexport function parseFromEnUsFormat(datetime: string) {\r\n  const splits = datetime.split(/[^\\w]+/);\r\n\r\n  if (splits.length !== 7) {\r\n    throw new RangeError(`expected 7 parts in \"${datetime}`);\r\n  }\r\n\r\n  const month = +splits[0];\r\n  const day = +splits[1];\r\n  let year = +splits[2];\r\n  const era = splits[3];\r\n  if (era[0] === 'b' || era[0] === 'B') {\r\n    year = -year + 1;\r\n  } else if (era[0] !== 'a' && era[0] !== 'A') {\r\n    throw new RangeError(`Unknown era ${era} in \"${datetime}`);\r\n  }\r\n  const hour = splits[4] === '24' ? 0 : +splits[4]; // bugs.chromium.org/p/chromium/issues/detail?id=1045791\r\n  const minute = +splits[5];\r\n  const second = +splits[6];\r\n\r\n  if (\r\n    !Number.isFinite(year) ||\r\n    !Number.isFinite(month) ||\r\n    !Number.isFinite(day) ||\r\n    !Number.isFinite(hour) ||\r\n    !Number.isFinite(minute) ||\r\n    !Number.isFinite(second)\r\n  ) {\r\n    throw new RangeError(`Invalid number in \"${datetime}`);\r\n  }\r\n\r\n  return { year, month, day, hour, minute, second };\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove this after tests are converted to TS\r\nexport function GetFormatterParts(timeZone: string, epochMilliseconds: number) {\r\n  const formatter = getIntlDateTimeFormatEnUsForTimeZone(timeZone);\r\n  // Using `format` instead of `formatToParts` for compatibility with older\r\n  // clients and because it is twice as fast\r\n  const datetime = formatter.format(epochMilliseconds);\r\n  return parseFromEnUsFormat(datetime);\r\n}\r\n\r\n// The goal of this function is to find the exact time(s) that correspond to a\r\n// calendar date and clock time in a particular time zone. Normally there will\r\n// be only one match. But for repeated clock times after backwards transitions\r\n// (like when DST ends) there may be two matches. And for skipped clock times\r\n// after forward transitions, there will be no matches.\r\nfunction GetNamedTimeZoneEpochNanoseconds(id: string, isoDateTime: ISODateTime) {\r\n  // Get the offset of one day before and after the requested calendar date and\r\n  // clock time, avoiding overflows if near the edge of the Instant range.\r\n  let ns = GetUTCEpochNanoseconds(isoDateTime);\r\n  let nsEarlier = ns - BigInt(DAY_NANOS);\r\n  if (nsEarlier < NS_MIN) nsEarlier = ns;\r\n  let nsLater = ns + BigInt(DAY_NANOS);\r\n  if (nsLater > NS_MAX) nsLater = ns;\r\n  const earlierOffsetNs = GetNamedTimeZoneOffsetNanoseconds(id, nsEarlier);\r\n  const laterOffsetNs = GetNamedTimeZoneOffsetNanoseconds(id, nsLater);\r\n\r\n  // If before and after offsets are the same, then we assume there was no\r\n  // offset transition in between, and therefore only one exact time can\r\n  // correspond to the provided calendar date and clock time. But if they're\r\n  // different, then there was an offset transition in between, so test both\r\n  // offsets to see which one(s) will yield a matching exact time.\r\n  const found = earlierOffsetNs === laterOffsetNs ? [earlierOffsetNs] : [earlierOffsetNs, laterOffsetNs];\r\n  const candidates = found.map((offsetNanoseconds) => {\r\n    const epochNanoseconds = ns - BigInt(offsetNanoseconds);\r\n    const parts = GetNamedTimeZoneDateTimeParts(id, epochNanoseconds);\r\n    if (CompareISODateTime(isoDateTime, parts) !== 0) return undefined;\r\n    ValidateEpochNanoseconds(epochNanoseconds);\r\n    return epochNanoseconds;\r\n  });\r\n  return candidates.filter((x) => x !== undefined) as bigint[];\r\n}\r\n\r\nexport function LeapYear(year: number) {\r\n  if (undefined === year) return false;\r\n  const isDiv4 = year % 4 === 0;\r\n  const isDiv100 = year % 100 === 0;\r\n  const isDiv400 = year % 400 === 0;\r\n  return isDiv4 && (!isDiv100 || isDiv400);\r\n}\r\n\r\nexport function ISODaysInMonth(year: number, month: number) {\r\n  const DoM = {\r\n    standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n    leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\n  };\r\n  return DoM[LeapYear(year) ? 'leapyear' : 'standard'][month - 1];\r\n}\r\n\r\nexport function DurationSign(duration: Temporal.Duration) {\r\n  const fields = [\r\n    GetSlot(duration, YEARS),\r\n    GetSlot(duration, MONTHS),\r\n    GetSlot(duration, WEEKS),\r\n    GetSlot(duration, DAYS),\r\n    GetSlot(duration, HOURS),\r\n    GetSlot(duration, MINUTES),\r\n    GetSlot(duration, SECONDS),\r\n    GetSlot(duration, MILLISECONDS),\r\n    GetSlot(duration, MICROSECONDS),\r\n    GetSlot(duration, NANOSECONDS)\r\n  ];\r\n  for (let index = 0; index < fields.length; index++) {\r\n    const prop = fields[index];\r\n    if (prop !== 0) return prop < 0 ? -1 : 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction DateDurationSign(dateDuration: DateDuration) {\r\n  const fieldNames = ['years', 'months', 'weeks', 'days'] as const;\r\n  for (let index = 0; index < fieldNames.length; index++) {\r\n    const prop = dateDuration[fieldNames[index]];\r\n    if (prop !== 0) return prop < 0 ? -1 : 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction InternalDurationSign(duration: InternalDuration) {\r\n  const dateSign = DateDurationSign(duration.date);\r\n  if (dateSign !== 0) return dateSign;\r\n  return duration.time.sign();\r\n}\r\n\r\nexport function BalanceISOYearMonth(yearParam: number, monthParam: number) {\r\n  let year = yearParam;\r\n  let month = monthParam;\r\n  if (!Number.isFinite(year) || !Number.isFinite(month)) throw new RangeError('infinity is out of range');\r\n  month -= 1;\r\n  year += Math.floor(month / 12);\r\n  month %= 12;\r\n  if (month < 0) month += 12;\r\n  month += 1;\r\n  return { year, month };\r\n}\r\n\r\nexport function BalanceISODate(yearParam: number, monthParam: number, dayParam: number) {\r\n  let year = yearParam;\r\n  let month = monthParam;\r\n  let day = dayParam;\r\n  if (!Number.isFinite(day)) throw new RangeError('infinity is out of range');\r\n  ({ year, month } = BalanceISOYearMonth(year, month));\r\n\r\n  // The pattern of leap years in the ISO 8601 calendar repeats every 400\r\n  // years. So if we have more than 400 years in days, there's no need to\r\n  // convert days to a year 400 times. We can convert a multiple of 400 all at\r\n  // once.\r\n  const daysIn400YearCycle = 400 * 365 + 97;\r\n  if (Math.abs(day) > daysIn400YearCycle) {\r\n    const nCycles = Math.trunc(day / daysIn400YearCycle);\r\n    year += 400 * nCycles;\r\n    day -= nCycles * daysIn400YearCycle;\r\n  }\r\n\r\n  let daysInYear = 0;\r\n  let testYear = month > 2 ? year : year - 1;\r\n  while (((daysInYear = LeapYear(testYear) ? 366 : 365), day < -daysInYear)) {\r\n    year -= 1;\r\n    testYear -= 1;\r\n    day += daysInYear;\r\n  }\r\n  testYear += 1;\r\n  while (((daysInYear = LeapYear(testYear) ? 366 : 365), day > daysInYear)) {\r\n    year += 1;\r\n    testYear += 1;\r\n    day -= daysInYear;\r\n  }\r\n\r\n  while (day < 1) {\r\n    ({ year, month } = BalanceISOYearMonth(year, month - 1));\r\n    day += ISODaysInMonth(year, month);\r\n  }\r\n  while (day > ISODaysInMonth(year, month)) {\r\n    day -= ISODaysInMonth(year, month);\r\n    ({ year, month } = BalanceISOYearMonth(year, month + 1));\r\n  }\r\n\r\n  return { year, month, day };\r\n}\r\n\r\nfunction BalanceISODateTime(\r\n  year: number,\r\n  month: number,\r\n  day: number,\r\n  hour: number,\r\n  minute: number,\r\n  second: number,\r\n  millisecond: number,\r\n  microsecond: number,\r\n  nanosecond: number\r\n) {\r\n  const time = BalanceTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n  const isoDate = BalanceISODate(year, month, day + time.deltaDays);\r\n  return CombineISODateAndTimeRecord(isoDate, time);\r\n}\r\n\r\nfunction BalanceTime(\r\n  hourParam: number,\r\n  minuteParam: number,\r\n  secondParam: number,\r\n  millisecondParam: number,\r\n  microsecondParam: number,\r\n  nanosecondParam: number\r\n) {\r\n  let hour = hourParam;\r\n  let minute = minuteParam;\r\n  let second = secondParam;\r\n  let millisecond = millisecondParam;\r\n  let microsecond = microsecondParam;\r\n  let nanosecond = nanosecondParam;\r\n  let div;\r\n\r\n  ({ div, mod: nanosecond } = TruncatingDivModByPowerOf10(nanosecond, 3));\r\n  microsecond += div;\r\n  if (nanosecond < 0) {\r\n    microsecond -= 1;\r\n    nanosecond += 1000;\r\n  }\r\n\r\n  ({ div, mod: microsecond } = TruncatingDivModByPowerOf10(microsecond, 3));\r\n  millisecond += div;\r\n  if (microsecond < 0) {\r\n    millisecond -= 1;\r\n    microsecond += 1000;\r\n  }\r\n\r\n  second += Math.trunc(millisecond / 1000);\r\n  millisecond %= 1000;\r\n  if (millisecond < 0) {\r\n    second -= 1;\r\n    millisecond += 1000;\r\n  }\r\n\r\n  minute += Math.trunc(second / 60);\r\n  second %= 60;\r\n  if (second < 0) {\r\n    minute -= 1;\r\n    second += 60;\r\n  }\r\n\r\n  hour += Math.trunc(minute / 60);\r\n  minute %= 60;\r\n  if (minute < 0) {\r\n    hour -= 1;\r\n    minute += 60;\r\n  }\r\n\r\n  let deltaDays = Math.trunc(hour / 24);\r\n  hour %= 24;\r\n  if (hour < 0) {\r\n    deltaDays -= 1;\r\n    hour += 24;\r\n  }\r\n\r\n  // Results are possibly -0 at this point, but these are mathematical values in\r\n  // the spec. Force -0 to +0.\r\n  deltaDays += 0;\r\n  hour += 0;\r\n  minute += 0;\r\n  second += 0;\r\n  millisecond += 0;\r\n  microsecond += 0;\r\n  nanosecond += 0;\r\n\r\n  return { deltaDays, hour, minute, second, millisecond, microsecond, nanosecond };\r\n}\r\n\r\nexport function DateDurationDays(dateDuration: DateDuration, plainRelativeTo: Temporal.PlainDate) {\r\n  const yearsMonthsWeeksDuration = AdjustDateDurationRecord(dateDuration, 0);\r\n  if (DateDurationSign(yearsMonthsWeeksDuration) === 0) return dateDuration.days;\r\n\r\n  // balance years, months, and weeks down to days\r\n  const isoDate = GetSlot(plainRelativeTo, ISO_DATE);\r\n  const later = CalendarDateAdd(GetSlot(plainRelativeTo, CALENDAR), isoDate, yearsMonthsWeeksDuration, 'constrain');\r\n  const epochDaysEarlier = ISODateToEpochDays(isoDate.year, isoDate.month - 1, isoDate.day);\r\n  const epochDaysLater = ISODateToEpochDays(later.year, later.month - 1, later.day);\r\n  const yearsMonthsWeeksInDays = epochDaysLater - epochDaysEarlier;\r\n  return dateDuration.days + yearsMonthsWeeksInDays;\r\n}\r\n\r\nexport function CreateNegatedTemporalDuration(duration: Temporal.Duration) {\r\n  const TemporalDuration = GetIntrinsic('%Temporal.Duration%');\r\n  return new TemporalDuration(\r\n    -GetSlot(duration, YEARS),\r\n    -GetSlot(duration, MONTHS),\r\n    -GetSlot(duration, WEEKS),\r\n    -GetSlot(duration, DAYS),\r\n    -GetSlot(duration, HOURS),\r\n    -GetSlot(duration, MINUTES),\r\n    -GetSlot(duration, SECONDS),\r\n    -GetSlot(duration, MILLISECONDS),\r\n    -GetSlot(duration, MICROSECONDS),\r\n    -GetSlot(duration, NANOSECONDS)\r\n  );\r\n}\r\n\r\nexport function ConstrainToRange(value: number | undefined, min: number, max: number) {\r\n  // Math.Max accepts undefined values and returns NaN. Undefined values are\r\n  // used for optional params in the method below.\r\n  return Math.min(max, Math.max(min, value as number));\r\n}\r\nexport function ConstrainISODate(year: number, monthParam: number, dayParam?: number) {\r\n  const month = ConstrainToRange(monthParam, 1, 12);\r\n  const day = ConstrainToRange(dayParam, 1, ISODaysInMonth(year, month));\r\n  return { year, month, day };\r\n}\r\n\r\nexport function RejectToRange(value: number, min: number, max: number) {\r\n  if (value < min || value > max) throw new RangeError(`value out of range: ${min} <= ${value} <= ${max}`);\r\n}\r\n\r\nexport function RejectISODate(year: number, month: number, day: number) {\r\n  RejectToRange(month, 1, 12);\r\n  RejectToRange(day, 1, ISODaysInMonth(year, month));\r\n}\r\n\r\nfunction RejectDateRange(isoDate: ISODate) {\r\n  // Noon avoids trouble at edges of DateTime range (excludes midnight)\r\n  RejectDateTimeRange(CombineISODateAndTimeRecord(isoDate, NoonTimeRecord()));\r\n}\r\n\r\nexport function RejectTime(\r\n  hour: number,\r\n  minute: number,\r\n  second: number,\r\n  millisecond: number,\r\n  microsecond: number,\r\n  nanosecond: number\r\n) {\r\n  RejectToRange(hour, 0, 23);\r\n  RejectToRange(minute, 0, 59);\r\n  RejectToRange(second, 0, 59);\r\n  RejectToRange(millisecond, 0, 999);\r\n  RejectToRange(microsecond, 0, 999);\r\n  RejectToRange(nanosecond, 0, 999);\r\n}\r\n\r\nexport function RejectDateTime(\r\n  year: number,\r\n  month: number,\r\n  day: number,\r\n  hour: number,\r\n  minute: number,\r\n  second: number,\r\n  millisecond: number,\r\n  microsecond: number,\r\n  nanosecond: number\r\n) {\r\n  RejectISODate(year, month, day);\r\n  RejectTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n}\r\n\r\nexport function RejectDateTimeRange(isoDateTime: ISODateTime) {\r\n  const ns = GetUTCEpochNanoseconds(isoDateTime);\r\n  if (ns < DATETIME_NS_MIN || ns > DATETIME_NS_MAX) {\r\n    // Because PlainDateTime's range is wider than Instant's range, the line\r\n    // below will always throw. Calling `ValidateEpochNanoseconds` avoids\r\n    // repeating the same error message twice.\r\n    ValidateEpochNanoseconds(ns);\r\n  }\r\n}\r\n\r\n// Same as above, but throws a different, non-user-facing error\r\nfunction AssertISODateTimeWithinLimits(isoDateTime: ISODateTime) {\r\n  const ns = GetUTCEpochNanoseconds(isoDateTime);\r\n  assert(\r\n    ns >= DATETIME_NS_MIN && ns <= DATETIME_NS_MAX,\r\n    `${ISODateTimeToString(isoDateTime, 'iso8601', 'auto')} is outside the representable range`\r\n  );\r\n}\r\n\r\n// In the spec, IsValidEpochNanoseconds returns a boolean and call sites are\r\n// responsible for throwing. In the polyfill, ValidateEpochNanoseconds takes its\r\n// place so that we can DRY the throwing code.\r\nfunction ValidateEpochNanoseconds(epochNanoseconds: bigint) {\r\n  if (epochNanoseconds < NS_MIN || epochNanoseconds > NS_MAX) {\r\n    throw new RangeError('date/time value is outside of supported range');\r\n  }\r\n}\r\n\r\nfunction RejectYearMonthRange({ year, month }: Omit<ISODate, 'day'>) {\r\n  RejectToRange(year, YEAR_MIN, YEAR_MAX);\r\n  if (year === YEAR_MIN) {\r\n    RejectToRange(month, 4, 12);\r\n  } else if (year === YEAR_MAX) {\r\n    RejectToRange(month, 1, 9);\r\n  }\r\n}\r\n\r\nexport function RejectDuration(\r\n  y: number,\r\n  mon: number,\r\n  w: number,\r\n  d: number,\r\n  h: number,\r\n  min: number,\r\n  s: number,\r\n  ms: number,\r\n  µs: number,\r\n  ns: number\r\n) {\r\n  let sign: -1 | 0 | 1 = 0;\r\n  const fields = [y, mon, w, d, h, min, s, ms, µs, ns];\r\n  for (let index = 0; index < fields.length; index++) {\r\n    const prop = fields[index];\r\n    if (prop === Infinity || prop === -Infinity) throw new RangeError('infinite values not allowed as duration fields');\r\n    if (prop !== 0) {\r\n      const propSign = prop < 0 ? -1 : 1;\r\n      if (sign !== 0 && propSign !== sign) throw new RangeError('mixed-sign values not allowed as duration fields');\r\n      sign = propSign;\r\n    }\r\n  }\r\n  if (Math.abs(y) >= 2 ** 32 || Math.abs(mon) >= 2 ** 32 || Math.abs(w) >= 2 ** 32) {\r\n    throw new RangeError('years, months, and weeks must be < 2³²');\r\n  }\r\n  const msResult = TruncatingDivModByPowerOf10(ms, 3);\r\n  const µsResult = TruncatingDivModByPowerOf10(µs, 6);\r\n  const nsResult = TruncatingDivModByPowerOf10(ns, 9);\r\n  const remainderSec = TruncatingDivModByPowerOf10(msResult.mod * 1e6 + µsResult.mod * 1e3 + nsResult.mod, 9).div;\r\n  const totalSec = d * 86400 + h * 3600 + min * 60 + s + msResult.div + µsResult.div + nsResult.div + remainderSec;\r\n  if (!Number.isSafeInteger(totalSec)) {\r\n    throw new RangeError('total of duration time units cannot exceed 9007199254740991.999999999 s');\r\n  }\r\n}\r\n\r\nexport function ToInternalDurationRecord(duration: Temporal.Duration) {\r\n  const date = {\r\n    years: GetSlot(duration, YEARS),\r\n    months: GetSlot(duration, MONTHS),\r\n    weeks: GetSlot(duration, WEEKS),\r\n    days: GetSlot(duration, DAYS)\r\n  };\r\n  const time = TimeDuration.fromComponents(\r\n    GetSlot(duration, HOURS),\r\n    GetSlot(duration, MINUTES),\r\n    GetSlot(duration, SECONDS),\r\n    GetSlot(duration, MILLISECONDS),\r\n    GetSlot(duration, MICROSECONDS),\r\n    GetSlot(duration, NANOSECONDS)\r\n  );\r\n  return { date, time };\r\n}\r\n\r\nexport function ToInternalDurationRecordWith24HourDays(duration: Temporal.Duration) {\r\n  const time = TimeDuration.fromComponents(\r\n    GetSlot(duration, HOURS),\r\n    GetSlot(duration, MINUTES),\r\n    GetSlot(duration, SECONDS),\r\n    GetSlot(duration, MILLISECONDS),\r\n    GetSlot(duration, MICROSECONDS),\r\n    GetSlot(duration, NANOSECONDS)\r\n  ).add24HourDays(GetSlot(duration, DAYS));\r\n  const date = {\r\n    years: GetSlot(duration, YEARS),\r\n    months: GetSlot(duration, MONTHS),\r\n    weeks: GetSlot(duration, WEEKS),\r\n    days: 0\r\n  };\r\n  return { date, time };\r\n}\r\n\r\nfunction ToDateDurationRecordWithoutTime(duration: Temporal.Duration) {\r\n  const internalDuration = ToInternalDurationRecordWith24HourDays(duration);\r\n  const days = Math.trunc(internalDuration.time.sec / 86400);\r\n  RejectDuration(\r\n    internalDuration.date.years,\r\n    internalDuration.date.months,\r\n    internalDuration.date.weeks,\r\n    days,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    0\r\n  );\r\n  return { ...internalDuration.date, days };\r\n}\r\n\r\nexport function TemporalDurationFromInternal(internalDuration: InternalDuration, largestUnit: Temporal.DateTimeUnit) {\r\n  const sign = internalDuration.time.sign();\r\n  let nanoseconds = internalDuration.time.abs().subsec;\r\n  let microseconds = 0;\r\n  let milliseconds = 0;\r\n  let seconds = internalDuration.time.abs().sec;\r\n  let minutes = 0;\r\n  let hours = 0;\r\n  let days = 0;\r\n\r\n  switch (largestUnit) {\r\n    case 'year':\r\n    case 'month':\r\n    case 'week':\r\n    case 'day':\r\n      microseconds = Math.trunc(nanoseconds / 1000);\r\n      nanoseconds %= 1000;\r\n      milliseconds = Math.trunc(microseconds / 1000);\r\n      microseconds %= 1000;\r\n      seconds += Math.trunc(milliseconds / 1000);\r\n      milliseconds %= 1000;\r\n      minutes = Math.trunc(seconds / 60);\r\n      seconds %= 60;\r\n      hours = Math.trunc(minutes / 60);\r\n      minutes %= 60;\r\n      days = Math.trunc(hours / 24);\r\n      hours %= 24;\r\n      break;\r\n    case 'hour':\r\n      microseconds = Math.trunc(nanoseconds / 1000);\r\n      nanoseconds %= 1000;\r\n      milliseconds = Math.trunc(microseconds / 1000);\r\n      microseconds %= 1000;\r\n      seconds += Math.trunc(milliseconds / 1000);\r\n      milliseconds %= 1000;\r\n      minutes = Math.trunc(seconds / 60);\r\n      seconds %= 60;\r\n      hours = Math.trunc(minutes / 60);\r\n      minutes %= 60;\r\n      break;\r\n    case 'minute':\r\n      microseconds = Math.trunc(nanoseconds / 1000);\r\n      nanoseconds %= 1000;\r\n      milliseconds = Math.trunc(microseconds / 1000);\r\n      microseconds %= 1000;\r\n      seconds += Math.trunc(milliseconds / 1000);\r\n      milliseconds %= 1000;\r\n      minutes = Math.trunc(seconds / 60);\r\n      seconds %= 60;\r\n      break;\r\n    case 'second':\r\n      microseconds = Math.trunc(nanoseconds / 1000);\r\n      nanoseconds %= 1000;\r\n      milliseconds = Math.trunc(microseconds / 1000);\r\n      microseconds %= 1000;\r\n      seconds += Math.trunc(milliseconds / 1000);\r\n      milliseconds %= 1000;\r\n      break;\r\n    case 'millisecond':\r\n      microseconds = Math.trunc(nanoseconds / 1000);\r\n      nanoseconds %= 1000;\r\n      milliseconds = FMAPowerOf10(seconds, 3, Math.trunc(microseconds / 1000));\r\n      microseconds %= 1000;\r\n      seconds = 0;\r\n      break;\r\n    case 'microsecond':\r\n      microseconds = FMAPowerOf10(seconds, 6, Math.trunc(nanoseconds / 1000));\r\n      nanoseconds %= 1000;\r\n      seconds = 0;\r\n      break;\r\n    case 'nanosecond':\r\n      nanoseconds = FMAPowerOf10(seconds, 9, nanoseconds);\r\n      seconds = 0;\r\n      break;\r\n    default:\r\n      /* c8 ignore next */ assertNotReached();\r\n  }\r\n\r\n  const TemporalDuration = GetIntrinsic('%Temporal.Duration%');\r\n  return new TemporalDuration(\r\n    internalDuration.date.years,\r\n    internalDuration.date.months,\r\n    internalDuration.date.weeks,\r\n    internalDuration.date.days + sign * days,\r\n    sign * hours,\r\n    sign * minutes,\r\n    sign * seconds,\r\n    sign * milliseconds,\r\n    sign * microseconds,\r\n    sign * nanoseconds\r\n  );\r\n}\r\n\r\nexport function CombineDateAndTimeDuration(dateDuration: DateDuration, timeDuration: TimeDuration) {\r\n  const dateSign = DateDurationSign(dateDuration);\r\n  const timeSign = timeDuration.sign();\r\n  assert(\r\n    dateSign === 0 || timeSign === 0 || dateSign === timeSign,\r\n    'should not be able to create mixed sign duration fields here'\r\n  );\r\n  return { date: dateDuration, time: timeDuration };\r\n}\r\n\r\n// Caution: month is 0-based\r\nexport function ISODateToEpochDays(year: number, month: number, day: number) {\r\n  return (\r\n    GetUTCEpochMilliseconds({\r\n      isoDate: { year, month: month + 1, day },\r\n      time: { hour: 0, minute: 0, second: 0, millisecond: 0 }\r\n    }) / DAY_MS\r\n  );\r\n}\r\n\r\n// This is needed before calling GetUTCEpochNanoseconds, because it uses MakeDay\r\n// which is ill-defined in how it handles large year numbers. If the issue\r\n// https://github.com/tc39/ecma262/issues/1087 is fixed, this can be removed\r\n// with no observable changes.\r\nfunction CheckISODaysRange({ year, month, day }: ISODate) {\r\n  if (Math.abs(ISODateToEpochDays(year, month - 1, day)) > 1e8) {\r\n    throw new RangeError('date/time value is outside the supported range');\r\n  }\r\n}\r\n\r\nfunction DifferenceTime(time1: TimeRecord, time2: TimeRecord) {\r\n  const hours = time2.hour - time1.hour;\r\n  const minutes = time2.minute - time1.minute;\r\n  const seconds = time2.second - time1.second;\r\n  const milliseconds = time2.millisecond - time1.millisecond;\r\n  const microseconds = time2.microsecond - time1.microsecond;\r\n  const nanoseconds = time2.nanosecond - time1.nanosecond;\r\n  const timeDuration = TimeDuration.fromComponents(hours, minutes, seconds, milliseconds, microseconds, nanoseconds);\r\n  assert(timeDuration.abs().sec < 86400, '_bt_.[[Days]] should be 0');\r\n  return timeDuration;\r\n}\r\n\r\nfunction DifferenceInstant(\r\n  ns1: bigint,\r\n  ns2: bigint,\r\n  increment: number,\r\n  smallestUnit: Temporal.TimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  let timeDuration = TimeDuration.fromEpochNsDiff(ns2, ns1);\r\n  timeDuration = RoundTimeDuration(timeDuration, increment, smallestUnit, roundingMode);\r\n  return CombineDateAndTimeDuration(ZeroDateDuration(), timeDuration);\r\n}\r\n\r\nfunction DifferenceISODateTime(\r\n  isoDateTime1: ISODateTime,\r\n  isoDateTime2: ISODateTime,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnit: Temporal.DateTimeUnit\r\n) {\r\n  AssertISODateTimeWithinLimits(isoDateTime1);\r\n  AssertISODateTimeWithinLimits(isoDateTime2);\r\n  let timeDuration = DifferenceTime(isoDateTime1.time, isoDateTime2.time);\r\n\r\n  const timeSign = timeDuration.sign();\r\n  const dateSign = CompareISODate(isoDateTime1.isoDate, isoDateTime2.isoDate);\r\n\r\n  // back-off a day from date2 so that the signs of the date and time diff match\r\n  let adjustedDate = isoDateTime2.isoDate;\r\n  if (dateSign === timeSign) {\r\n    adjustedDate = BalanceISODate(adjustedDate.year, adjustedDate.month, adjustedDate.day + timeSign);\r\n    timeDuration = timeDuration.add24HourDays(-timeSign);\r\n  }\r\n\r\n  const dateLargestUnit = LargerOfTwoTemporalUnits('day', largestUnit) as Temporal.DateUnit;\r\n  const dateDifference = CalendarDateUntil(calendar, isoDateTime1.isoDate, adjustedDate, dateLargestUnit);\r\n  if (largestUnit !== dateLargestUnit) {\r\n    // largestUnit < days, so add the days in to the internal duration\r\n    timeDuration = timeDuration.add24HourDays(dateDifference.days);\r\n    dateDifference.days = 0;\r\n  }\r\n  return CombineDateAndTimeDuration(dateDifference, timeDuration);\r\n}\r\n\r\nfunction DifferenceZonedDateTime(\r\n  ns1: bigint,\r\n  ns2: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnit: Temporal.DateTimeUnit\r\n) {\r\n  const nsDiff = ns2 - ns1;\r\n  if (nsDiff === ZERO) return { date: ZeroDateDuration(), time: TimeDuration.ZERO };\r\n  const sign = nsDiff < 0n ? -1 : 1;\r\n\r\n  // Convert start/end instants to datetimes\r\n  const isoDtStart = GetISODateTimeFor(timeZone, ns1);\r\n  const isoDtEnd = GetISODateTimeFor(timeZone, ns2);\r\n\r\n  // Simulate moving ns1 as many years/months/weeks/days as possible without\r\n  // surpassing ns2. This value is stored in intermediateDateTime/intermediateInstant/intermediateNs.\r\n  // We do not literally move years/months/weeks/days with calendar arithmetic,\r\n  // but rather assume intermediateDateTime will have the same time-parts as\r\n  // dtStart and the date-parts from dtEnd, and move backward from there.\r\n  // The number of days we move backward is stored in dayCorrection.\r\n  // Credit to Adam Shaw for devising this algorithm.\r\n  let dayCorrection = 0;\r\n  let intermediateDateTime: ISODateTime | undefined;\r\n\r\n  // The max number of allowed day corrections depends on the direction of travel.\r\n  // Both directions allow for 1 day correction due to an ISO wall-clock overshoot (see below).\r\n  // Only the forward direction allows for an additional 1 day correction caused by a push-forward\r\n  // 'compatible' DST transition causing the wall-clock to overshoot again.\r\n  // This max value is inclusive.\r\n  let maxDayCorrection = sign === 1 ? 2 : 1;\r\n\r\n  // Detect ISO wall-clock overshoot.\r\n  // If the diff of the ISO wall-clock times is opposite to the overall diff's sign,\r\n  // we are guaranteed to need at least one day correction.\r\n  let timeDuration = DifferenceTime(isoDtStart.time, isoDtEnd.time);\r\n  if (timeDuration.sign() === -sign) {\r\n    dayCorrection++;\r\n  }\r\n\r\n  for (; dayCorrection <= maxDayCorrection; dayCorrection++) {\r\n    const intermediateDate = BalanceISODate(\r\n      isoDtEnd.isoDate.year,\r\n      isoDtEnd.isoDate.month,\r\n      isoDtEnd.isoDate.day - dayCorrection * sign\r\n    );\r\n\r\n    // Incorporate time parts from dtStart\r\n    intermediateDateTime = CombineISODateAndTimeRecord(intermediateDate, isoDtStart.time);\r\n\r\n    // Convert intermediate datetime to epoch-nanoseconds (may disambiguate)\r\n    const intermediateNs = GetEpochNanosecondsFor(timeZone, intermediateDateTime, 'compatible');\r\n\r\n    // Compute the nanosecond diff between the intermediate instant and the final destination\r\n    timeDuration = TimeDuration.fromEpochNsDiff(ns2, intermediateNs);\r\n\r\n    // Did intermediateNs NOT surpass ns2?\r\n    // If so, exit the loop with success (without incrementing dayCorrection past maxDayCorrection)\r\n    if (timeDuration.sign() !== -sign) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  assert(dayCorrection <= maxDayCorrection, `more than ${maxDayCorrection} day correction needed`);\r\n\r\n  // Output of the above loop\r\n  assertExists(intermediateDateTime);\r\n\r\n  // Similar to what happens in DifferenceISODateTime with date parts only:\r\n  const dateLargestUnit = LargerOfTwoTemporalUnits('day', largestUnit) as Temporal.DateUnit;\r\n  const dateDifference = CalendarDateUntil(calendar, isoDtStart.isoDate, intermediateDateTime.isoDate, dateLargestUnit);\r\n  return CombineDateAndTimeDuration(dateDifference, timeDuration);\r\n}\r\n\r\n// Epoch-nanosecond bounding technique where the start/end of the calendar-unit\r\n// interval are converted to epoch-nanosecond times and destEpochNs is nudged to\r\n// either one.\r\nfunction NudgeToCalendarUnit(\r\n  sign: -1 | 1,\r\n  durationParam: InternalDuration,\r\n  destEpochNs: bigint,\r\n  isoDateTime: ISODateTime,\r\n  timeZone: string | null,\r\n  calendar: BuiltinCalendarId,\r\n  increment: number,\r\n  unit: Temporal.DateUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  // unit must be day, week, month, or year\r\n  // timeZone may be undefined\r\n  let duration = durationParam;\r\n\r\n  // Create a duration with smallestUnit trunc'd towards zero\r\n  // Create a separate duration that incorporates roundingIncrement\r\n  let r1, r2, startDuration, endDuration;\r\n  switch (unit) {\r\n    case 'year': {\r\n      const years = RoundNumberToIncrement(duration.date.years, increment, 'trunc');\r\n      r1 = years;\r\n      r2 = years + increment * sign;\r\n      startDuration = { years: r1, months: 0, weeks: 0, days: 0 };\r\n      endDuration = { ...startDuration, years: r2 };\r\n      break;\r\n    }\r\n    case 'month': {\r\n      const months = RoundNumberToIncrement(duration.date.months, increment, 'trunc');\r\n      r1 = months;\r\n      r2 = months + increment * sign;\r\n      startDuration = AdjustDateDurationRecord(duration.date, 0, 0, r1);\r\n      endDuration = AdjustDateDurationRecord(duration.date, 0, 0, r2);\r\n      break;\r\n    }\r\n    case 'week': {\r\n      const yearsMonths = AdjustDateDurationRecord(duration.date, 0, 0);\r\n      const weeksStart = CalendarDateAdd(calendar, isoDateTime.isoDate, yearsMonths, 'constrain');\r\n      const weeksEnd = BalanceISODate(weeksStart.year, weeksStart.month, weeksStart.day + duration.date.days);\r\n      const untilResult = CalendarDateUntil(calendar, weeksStart, weeksEnd, 'week');\r\n      const weeks = RoundNumberToIncrement(duration.date.weeks + untilResult.weeks, increment, 'trunc');\r\n      r1 = weeks;\r\n      r2 = weeks + increment * sign;\r\n      startDuration = AdjustDateDurationRecord(duration.date, 0, r1);\r\n      endDuration = AdjustDateDurationRecord(duration.date, 0, r2);\r\n      break;\r\n    }\r\n    case 'day': {\r\n      const days = RoundNumberToIncrement(duration.date.days, increment, 'trunc');\r\n      r1 = days;\r\n      r2 = days + increment * sign;\r\n      startDuration = AdjustDateDurationRecord(duration.date, r1);\r\n      endDuration = AdjustDateDurationRecord(duration.date, r2);\r\n      break;\r\n    }\r\n    default:\r\n      /* c8 ignore next */ assertNotReached();\r\n  }\r\n\r\n  if (sign === 1) assert(r1 >= 0 && r1 < r2, `positive ordering of r1, r2: 0 ≤ ${r1} < ${r2}`);\r\n  if (sign === -1) assert(r1 <= 0 && r1 > r2, `negative ordering of r1, r2: 0 ≥ ${r1} > ${r2}`);\r\n\r\n  // Apply to origin, output PlainDateTimes\r\n  const start = CalendarDateAdd(calendar, isoDateTime.isoDate, startDuration, 'constrain');\r\n  const end = CalendarDateAdd(calendar, isoDateTime.isoDate, endDuration, 'constrain');\r\n\r\n  // Convert to epoch-nanoseconds\r\n  let startEpochNs, endEpochNs;\r\n  const startDateTime = CombineISODateAndTimeRecord(start, isoDateTime.time);\r\n  const endDateTime = CombineISODateAndTimeRecord(end, isoDateTime.time);\r\n  if (timeZone) {\r\n    startEpochNs = GetEpochNanosecondsFor(timeZone, startDateTime, 'compatible');\r\n    endEpochNs = GetEpochNanosecondsFor(timeZone, endDateTime, 'compatible');\r\n  } else {\r\n    startEpochNs = GetUTCEpochNanoseconds(startDateTime);\r\n    endEpochNs = GetUTCEpochNanoseconds(endDateTime);\r\n  }\r\n\r\n  // Round the smallestUnit within the epoch-nanosecond span\r\n  if (sign === 1) {\r\n    assert(\r\n      startEpochNs <= destEpochNs && destEpochNs <= endEpochNs,\r\n      `${unit} was 0 days long`\r\n    );\r\n  }\r\n  if (sign === -1) {\r\n    assert(\r\n      endEpochNs <= destEpochNs && destEpochNs <= startEpochNs,\r\n      `${unit} was 0 days long`\r\n    );\r\n  }\r\n  assert(endEpochNs !== startEpochNs, 'startEpochNs must ≠ endEpochNs');\r\n  const numerator = TimeDuration.fromEpochNsDiff(destEpochNs, startEpochNs);\r\n  const denominator = TimeDuration.fromEpochNsDiff(endEpochNs, startEpochNs);\r\n  const unsignedRoundingMode = GetUnsignedRoundingMode(roundingMode, sign < 0 ? 'negative' : 'positive');\r\n  const cmp = numerator.add(numerator).abs().subtract(denominator.abs()).sign();\r\n  const even = (Math.abs(r1) / increment) % 2 === 0;\r\n  // prettier-ignore\r\n  const roundedUnit = numerator.isZero()\r\n    ? Math.abs(r1)\r\n    : !numerator.cmp(denominator) // equal?\r\n      ? Math.abs(r2)\r\n      : ApplyUnsignedRoundingMode(Math.abs(r1), Math.abs(r2), cmp, even, unsignedRoundingMode);\r\n\r\n  // Trick to minimize rounding error, due to the lack of fma() in JS\r\n  const fakeNumerator = new TimeDuration(\r\n    BigInt(denominator.totalNs) * BigInt(r1) + BigInt(numerator.totalNs) * BigInt(increment * sign)\r\n  );\r\n  const total = fakeNumerator.fdiv(denominator.totalNs);\r\n  assert(Math.abs(r1) <= Math.abs(total) && Math.abs(total) <= Math.abs(r2), 'r1 ≤ total ≤ r2');\r\n\r\n  // Determine whether expanded or contracted\r\n  const didExpandCalendarUnit = roundedUnit === Math.abs(r2);\r\n  duration = { date: didExpandCalendarUnit ? endDuration : startDuration, time: TimeDuration.ZERO };\r\n\r\n  const nudgeResult = {\r\n    duration,\r\n    nudgedEpochNs: didExpandCalendarUnit ? endEpochNs : startEpochNs,\r\n    didExpandCalendarUnit\r\n  };\r\n  return { nudgeResult, total };\r\n}\r\n\r\n// Attempts rounding of time units within a time zone's day, but if the rounding\r\n// causes time to exceed the total time within the day, rerun rounding in next\r\n// day.\r\nfunction NudgeToZonedTime(\r\n  sign: -1 | 1,\r\n  durationParam: InternalDuration,\r\n  isoDateTime: ISODateTime,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId,\r\n  increment: number,\r\n  unit: Temporal.TimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  // unit must be hour or smaller\r\n  let duration = durationParam;\r\n\r\n  // Apply to origin, output start/end of the day as PlainDateTimes\r\n  const start = CalendarDateAdd(calendar, isoDateTime.isoDate, duration.date, 'constrain');\r\n  const startDateTime = CombineISODateAndTimeRecord(start, isoDateTime.time);\r\n  const endDate = BalanceISODate(start.year, start.month, start.day + sign);\r\n  const endDateTime = CombineISODateAndTimeRecord(endDate, isoDateTime.time);\r\n\r\n  // Compute the epoch-nanosecond start/end of the final whole-day interval\r\n  // If duration has negative sign, startEpochNs will be after endEpochNs\r\n  const startEpochNs = GetEpochNanosecondsFor(timeZone, startDateTime, 'compatible');\r\n  const endEpochNs = GetEpochNanosecondsFor(timeZone, endDateTime, 'compatible');\r\n\r\n  // The signed amount of time from the start of the whole-day interval to the end\r\n  const daySpan = TimeDuration.fromEpochNsDiff(endEpochNs, startEpochNs);\r\n  if (daySpan.sign() !== sign) throw new RangeError('time zone returned inconsistent Instants');\r\n\r\n  // Compute time parts of the duration to nanoseconds and round\r\n  // Result could be negative\r\n  const unitIncrement = BigInt(NS_PER_TIME_UNIT[unit] * increment);\r\n  let roundedTimeDuration = duration.time.round(unitIncrement, roundingMode);\r\n\r\n  // Does the rounded time exceed the time-in-day?\r\n  const beyondDaySpan = roundedTimeDuration.subtract(daySpan);\r\n  const didRoundBeyondDay = beyondDaySpan.sign() !== -sign;\r\n\r\n  let dayDelta, nudgedEpochNs;\r\n  if (didRoundBeyondDay) {\r\n    // If rounded into next day, use the day-end as the local origin and rerun\r\n    // the rounding\r\n    dayDelta = sign;\r\n    roundedTimeDuration = beyondDaySpan.round(unitIncrement, roundingMode);\r\n    nudgedEpochNs = roundedTimeDuration.addToEpochNs(endEpochNs);\r\n  } else {\r\n    // Otherwise, if time not rounded beyond day, use the day-start as the local\r\n    // origin\r\n    dayDelta = 0;\r\n    nudgedEpochNs = roundedTimeDuration.addToEpochNs(startEpochNs);\r\n  }\r\n\r\n  const dateDuration = AdjustDateDurationRecord(duration.date, duration.date.days + dayDelta);\r\n  const resultDuration = CombineDateAndTimeDuration(dateDuration, roundedTimeDuration);\r\n  return {\r\n    duration: resultDuration,\r\n    nudgedEpochNs,\r\n    didExpandCalendarUnit: didRoundBeyondDay\r\n  };\r\n}\r\n\r\n// Converts all fields to nanoseconds and does integer rounding.\r\nfunction NudgeToDayOrTime(\r\n  durationParam: InternalDuration,\r\n  destEpochNs: bigint,\r\n  largestUnit: Temporal.DateTimeUnit,\r\n  increment: number,\r\n  smallestUnit: Temporal.TimeUnit | 'day',\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  // unit must be day or smaller\r\n  let duration = durationParam;\r\n\r\n  const timeDuration = duration.time.add24HourDays(duration.date.days);\r\n  // Convert to nanoseconds and round\r\n  const roundedTime = timeDuration.round(BigInt(increment * NS_PER_TIME_UNIT[smallestUnit]), roundingMode);\r\n  const diffTime = roundedTime.subtract(timeDuration);\r\n\r\n  // Determine if whole days expanded\r\n  const { quotient: wholeDays } = timeDuration.divmod(DAY_NANOS);\r\n  const { quotient: roundedWholeDays } = roundedTime.divmod(DAY_NANOS);\r\n  const didExpandDays = Math.sign(Number(roundedWholeDays - wholeDays)) === timeDuration.sign();\r\n\r\n  const nudgedEpochNs = diffTime.addToEpochNs(destEpochNs);\r\n\r\n  let days = 0n;\r\n  let remainder = roundedTime;\r\n  if (TemporalUnitCategory(largestUnit) === 'date') {\r\n    days = roundedWholeDays;\r\n    remainder = roundedTime.add(TimeDuration.fromComponents(-Number(roundedWholeDays * 24n), 0, 0, 0, 0, 0));\r\n  }\r\n\r\n  const dateDuration = AdjustDateDurationRecord(duration.date, Number(days));\r\n  return {\r\n    duration: { date: dateDuration, time: remainder },\r\n    nudgedEpochNs,\r\n    didExpandCalendarUnit: didExpandDays\r\n  };\r\n}\r\n\r\n// Given a potentially bottom-heavy duration, bubble up smaller units to larger\r\n// units. Any units smaller than smallestUnit are already zeroed-out.\r\nfunction BubbleRelativeDuration(\r\n  sign: -1 | 1,\r\n  durationParam: InternalDuration,\r\n  nudgedEpochNs: bigint,\r\n  isoDateTime: ISODateTime,\r\n  timeZone: string | null,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnit: Temporal.DateUnit,\r\n  smallestUnit: Temporal.DateUnit\r\n) {\r\n  // smallestUnit is day or larger\r\n  let duration = durationParam;\r\n\r\n  if (smallestUnit === largestUnit) return duration;\r\n\r\n  // Check to see if nudgedEpochNs has hit the boundary of any units higher than\r\n  // smallestUnit, in which case increment the higher unit and clear smaller\r\n  // units.\r\n  const largestUnitIndex = UNITS_DESCENDING.indexOf(largestUnit);\r\n  const smallestUnitIndex = UNITS_DESCENDING.indexOf(smallestUnit);\r\n  for (let unitIndex = smallestUnitIndex - 1; unitIndex >= largestUnitIndex; unitIndex--) {\r\n    // The only situation where days and smaller bubble-up into weeks is when\r\n    // largestUnit is 'week' (not to be confused with the situation where\r\n    // smallestUnit is 'week', in which case days and smaller are ROUNDED-up\r\n    // into weeks, but that has already happened by the time this function\r\n    // executes)\r\n    // So, if days and smaller are NOT bubbled-up into weeks, and the current\r\n    // unit is weeks, skip.\r\n    const unit = UNITS_DESCENDING[unitIndex];\r\n    if (unit === 'week' && largestUnit !== 'week') {\r\n      continue;\r\n    }\r\n\r\n    let endDuration;\r\n    switch (unit) {\r\n      case 'year': {\r\n        const years = duration.date.years + sign;\r\n        endDuration = { years, months: 0, weeks: 0, days: 0 };\r\n        break;\r\n      }\r\n      case 'month': {\r\n        const months = duration.date.months + sign;\r\n        endDuration = AdjustDateDurationRecord(duration.date, 0, 0, months);\r\n        break;\r\n      }\r\n      case 'week': {\r\n        const weeks = duration.date.weeks + sign;\r\n        endDuration = AdjustDateDurationRecord(duration.date, 0, weeks);\r\n        break;\r\n      }\r\n      default:\r\n        /* c8 ignore next */ assertNotReached();\r\n    }\r\n\r\n    // Compute end-of-unit in epoch-nanoseconds\r\n    const end = CalendarDateAdd(calendar, isoDateTime.isoDate, endDuration, 'constrain');\r\n    const endDateTime = CombineISODateAndTimeRecord(end, isoDateTime.time);\r\n    let endEpochNs;\r\n    if (timeZone) {\r\n      endEpochNs = GetEpochNanosecondsFor(timeZone, endDateTime, 'compatible');\r\n    } else {\r\n      endEpochNs = GetUTCEpochNanoseconds(endDateTime);\r\n    }\r\n\r\n    const didExpandToEnd = compare(nudgedEpochNs, endEpochNs) !== -sign;\r\n\r\n    // Is nudgedEpochNs at the end-of-unit? This means it should bubble-up to\r\n    // the next highest unit (and possibly further...)\r\n    if (didExpandToEnd) {\r\n      duration = { date: endDuration, time: TimeDuration.ZERO };\r\n    } else {\r\n      // NOT at end-of-unit. Stop looking for bubbling\r\n      break;\r\n    }\r\n  }\r\n\r\n  return duration;\r\n}\r\n\r\nfunction RoundRelativeDuration(\r\n  durationParam: InternalDuration,\r\n  destEpochNs: bigint,\r\n  isoDateTime: ISODateTime,\r\n  timeZone: string | null,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnitParam: Temporal.DateTimeUnit,\r\n  increment: number,\r\n  smallestUnit: Temporal.DateTimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  let duration = durationParam;\r\n  // The duration must already be balanced. This should be achieved by calling\r\n  // one of the non-rounding since/until internal methods prior. It's okay to\r\n  // have a bottom-heavy weeks because weeks don't bubble-up into months. It's\r\n  // okay to have >24 hour day assuming the final day of relativeTo+duration has\r\n  // >24 hours in its timezone. (should automatically end up like this if using\r\n  // non-rounding since/until internal methods prior)\r\n  const irregularLengthUnit = IsCalendarUnit(smallestUnit) || (timeZone && smallestUnit === 'day');\r\n  const sign = InternalDurationSign(duration) < 0 ? -1 : 1;\r\n\r\n  let nudgeResult;\r\n  if (irregularLengthUnit) {\r\n    // Rounding an irregular-length unit? Use epoch-nanosecond-bounding technique\r\n    ({ nudgeResult } = NudgeToCalendarUnit(\r\n      sign,\r\n      duration,\r\n      destEpochNs,\r\n      isoDateTime,\r\n      timeZone,\r\n      calendar,\r\n      increment,\r\n      smallestUnit,\r\n      roundingMode\r\n    ));\r\n  } else if (timeZone) {\r\n    // Special-case for rounding time units within a zoned day\r\n    uncheckedAssertNarrowedType<Temporal.TimeUnit>(\r\n      smallestUnit,\r\n      'other values handled in irregularLengthUnit clause above'\r\n    );\r\n    nudgeResult = NudgeToZonedTime(\r\n      sign,\r\n      duration,\r\n      isoDateTime,\r\n      timeZone,\r\n      calendar,\r\n      increment,\r\n      smallestUnit,\r\n      roundingMode\r\n    );\r\n  } else {\r\n    // Rounding uniform-length days/hours/minutes/etc units. Simple nanosecond\r\n    // math. years/months/weeks unchanged\r\n    nudgeResult = NudgeToDayOrTime(duration, destEpochNs, largestUnitParam, increment, smallestUnit, roundingMode);\r\n  }\r\n\r\n  duration = nudgeResult.duration;\r\n  // Did nudging cause the duration to expand to the next day or larger?\r\n  // Bubble-up smaller calendar units into higher ones, except for weeks, which\r\n  // don't balance up into months\r\n  if (nudgeResult.didExpandCalendarUnit && smallestUnit !== 'week') {\r\n    uncheckedAssertNarrowedType<Temporal.DateUnit>(\r\n      largestUnitParam,\r\n      'if we expanded to a calendar unit, then largestUnit is a calendar unit'\r\n    );\r\n    duration = BubbleRelativeDuration(\r\n      sign,\r\n      duration,\r\n      nudgeResult.nudgedEpochNs, // The destEpochNs after expanding/contracting\r\n      isoDateTime,\r\n      timeZone,\r\n      calendar,\r\n      largestUnitParam, // where to STOP bubbling\r\n      LargerOfTwoTemporalUnits(smallestUnit, 'day') as Temporal.DateUnit // where to START bubbling-up from\r\n    );\r\n  }\r\n\r\n  return duration;\r\n}\r\n\r\nfunction TotalRelativeDuration(\r\n  duration: InternalDuration,\r\n  destEpochNs: bigint,\r\n  isoDateTime: ISODateTime,\r\n  timeZone: string | null,\r\n  calendar: BuiltinCalendarId,\r\n  unit: Temporal.DateTimeUnit\r\n) {\r\n  // The duration must already be balanced. This should be achieved by calling\r\n  // one of the non-rounding since/until internal methods prior. It's okay to\r\n  // have a bottom-heavy weeks because weeks don't bubble-up into months. It's\r\n  // okay to have >24 hour day assuming the final day of relativeTo+duration has\r\n  // >24 hours in its timezone. (should automatically end up like this if using\r\n  // non-rounding since/until internal methods prior)\r\n  if (IsCalendarUnit(unit) || (timeZone && unit === 'day')) {\r\n    // Rounding an irregular-length unit? Use epoch-nanosecond-bounding technique\r\n    const sign = InternalDurationSign(duration) < 0 ? -1 : 1;\r\n    return NudgeToCalendarUnit(sign, duration, destEpochNs, isoDateTime, timeZone, calendar, 1, unit, 'trunc').total;\r\n  }\r\n  // Rounding uniform-length days/hours/minutes/etc units. Simple nanosecond\r\n  // math. years/months/weeks unchanged\r\n  const timeDuration = duration.time.add24HourDays(duration.date.days);\r\n  return TotalTimeDuration(timeDuration, unit);\r\n}\r\n\r\nexport function DifferencePlainDateTimeWithRounding(\r\n  isoDateTime1: ISODateTime,\r\n  isoDateTime2: ISODateTime,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnit: Temporal.DateTimeUnit,\r\n  roundingIncrement: number,\r\n  smallestUnit: Temporal.DateTimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  if (CompareISODateTime(isoDateTime1, isoDateTime2) == 0) {\r\n    return { date: ZeroDateDuration(), time: TimeDuration.ZERO };\r\n  }\r\n\r\n  RejectDateTimeRange(isoDateTime1);\r\n  RejectDateTimeRange(isoDateTime2);\r\n  const duration = DifferenceISODateTime(isoDateTime1, isoDateTime2, calendar, largestUnit);\r\n\r\n  if (smallestUnit === 'nanosecond' && roundingIncrement === 1) return duration;\r\n\r\n  const destEpochNs = GetUTCEpochNanoseconds(isoDateTime2);\r\n  return RoundRelativeDuration(\r\n    duration,\r\n    destEpochNs,\r\n    isoDateTime1,\r\n    null,\r\n    calendar,\r\n    largestUnit,\r\n    roundingIncrement,\r\n    smallestUnit,\r\n    roundingMode\r\n  );\r\n}\r\n\r\nexport function DifferencePlainDateTimeWithTotal(\r\n  isoDateTime1: ISODateTime,\r\n  isoDateTime2: ISODateTime,\r\n  calendar: BuiltinCalendarId,\r\n  unit: Temporal.DateTimeUnit\r\n) {\r\n  if (CompareISODateTime(isoDateTime1, isoDateTime2) == 0) return 0;\r\n\r\n  RejectDateTimeRange(isoDateTime1);\r\n  RejectDateTimeRange(isoDateTime2);\r\n  const duration = DifferenceISODateTime(isoDateTime1, isoDateTime2, calendar, unit);\r\n\r\n  if (unit === 'nanosecond') return duration.time.totalNs;\r\n\r\n  const destEpochNs = GetUTCEpochNanoseconds(isoDateTime2);\r\n  return TotalRelativeDuration(duration, destEpochNs, isoDateTime1, null, calendar, unit);\r\n}\r\n\r\nexport function DifferenceZonedDateTimeWithRounding(\r\n  ns1: bigint,\r\n  ns2: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId,\r\n  largestUnit: Temporal.DateTimeUnit,\r\n  roundingIncrement: number,\r\n  smallestUnit: Temporal.DateTimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  if (TemporalUnitCategory(largestUnit) === 'time') {\r\n    // The user is only asking for a time difference, so return difference of instants.\r\n    return DifferenceInstant(ns1, ns2, roundingIncrement, smallestUnit as Temporal.TimeUnit, roundingMode);\r\n  }\r\n\r\n  const duration = DifferenceZonedDateTime(ns1, ns2, timeZone, calendar, largestUnit);\r\n\r\n  if (smallestUnit === 'nanosecond' && roundingIncrement === 1) return duration;\r\n\r\n  const dateTime = GetISODateTimeFor(timeZone, ns1);\r\n  return RoundRelativeDuration(\r\n    duration,\r\n    ns2,\r\n    dateTime,\r\n    timeZone,\r\n    calendar,\r\n    largestUnit,\r\n    roundingIncrement,\r\n    smallestUnit,\r\n    roundingMode\r\n  );\r\n}\r\n\r\nexport function DifferenceZonedDateTimeWithTotal(\r\n  ns1: bigint,\r\n  ns2: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId,\r\n  unit: Temporal.DateTimeUnit\r\n) {\r\n  if (TemporalUnitCategory(unit) === 'time') {\r\n    // The user is only asking for a time difference, so return difference of instants.\r\n    return TotalTimeDuration(TimeDuration.fromEpochNsDiff(ns2, ns1), unit as Temporal.TimeUnit);\r\n  }\r\n\r\n  const duration = DifferenceZonedDateTime(ns1, ns2, timeZone, calendar, unit);\r\n  const dateTime = GetISODateTimeFor(timeZone, ns1);\r\n  return TotalRelativeDuration(duration, ns2, dateTime, timeZone, calendar, unit);\r\n}\r\n\r\ntype DifferenceOperation = 'since' | 'until';\r\n\r\nfunction GetDifferenceSettings<T extends Temporal.DateTimeUnit>(\r\n  op: DifferenceOperation,\r\n  options: Temporal.DifferenceOptions<T>,\r\n  group: 'datetime' | 'date' | 'time',\r\n  disallowed: (Temporal.DateTimeUnit | 'auto')[],\r\n  fallbackSmallest: T,\r\n  smallestLargestDefaultUnit: T\r\n) {\r\n  const ALLOWED_UNITS = TEMPORAL_UNITS.reduce((allowed, unitInfo) => {\r\n    const p = unitInfo[0];\r\n    const s = unitInfo[1];\r\n    const c = unitInfo[2];\r\n    if ((group === 'datetime' || c === group) && !disallowed.includes(s)) {\r\n      allowed.push(s, p);\r\n    }\r\n    return allowed;\r\n  }, [] as (Temporal.DateTimeUnit | Temporal.PluralUnit<Temporal.DateTimeUnit>)[]);\r\n\r\n  let largestUnit = GetTemporalUnitValuedOption(options, 'largestUnit', group, 'auto');\r\n  if (disallowed.includes(largestUnit)) {\r\n    throw new RangeError(`largestUnit must be one of ${ALLOWED_UNITS.join(', ')}, not ${largestUnit}`);\r\n  }\r\n\r\n  const roundingIncrement = GetTemporalRoundingIncrementOption(options);\r\n\r\n  let roundingMode = GetRoundingModeOption(options, 'trunc');\r\n  if (op === 'since') roundingMode = NegateRoundingMode(roundingMode);\r\n\r\n  const smallestUnit = GetTemporalUnitValuedOption(options, 'smallestUnit', group, fallbackSmallest);\r\n  if (disallowed.includes(smallestUnit)) {\r\n    throw new RangeError(`smallestUnit must be one of ${ALLOWED_UNITS.join(', ')}, not ${smallestUnit}`);\r\n  }\r\n\r\n  const defaultLargestUnit = LargerOfTwoTemporalUnits(smallestLargestDefaultUnit, smallestUnit);\r\n  if (largestUnit === 'auto') largestUnit = defaultLargestUnit;\r\n  if (LargerOfTwoTemporalUnits(largestUnit, smallestUnit) !== largestUnit) {\r\n    throw new RangeError(`largestUnit ${largestUnit} cannot be smaller than smallestUnit ${smallestUnit}`);\r\n  }\r\n  const MAX_DIFFERENCE_INCREMENTS: { [k in Temporal.DateTimeUnit]?: number } = {\r\n    hour: 24,\r\n    minute: 60,\r\n    second: 60,\r\n    millisecond: 1000,\r\n    microsecond: 1000,\r\n    nanosecond: 1000\r\n  };\r\n  const maximum = MAX_DIFFERENCE_INCREMENTS[smallestUnit];\r\n  if (maximum !== undefined) ValidateTemporalRoundingIncrement(roundingIncrement, maximum, false);\r\n\r\n  return { largestUnit: largestUnit as T, roundingIncrement, roundingMode, smallestUnit: smallestUnit as T };\r\n}\r\n\r\nexport function DifferenceTemporalInstant(\r\n  operation: DifferenceOperation,\r\n  instant: Temporal.Instant,\r\n  otherParam: InstantParams['until'][0],\r\n  options: InstantParams['until'][1]\r\n) {\r\n  const other = ToTemporalInstant(otherParam);\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'time', [], 'nanosecond', 'second');\r\n\r\n  const onens = GetSlot(instant, EPOCHNANOSECONDS);\r\n  const twons = GetSlot(other, EPOCHNANOSECONDS);\r\n  const duration = DifferenceInstant(\r\n    onens,\r\n    twons,\r\n    settings.roundingIncrement,\r\n    settings.smallestUnit,\r\n    settings.roundingMode\r\n  );\r\n  let result = TemporalDurationFromInternal(duration, settings.largestUnit);\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function DifferenceTemporalPlainDate(\r\n  operation: DifferenceOperation,\r\n  plainDate: Temporal.PlainDate,\r\n  otherParam: PlainDateParams['until'][0],\r\n  options: PlainDateParams['until'][1]\r\n) {\r\n  const other = ToTemporalDate(otherParam);\r\n  const calendar = GetSlot(plainDate, CALENDAR);\r\n  const otherCalendar = GetSlot(other, CALENDAR);\r\n  if (!CalendarEquals(calendar, otherCalendar)) {\r\n    throw new RangeError(`cannot compute difference between dates of ${calendar} and ${otherCalendar} calendars`);\r\n  }\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'date', [], 'day', 'day');\r\n\r\n  const Duration = GetIntrinsic('%Temporal.Duration%');\r\n  const isoDate = GetSlot(plainDate, ISO_DATE);\r\n  const isoOther = GetSlot(other, ISO_DATE);\r\n  if (CompareISODate(isoDate, isoOther) === 0) return new Duration();\r\n\r\n  const dateDifference = CalendarDateUntil(calendar, isoDate, isoOther, settings.largestUnit);\r\n\r\n  let duration = { date: dateDifference, time: TimeDuration.ZERO };\r\n  const roundingIsNoop = settings.smallestUnit === 'day' && settings.roundingIncrement === 1;\r\n  if (!roundingIsNoop) {\r\n    const isoDateTime = CombineISODateAndTimeRecord(isoDate, MidnightTimeRecord());\r\n    const isoDateTimeOther = CombineISODateAndTimeRecord(isoOther, MidnightTimeRecord());\r\n    const destEpochNs = GetUTCEpochNanoseconds(isoDateTimeOther);\r\n    duration = RoundRelativeDuration(\r\n      duration,\r\n      destEpochNs,\r\n      isoDateTime,\r\n      null,\r\n      calendar,\r\n      settings.largestUnit,\r\n      settings.roundingIncrement,\r\n      settings.smallestUnit,\r\n      settings.roundingMode\r\n    );\r\n  }\r\n\r\n  let result = TemporalDurationFromInternal(duration, 'day');\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function DifferenceTemporalPlainDateTime(\r\n  operation: DifferenceOperation,\r\n  plainDateTime: Temporal.PlainDateTime,\r\n  otherParam: PlainDateTimeParams['until'][0],\r\n  options: PlainDateTimeParams['until'][1]\r\n) {\r\n  const other = ToTemporalDateTime(otherParam);\r\n  const calendar = GetSlot(plainDateTime, CALENDAR);\r\n  const otherCalendar = GetSlot(other, CALENDAR);\r\n  if (!CalendarEquals(calendar, otherCalendar)) {\r\n    throw new RangeError(`cannot compute difference between dates of ${calendar} and ${otherCalendar} calendars`);\r\n  }\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'datetime', [], 'nanosecond', 'day');\r\n\r\n  const Duration = GetIntrinsic('%Temporal.Duration%');\r\n  const isoDateTime1 = GetSlot(plainDateTime, ISO_DATE_TIME);\r\n  const isoDateTime2 = GetSlot(other, ISO_DATE_TIME);\r\n  if (CompareISODateTime(isoDateTime1, isoDateTime2) === 0) return new Duration();\r\n\r\n  const duration = DifferencePlainDateTimeWithRounding(\r\n    isoDateTime1,\r\n    isoDateTime2,\r\n    calendar,\r\n    settings.largestUnit,\r\n    settings.roundingIncrement,\r\n    settings.smallestUnit,\r\n    settings.roundingMode\r\n  );\r\n\r\n  let result = TemporalDurationFromInternal(duration, settings.largestUnit);\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function DifferenceTemporalPlainTime(\r\n  operation: DifferenceOperation,\r\n  plainTime: Temporal.PlainTime,\r\n  otherParam: PlainTimeParams['until'][0],\r\n  options: PlainTimeParams['until'][1]\r\n) {\r\n  const other = ToTemporalTime(otherParam);\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'time', [], 'nanosecond', 'hour');\r\n\r\n  let timeDuration = DifferenceTime(GetSlot(plainTime, TIME), GetSlot(other, TIME));\r\n  timeDuration = RoundTimeDuration(\r\n    timeDuration,\r\n    settings.roundingIncrement,\r\n    settings.smallestUnit,\r\n    settings.roundingMode\r\n  );\r\n  const duration = CombineDateAndTimeDuration(ZeroDateDuration(), timeDuration);\r\n\r\n  let result = TemporalDurationFromInternal(duration, settings.largestUnit);\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function DifferenceTemporalPlainYearMonth(\r\n  operation: DifferenceOperation,\r\n  yearMonth: Temporal.PlainYearMonth,\r\n  otherParam: PlainYearMonthParams['until'][0],\r\n  options: PlainYearMonthParams['until'][1]\r\n) {\r\n  const other = ToTemporalYearMonth(otherParam);\r\n  const calendar = GetSlot(yearMonth, CALENDAR);\r\n  const otherCalendar = GetSlot(other, CALENDAR);\r\n  if (!CalendarEquals(calendar, otherCalendar)) {\r\n    throw new RangeError(`cannot compute difference between months of ${calendar} and ${otherCalendar} calendars`);\r\n  }\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'date', ['week', 'day'], 'month', 'year');\r\n\r\n  const Duration = GetIntrinsic('%Temporal.Duration%');\r\n  if (CompareISODate(GetSlot(yearMonth, ISO_DATE), GetSlot(other, ISO_DATE)) == 0) {\r\n    return new Duration();\r\n  }\r\n\r\n  const thisFields: CalendarFieldsRecord = ISODateToFields(calendar, GetSlot(yearMonth, ISO_DATE), 'year-month');\r\n  thisFields.day = 1;\r\n  const thisDate = CalendarDateFromFields(calendar, thisFields, 'constrain');\r\n  const otherFields: CalendarFieldsRecord = ISODateToFields(calendar, GetSlot(other, ISO_DATE), 'year-month');\r\n  otherFields.day = 1;\r\n  const otherDate = CalendarDateFromFields(calendar, otherFields, 'constrain');\r\n\r\n  const dateDifference = CalendarDateUntil(calendar, thisDate, otherDate, settings.largestUnit);\r\n  let duration = { date: AdjustDateDurationRecord(dateDifference, 0, 0), time: TimeDuration.ZERO };\r\n  if (settings.smallestUnit !== 'month' || settings.roundingIncrement !== 1) {\r\n    const isoDateTime = CombineISODateAndTimeRecord(thisDate, MidnightTimeRecord());\r\n    const isoDateTimeOther = CombineISODateAndTimeRecord(otherDate, MidnightTimeRecord());\r\n    const destEpochNs = GetUTCEpochNanoseconds(isoDateTimeOther);\r\n    duration = RoundRelativeDuration(\r\n      duration,\r\n      destEpochNs,\r\n      isoDateTime,\r\n      null,\r\n      calendar,\r\n      settings.largestUnit,\r\n      settings.roundingIncrement,\r\n      settings.smallestUnit,\r\n      settings.roundingMode\r\n    );\r\n  }\r\n\r\n  let result = TemporalDurationFromInternal(duration, 'day');\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function DifferenceTemporalZonedDateTime(\r\n  operation: DifferenceOperation,\r\n  zonedDateTime: Temporal.ZonedDateTime,\r\n  otherParam: ZonedDateTimeParams['until'][0],\r\n  options: ZonedDateTimeParams['until'][1]\r\n) {\r\n  const other = ToTemporalZonedDateTime(otherParam);\r\n  const calendar = GetSlot(zonedDateTime, CALENDAR);\r\n  const otherCalendar = GetSlot(other, CALENDAR);\r\n  if (!CalendarEquals(calendar, otherCalendar)) {\r\n    throw new RangeError(`cannot compute difference between dates of ${calendar} and ${otherCalendar} calendars`);\r\n  }\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const settings = GetDifferenceSettings(operation, resolvedOptions, 'datetime', [], 'nanosecond', 'hour');\r\n\r\n  const ns1 = GetSlot(zonedDateTime, EPOCHNANOSECONDS);\r\n  const ns2 = GetSlot(other, EPOCHNANOSECONDS);\r\n\r\n  const Duration = GetIntrinsic('%Temporal.Duration%');\r\n\r\n  let result;\r\n  if (TemporalUnitCategory(settings.largestUnit) !== 'date') {\r\n    // The user is only asking for a time difference, so return difference of instants.\r\n    const duration = DifferenceInstant(\r\n      ns1,\r\n      ns2,\r\n      settings.roundingIncrement,\r\n      settings.smallestUnit as Temporal.TimeUnit,\r\n      settings.roundingMode\r\n    );\r\n    result = TemporalDurationFromInternal(duration, settings.largestUnit);\r\n  } else {\r\n    const timeZone = GetSlot(zonedDateTime, TIME_ZONE);\r\n    if (!TimeZoneEquals(timeZone, GetSlot(other, TIME_ZONE))) {\r\n      throw new RangeError(\r\n        \"When calculating difference between time zones, largestUnit must be 'hours' \" +\r\n          'or smaller because day lengths can vary between time zones due to DST or time zone offset changes.'\r\n      );\r\n    }\r\n\r\n    if (ns1 === ns2) return new Duration();\r\n\r\n    const duration = DifferenceZonedDateTimeWithRounding(\r\n      ns1,\r\n      ns2,\r\n      timeZone,\r\n      calendar,\r\n      settings.largestUnit,\r\n      settings.roundingIncrement,\r\n      settings.smallestUnit,\r\n      settings.roundingMode\r\n    );\r\n    result = TemporalDurationFromInternal(duration, 'hour');\r\n  }\r\n\r\n  if (operation === 'since') result = CreateNegatedTemporalDuration(result);\r\n  return result;\r\n}\r\n\r\nexport function AddTime(\r\n  { hour, minute, second: secondParam, millisecond, microsecond, nanosecond: nanosecondParam }: TimeRecord,\r\n  timeDuration: TimeDuration\r\n) {\r\n  let second = secondParam;\r\n  let nanosecond = nanosecondParam;\r\n\r\n  second += timeDuration.sec;\r\n  nanosecond += timeDuration.subsec;\r\n  return BalanceTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n}\r\n\r\nfunction AddInstant(epochNanoseconds: bigint, timeDuration: TimeDuration) {\r\n  const result = timeDuration.addToEpochNs(epochNanoseconds);\r\n  ValidateEpochNanoseconds(result);\r\n  return result;\r\n}\r\n\r\nexport function AddZonedDateTime(\r\n  epochNs: bigint,\r\n  timeZone: string,\r\n  calendar: BuiltinCalendarId,\r\n  duration: InternalDuration,\r\n  overflow: Overflow = 'constrain'\r\n) {\r\n  // If only time is to be added, then use Instant math. It's not OK to fall\r\n  // through to the date/time code below because compatible disambiguation in\r\n  // the PlainDateTime=>Instant conversion will change the offset of any\r\n  // ZonedDateTime in the repeated clock time after a backwards transition.\r\n  // When adding/subtracting time units and not dates, this disambiguation is\r\n  // not expected and so is avoided below via a fast path for time-only\r\n  // arithmetic.\r\n  // BTW, this behavior is similar in spirit to offset: 'prefer' in `with`.\r\n  if (DateDurationSign(duration.date) === 0) return AddInstant(epochNs, duration.time);\r\n\r\n  // RFC 5545 requires the date portion to be added in calendar days and the\r\n  // time portion to be added in exact time.\r\n  const dt = GetISODateTimeFor(timeZone, epochNs);\r\n  const addedDate = CalendarDateAdd(calendar, dt.isoDate, duration.date, overflow);\r\n  const dtIntermediate = CombineISODateAndTimeRecord(addedDate, dt.time);\r\n\r\n  // Note that 'compatible' is used below because this disambiguation behavior\r\n  // is required by RFC 5545.\r\n  const intermediateNs = GetEpochNanosecondsFor(timeZone, dtIntermediate, 'compatible');\r\n  return AddInstant(intermediateNs, duration.time);\r\n}\r\n\r\ntype AddSubtractOperation = 'add' | 'subtract';\r\n\r\nexport function AddDurations(\r\n  operation: AddSubtractOperation,\r\n  duration: Temporal.Duration,\r\n  otherParam: DurationParams['add'][0]\r\n) {\r\n  let other = ToTemporalDuration(otherParam);\r\n  if (operation === 'subtract') other = CreateNegatedTemporalDuration(other);\r\n\r\n  const largestUnit1 = DefaultTemporalLargestUnit(duration);\r\n  const largestUnit2 = DefaultTemporalLargestUnit(other);\r\n  const largestUnit = LargerOfTwoTemporalUnits(largestUnit1, largestUnit2);\r\n  if (IsCalendarUnit(largestUnit)) {\r\n    throw new RangeError('For years, months, or weeks arithmetic, use date arithmetic relative to a starting point');\r\n  }\r\n\r\n  const d1 = ToInternalDurationRecordWith24HourDays(duration);\r\n  const d2 = ToInternalDurationRecordWith24HourDays(other);\r\n  const result = CombineDateAndTimeDuration(ZeroDateDuration(), d1.time.add(d2.time));\r\n  return TemporalDurationFromInternal(result, largestUnit);\r\n}\r\n\r\nexport function AddDurationToInstant(\r\n  operation: AddSubtractOperation,\r\n  instant: Temporal.Instant,\r\n  durationLike: InstantParams['add'][0]\r\n) {\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n  const largestUnit = DefaultTemporalLargestUnit(duration);\r\n  if (TemporalUnitCategory(largestUnit) === 'date') {\r\n    throw new RangeError(\r\n      `Duration field ${largestUnit} not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead.`\r\n    );\r\n  }\r\n  const internalDuration = ToInternalDurationRecordWith24HourDays(duration);\r\n  const ns = AddInstant(GetSlot(instant, EPOCHNANOSECONDS), internalDuration.time);\r\n  return CreateTemporalInstant(ns);\r\n}\r\n\r\nexport function AddDurationToDate(\r\n  operation: AddSubtractOperation,\r\n  plainDate: Temporal.PlainDate,\r\n  durationLike: PlainDateParams['add'][0],\r\n  options: PlainDateParams['add'][1]\r\n) {\r\n  const calendar = GetSlot(plainDate, CALENDAR);\r\n\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n  const dateDuration = ToDateDurationRecordWithoutTime(duration);\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const overflow = GetTemporalOverflowOption(resolvedOptions);\r\n\r\n  const addedDate = CalendarDateAdd(calendar, GetSlot(plainDate, ISO_DATE), dateDuration, overflow);\r\n  return CreateTemporalDate(addedDate, calendar);\r\n}\r\n\r\nexport function AddDurationToDateTime(\r\n  operation: AddSubtractOperation,\r\n  dateTime: Temporal.PlainDateTime,\r\n  durationLike: PlainDateTimeParams['add'][0],\r\n  options: PlainDateTimeParams['add'][1]\r\n) {\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const overflow = GetTemporalOverflowOption(resolvedOptions);\r\n\r\n  const calendar = GetSlot(dateTime, CALENDAR);\r\n\r\n  const internalDuration = ToInternalDurationRecordWith24HourDays(duration);\r\n\r\n  // Add the time part\r\n  const isoDateTime = GetSlot(dateTime, ISO_DATE_TIME);\r\n  const timeResult = AddTime(isoDateTime.time, internalDuration.time);\r\n  const dateDuration = AdjustDateDurationRecord(internalDuration.date, timeResult.deltaDays);\r\n\r\n  // Delegate the date part addition to the calendar\r\n  RejectDuration(dateDuration.years, dateDuration.months, dateDuration.weeks, dateDuration.days, 0, 0, 0, 0, 0, 0);\r\n  const addedDate = CalendarDateAdd(calendar, isoDateTime.isoDate, dateDuration, overflow);\r\n\r\n  const result = CombineISODateAndTimeRecord(addedDate, timeResult);\r\n  return CreateTemporalDateTime(result, calendar);\r\n}\r\n\r\nexport function AddDurationToTime(\r\n  operation: AddSubtractOperation,\r\n  temporalTime: Temporal.PlainTime,\r\n  durationLike: PlainTimeParams['add'][0]\r\n) {\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n  const internalDuration = ToInternalDurationRecordWith24HourDays(duration);\r\n  const { hour, minute, second, millisecond, microsecond, nanosecond } = AddTime(\r\n    GetSlot(temporalTime, TIME),\r\n    internalDuration.time\r\n  );\r\n  const time = RegulateTime(hour, minute, second, millisecond, microsecond, nanosecond, 'reject');\r\n  return CreateTemporalTime(time);\r\n}\r\n\r\nexport function AddDurationToYearMonth(\r\n  operation: AddSubtractOperation,\r\n  yearMonth: Temporal.PlainYearMonth,\r\n  durationLike: PlainYearMonthParams['add'][0],\r\n  options: PlainYearMonthParams['add'][1]\r\n) {\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const overflow = GetTemporalOverflowOption(resolvedOptions);\r\n  const sign = DurationSign(duration);\r\n\r\n  const calendar = GetSlot(yearMonth, CALENDAR);\r\n  const fields: CalendarFieldsRecord = ISODateToFields(calendar, GetSlot(yearMonth, ISO_DATE), 'year-month');\r\n  fields.day = 1;\r\n  let startDate = CalendarDateFromFields(calendar, fields, 'constrain');\r\n  if (sign < 0) {\r\n    const nextMonth = CalendarDateAdd(calendar, startDate, { months: 1 }, 'constrain');\r\n    startDate = BalanceISODate(nextMonth.year, nextMonth.month, nextMonth.day - 1);\r\n  }\r\n  const durationToAdd = ToDateDurationRecordWithoutTime(duration);\r\n  RejectDateRange(startDate);\r\n  const addedDate = CalendarDateAdd(calendar, startDate, durationToAdd, overflow);\r\n  const addedDateFields = ISODateToFields(calendar, addedDate, 'year-month');\r\n\r\n  const isoDate = CalendarYearMonthFromFields(calendar, addedDateFields, overflow);\r\n  return CreateTemporalYearMonth(isoDate, calendar);\r\n}\r\n\r\nexport function AddDurationToZonedDateTime(\r\n  operation: AddSubtractOperation,\r\n  zonedDateTime: Temporal.ZonedDateTime,\r\n  durationLike: ZonedDateTimeParams['add'][0],\r\n  options: ZonedDateTimeParams['add'][1]\r\n) {\r\n  let duration = ToTemporalDuration(durationLike);\r\n  if (operation === 'subtract') duration = CreateNegatedTemporalDuration(duration);\r\n\r\n  const resolvedOptions = GetOptionsObject(options);\r\n  const overflow = GetTemporalOverflowOption(resolvedOptions);\r\n  const timeZone = GetSlot(zonedDateTime, TIME_ZONE);\r\n  const calendar = GetSlot(zonedDateTime, CALENDAR);\r\n  const internalDuration = ToInternalDurationRecord(duration);\r\n  const epochNanoseconds = AddZonedDateTime(\r\n    GetSlot(zonedDateTime, EPOCHNANOSECONDS),\r\n    timeZone,\r\n    calendar,\r\n    internalDuration,\r\n    overflow\r\n  );\r\n  return CreateTemporalZonedDateTime(epochNanoseconds, timeZone, calendar);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove this after tests are converted to TS\r\nexport function RoundNumberToIncrement(quantity: number, increment: number, mode: Temporal.RoundingMode) {\r\n  const quotient = Math.trunc(quantity / increment);\r\n  const remainder = quantity % increment;\r\n  const sign = quantity < 0 ? 'negative' : 'positive';\r\n  const r1 = Math.abs(quotient);\r\n  const r2 = r1 + 1;\r\n  const cmp = ComparisonResult(Math.abs(remainder * 2) - increment);\r\n  const even = r1 % 2 === 0;\r\n  const unsignedRoundingMode = GetUnsignedRoundingMode(mode, sign);\r\n  const rounded = remainder === 0 ? r1 : ApplyUnsignedRoundingMode(r1, r2, cmp, even, unsignedRoundingMode);\r\n  return increment * (sign === 'positive' ? rounded : -rounded);\r\n}\r\n\r\n// ts-prune-ignore-next TODO: remove this after tests are converted to TS\r\nexport function RoundNumberToIncrementAsIfPositive(\r\n  quantityParam: bigint,\r\n  incrementParam: bigint,\r\n  mode: Temporal.RoundingMode\r\n) {\r\n  const quantity = quantityParam;\r\n  const increment = incrementParam;\r\n  const quotient = quantity / increment;\r\n  const remainder = quantity % increment;\r\n  const unsignedRoundingMode = GetUnsignedRoundingMode(mode, 'positive');\r\n  let r1: bigint, r2: bigint;\r\n  if (quantity < 0) {\r\n    r1 = quotient - ONE;\r\n    r2 = quotient;\r\n  } else {\r\n    r1 = quotient;\r\n    r2 = quotient + ONE;\r\n  }\r\n  // Similar to the comparison in RoundNumberToIncrement, but multiplied by an\r\n  // extra sign to make sure we treat it as positive\r\n  const cmp = (compare(abs(remainder * TWO), increment) * (quantity < 0 ? -1 : 1) +\r\n    0) as -1 | 0 | 1;\r\n  const rounded = remainder === ZERO\r\n    ? quotient\r\n    : ApplyUnsignedRoundingMode(r1, r2, cmp, isEven(r1), unsignedRoundingMode);\r\n  return rounded * increment;\r\n}\r\n\r\nexport function RoundTemporalInstant(\r\n  epochNs: bigint,\r\n  increment: number,\r\n  unit: TimeUnitOrDay,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  const incrementNs = NS_PER_TIME_UNIT[unit] * increment;\r\n  return RoundNumberToIncrementAsIfPositive(epochNs, BigInt(incrementNs), roundingMode);\r\n}\r\n\r\nexport function RoundISODateTime(\r\n  isoDateTime: ISODateTime,\r\n  increment: number,\r\n  unit: UnitSmallerThanOrEqualTo<'day'>,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  AssertISODateTimeWithinLimits(isoDateTime);\r\n  const { year, month, day } = isoDateTime.isoDate;\r\n  const time = RoundTime(isoDateTime.time, increment, unit, roundingMode);\r\n  const isoDate = BalanceISODate(year, month, day + time.deltaDays);\r\n  return CombineISODateAndTimeRecord(isoDate, time);\r\n}\r\n\r\nexport function RoundTime(\r\n  { hour, minute, second, millisecond, microsecond, nanosecond }: TimeRecord,\r\n  increment: number,\r\n  unit: TimeUnitOrDay,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  let quantity;\r\n  switch (unit) {\r\n    case 'day':\r\n    case 'hour':\r\n      quantity = ((((hour * 60 + minute) * 60 + second) * 1000 + millisecond) * 1000 + microsecond) * 1000 + nanosecond;\r\n      break;\r\n    case 'minute':\r\n      quantity = (((minute * 60 + second) * 1000 + millisecond) * 1000 + microsecond) * 1000 + nanosecond;\r\n      break;\r\n    case 'second':\r\n      quantity = ((second * 1000 + millisecond) * 1000 + microsecond) * 1000 + nanosecond;\r\n      break;\r\n    case 'millisecond':\r\n      quantity = (millisecond * 1000 + microsecond) * 1000 + nanosecond;\r\n      break;\r\n    case 'microsecond':\r\n      quantity = microsecond * 1000 + nanosecond;\r\n      break;\r\n    case 'nanosecond':\r\n      quantity = nanosecond;\r\n  }\r\n  const nsPerUnit = NS_PER_TIME_UNIT[unit];\r\n  const result = RoundNumberToIncrement(quantity, nsPerUnit * increment, roundingMode) / nsPerUnit;\r\n  switch (unit) {\r\n    case 'day':\r\n      return { deltaDays: result, hour: 0, minute: 0, second: 0, millisecond: 0, microsecond: 0, nanosecond: 0 };\r\n    case 'hour':\r\n      return BalanceTime(result, 0, 0, 0, 0, 0);\r\n    case 'minute':\r\n      return BalanceTime(hour, result, 0, 0, 0, 0);\r\n    case 'second':\r\n      return BalanceTime(hour, minute, result, 0, 0, 0);\r\n    case 'millisecond':\r\n      return BalanceTime(hour, minute, second, result, 0, 0);\r\n    case 'microsecond':\r\n      return BalanceTime(hour, minute, second, millisecond, result, 0);\r\n    case 'nanosecond':\r\n      return BalanceTime(hour, minute, second, millisecond, microsecond, result);\r\n    default:\r\n      throw new Error(`Invalid unit ${unit}`);\r\n  }\r\n}\r\n\r\nexport function RoundTimeDuration(\r\n  timeDuration: TimeDuration,\r\n  increment: number,\r\n  unit: Temporal.TimeUnit,\r\n  roundingMode: Temporal.RoundingMode\r\n) {\r\n  // unit must be a time unit\r\n  const divisor = NS_PER_TIME_UNIT[unit];\r\n  return timeDuration.round(BigInt(divisor * increment), roundingMode);\r\n}\r\n\r\nexport function TotalTimeDuration(timeDuration: TimeDuration, unit: TimeUnitOrDay) {\r\n  const divisor = NS_PER_TIME_UNIT[unit];\r\n  return timeDuration.fdiv(BigInt(divisor));\r\n}\r\n\r\nexport function CompareISODate(isoDate1: ISODate, isoDate2: ISODate) {\r\n  if (isoDate1.year !== isoDate2.year) return ComparisonResult(isoDate1.year - isoDate2.year);\r\n  if (isoDate1.month !== isoDate2.month) return ComparisonResult(isoDate1.month - isoDate2.month);\r\n  if (isoDate1.day !== isoDate2.day) return ComparisonResult(isoDate1.day - isoDate2.day);\r\n  return 0;\r\n}\r\n\r\nexport function CompareTimeRecord(time1: TimeRecord, time2: TimeRecord) {\r\n  if (time1.hour !== time2.hour) return ComparisonResult(time1.hour - time2.hour);\r\n  if (time1.minute !== time2.minute) return ComparisonResult(time1.minute - time2.minute);\r\n  if (time1.second !== time2.second) return ComparisonResult(time1.second - time2.second);\r\n  if (time1.millisecond !== time2.millisecond) return ComparisonResult(time1.millisecond - time2.millisecond);\r\n  if (time1.microsecond !== time2.microsecond) return ComparisonResult(time1.microsecond - time2.microsecond);\r\n  if (time1.nanosecond !== time2.nanosecond) return ComparisonResult(time1.nanosecond - time2.nanosecond);\r\n  return 0;\r\n}\r\n\r\nexport function CompareISODateTime(isoDateTime1: ISODateTime, isoDateTime2: ISODateTime) {\r\n  const dateResult = CompareISODate(isoDateTime1.isoDate, isoDateTime2.isoDate);\r\n  if (dateResult !== 0) return dateResult;\r\n  return CompareTimeRecord(isoDateTime1.time, isoDateTime2.time);\r\n}\r\n\r\n// Defaults to native bigint, or something \"native bigint-like\".\r\n// For users of Temporal that are running in environments without native BigInt,\r\n// the only guarantee we should give is that the returned object's toString will\r\n// return a string containing an accurate base 10 value of this bigint. This\r\n// form factor should correctly interop with other bigint compat libraries\r\n// easily.\r\ntype ExternalBigInt = bigint;\r\n\r\nexport function ToBigIntExternal(arg: unknown): ExternalBigInt {\r\n  const jsbiBI = BigInt(arg as string | number | bigint | boolean);\r\n  if (typeof (globalThis as any).BigInt !== 'undefined') return (globalThis as any).BigInt(jsbiBI.toString(10));\r\n  return jsbiBI as unknown as ExternalBigInt;\r\n}\r\n\r\n// rounding modes supported: floor, ceil, trunc\r\nexport function epochNsToMs(epochNanosecondsParam: bigint, mode: 'floor' | 'ceil' | 'trunc'): number {\r\n  const epochNanoseconds = epochNanosecondsParam;\r\n  const { quotient, remainder } = divmod(epochNanoseconds, MILLION);\r\n  let epochMilliseconds = ToNumber(quotient);\r\n  if (mode === 'floor' && remainder < 0) epochMilliseconds -= 1;\r\n  if (mode === 'ceil' && remainder > 0) epochMilliseconds += 1;\r\n  return epochMilliseconds;\r\n}\r\n\r\nexport function epochMsToNs(epochMilliseconds: number): bigint {\r\n  if (!Number.isInteger(epochMilliseconds)) throw new RangeError('epoch milliseconds must be an integer');\r\n  return BigInt(epochMilliseconds) * MILLION;\r\n}\r\n\r\n// Note: This method returns values with bogus nanoseconds based on the previous iteration's\r\n// milliseconds. That way there is a guarantee that the full nanoseconds are always going to be\r\n// increasing at least and that the microsecond and nanosecond fields are likely to be non-zero.\r\nexport const SystemUTCEpochNanoSeconds: () => bigint = (() => {\r\n  let ns = BigInt(Date.now() % 1e6);\r\n  return () => {\r\n    const now = Date.now();\r\n    const ms = BigInt(now);\r\n    const result = epochMsToNs(now) + ns;\r\n    ns = ms % MILLION;\r\n    if (result > NS_MAX) return NS_MAX;\r\n    if (result < NS_MIN) return NS_MIN;\r\n    return result;\r\n  };\r\n})();\r\n\r\nexport function DefaultTimeZone() {\r\n  return new Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n}\r\n\r\nexport function ComparisonResult(value: number) {\r\n  return value < 0 ? -1 : value > 0 ? 1 : (value as 0);\r\n}\r\n\r\nexport function GetOptionsObject<T>(options: T) {\r\n  if (options === undefined) return Object.create(null) as NonNullable<T>;\r\n  if (IsObject(options) && options !== null) return options;\r\n  throw new TypeError(`Options parameter must be an object, not ${options === null ? 'null' : `${typeof options}`}`);\r\n}\r\n\r\nexport function CreateOnePropObject<K extends string, V>(propName: K, propValue: V): { [k in K]: V } {\r\n  const o = Object.create(null);\r\n  o[propName] = propValue;\r\n  return o;\r\n}\r\n\r\ntype StringlyTypedKeys<T> = Exclude<keyof T, symbol | number>;\r\nfunction GetOption<P extends StringlyTypedKeys<O>, O extends Partial<Record<P, unknown>>>(\r\n  options: O,\r\n  property: P,\r\n  allowedValues: ReadonlyArray<O[P]>,\r\n  fallback: undefined\r\n): O[P];\r\nfunction GetOption<\r\n  P extends StringlyTypedKeys<O>,\r\n  O extends Partial<Record<P, unknown>>,\r\n  Fallback extends Required<O>[P] | typeof REQUIRED | undefined\r\n>(\r\n  options: O,\r\n  property: P,\r\n  allowedValues: ReadonlyArray<O[P]>,\r\n  fallback: Fallback\r\n): Fallback extends undefined ? O[P] | undefined : Required<O>[P];\r\nfunction GetOption<\r\n  P extends StringlyTypedKeys<O>,\r\n  O extends Partial<Record<P, unknown>>,\r\n  Fallback extends Required<O>[P] | undefined\r\n>(\r\n  options: O,\r\n  property: P,\r\n  allowedValues: ReadonlyArray<O[P]>,\r\n  fallback: O[P]\r\n): Fallback extends undefined ? O[P] | undefined : Required<O>[P] {\r\n  let value = options[property];\r\n  if (value !== undefined) {\r\n    value = ToString(value) as O[P];\r\n    if (!allowedValues.includes(value)) {\r\n      throw new RangeError(`${property} must be one of ${allowedValues.join(', ')}, not ${value}`);\r\n    }\r\n    return value;\r\n  }\r\n  if (fallback === REQUIRED) throw new RangeError(`${property} option is required`);\r\n  return fallback;\r\n}\r\n\r\n// This is a temporary implementation. Ideally we'd rely on Intl.DateTimeFormat\r\n// here, to provide the latest CLDR alias data, when implementations catch up to\r\n// the ECMA-402 change. The aliases below are taken from\r\n// https://github.com/unicode-org/cldr/blob/main/common/bcp47/calendar.xml\r\nexport function CanonicalizeCalendar(idParam: string): BuiltinCalendarId {\r\n  const id = ASCIILowercase(idParam);\r\n\r\n  if (!BUILTIN_CALENDAR_IDS.includes(ASCIILowercase(id))) {\r\n    throw new RangeError(`invalid calendar identifier ${id}`);\r\n  }\r\n  uncheckedAssertNarrowedType<BuiltinCalendarId>(id, 'above code throws out any non-calendar IDs');\r\n\r\n  switch (id) {\r\n    case 'ethiopic-amete-alem':\r\n      // May need to be removed in the future.\r\n      // See https://github.com/tc39/ecma402/issues/285\r\n      return 'ethioaa';\r\n    // case 'gregorian':\r\n    // (Skip 'gregorian'. It isn't a valid identifier as it's a single\r\n    // subcomponent longer than 8 letters. It can only be used with the old\r\n    // @key=value syntax.)\r\n    case 'islamicc':\r\n      return 'islamic-civil';\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction ASCIILowercase<T extends string>(str: T): T {\r\n  // The spec defines this operation distinct from String.prototype.lowercase,\r\n  // so we'll follow the spec here. Note that nasty security issues that can\r\n  // happen for some use cases if you're comparing case-modified non-ASCII\r\n  // values. For example, Turkish's \"I\" character was the source of a security\r\n  // issue involving \"file://\" URLs. See\r\n  // https://haacked.com/archive/2012/07/05/turkish-i-problem-and-why-you-should-care.aspx/.\r\n  let lowercase = '';\r\n  for (let ix = 0; ix < str.length; ix++) {\r\n    const code = str.charCodeAt(ix);\r\n    if (code >= 0x41 && code <= 0x5a) {\r\n      lowercase += String.fromCharCode(code + 0x20);\r\n    } else {\r\n      lowercase += String.fromCharCode(code);\r\n    }\r\n  }\r\n  return lowercase as T;\r\n}\r\n\r\n// This function isn't in the spec, but we put it in the polyfill to avoid\r\n// repeating the same (long) error message in many files.\r\nexport function ValueOfThrows(constructorName: string): never {\r\n  const compareCode =\r\n    constructorName === 'PlainMonthDay'\r\n      ? 'Temporal.PlainDate.compare(obj1.toPlainDate(year), obj2.toPlainDate(year))'\r\n      : `Temporal.${constructorName}.compare(obj1, obj2)`;\r\n\r\n  throw new TypeError(\r\n    'Do not use built-in arithmetic operators with Temporal objects. ' +\r\n      `When comparing, use ${compareCode}, not obj1 > obj2. ` +\r\n      \"When coercing to strings, use `${obj}` or String(obj), not '' + obj. \" +\r\n      'When coercing to numbers, use properties or methods of the object, not `+obj`. ' +\r\n      'When concatenating with strings, use `${str}${obj}` or str.concat(obj), not str + obj. ' +\r\n      'In React, coerce to a string before rendering a Temporal object.'\r\n  );\r\n}\r\n\r\nconst OFFSET = new RegExp(`^${PARSE.offset.source}$`);\r\nconst OFFSET_WITH_PARTS = new RegExp(`^${PARSE.offsetWithParts.source}$`);\r\n\r\nfunction bisect(\r\n  getState: (epochMs: number) => number,\r\n  leftParam: number,\r\n  rightParam: number,\r\n  lstateParam = getState(leftParam),\r\n  rstateParam = getState(rightParam)\r\n) {\r\n  let left = leftParam;\r\n  let right = rightParam;\r\n  let lstate = lstateParam;\r\n  let rstate = rstateParam;\r\n  while (right - left > 1) {\r\n    let middle = Math.trunc((left + right) / 2);\r\n    const mstate = getState(middle);\r\n    if (mstate === lstate) {\r\n      left = middle;\r\n      lstate = mstate;\r\n    } else if (mstate === rstate) {\r\n      right = middle;\r\n      rstate = mstate;\r\n    } else {\r\n      /* c8 ignore next */ assertNotReached(`invalid state in bisection ${lstate} - ${mstate} - ${rstate}`);\r\n    }\r\n  }\r\n  return right;\r\n}\r\n","import * as ES from './ecmascript';\r\nimport { DefineIntrinsic } from './intrinsicclass';\r\nimport type { Temporal } from '..';\r\nimport type {\r\n  BuiltinCalendarId,\r\n  CalendarDateRecord,\r\n  CalendarFieldsRecord,\r\n  CalendarYMD,\r\n  DateDuration,\r\n  FieldKey,\r\n  ISODate,\r\n  ISODateToFieldsType,\r\n  MonthDayFromFieldsObject,\r\n  Overflow,\r\n  Resolve\r\n} from './internaltypes';\r\n\r\nfunction arrayFromSet<T>(src: Set<T>): T[] {\r\n  return [...src];\r\n}\r\n\r\nfunction calendarDateWeekOfYear(id: BuiltinCalendarId, isoDate: ISODate): { week: number; year: number } | undefined {\r\n  // Supports only ISO8601 calendar; can be updated to add support for other calendars.\r\n  // Returns undefined for calendars without a well-defined week calendar system.\r\n  // eslint-disable-next-line max-len\r\n  // Also see: https://github.com/unicode-org/icu/blob/ab72ab1d4a3c3f9beeb7d92b0c7817ca93dfdb04/icu4c/source/i18n/calendar.cpp#L1606\r\n  if (id !== 'iso8601') return undefined;\r\n  const calendar = impl[id];\r\n  let yow = isoDate.year;\r\n  const { dayOfWeek, dayOfYear, daysInYear } = calendar.isoToDate(isoDate, {\r\n    dayOfWeek: true,\r\n    dayOfYear: true,\r\n    daysInYear: true\r\n  });\r\n  const fdow = calendar.getFirstDayOfWeek();\r\n  const mdow = calendar.getMinimalDaysInFirstWeek();\r\n  ES.uncheckedAssertNarrowedType<number>(fdow, 'guaranteed to exist for iso8601');\r\n  ES.uncheckedAssertNarrowedType<number>(mdow, 'guaranteed to exist for iso8601');\r\n\r\n  // For both the input date and the first day of its calendar year, calculate the day of week\r\n  // relative to first day of week in the relevant calendar (e.g., in iso8601, relative to Monday).\r\n  let relDow = (dayOfWeek + 7 - fdow) % 7;\r\n  // Assuming the year length is less than 7000 days.\r\n  let relDowJan1 = (dayOfWeek - dayOfYear + 7001 - fdow) % 7;\r\n\r\n  let woy = Math.floor((dayOfYear - 1 + relDowJan1) / 7);\r\n  if (7 - relDowJan1 >= mdow) {\r\n    ++woy;\r\n  }\r\n\r\n  // Adjust for weeks at the year end that overlap into the previous or next calendar year.\r\n  if (woy == 0) {\r\n    // Check for last week of previous year; if true, handle the case for\r\n    // first week of next year\r\n    const prevYearCalendar = calendar.isoToDate(calendar.dateAdd(isoDate, { years: -1 }, 'constrain'), {\r\n      daysInYear: true\r\n    });\r\n    let prevDoy = dayOfYear + prevYearCalendar.daysInYear;\r\n    woy = weekNumber(fdow, mdow, prevDoy, dayOfWeek);\r\n    yow--;\r\n  } else {\r\n    // For it to be week 1 of the next year, dayOfYear must be >= lastDoy - 5\r\n    //          L-5                  L\r\n    // doy: 359 360 361 362 363 364 365 001\r\n    // dow:      1   2   3   4   5   6   7\r\n    let lastDoy = daysInYear;\r\n    if (dayOfYear >= lastDoy - 5) {\r\n      let lastRelDow = (relDow + lastDoy - dayOfYear) % 7;\r\n      if (lastRelDow < 0) {\r\n        lastRelDow += 7;\r\n      }\r\n      if (6 - lastRelDow >= mdow && dayOfYear + 7 - relDow > lastDoy) {\r\n        woy = 1;\r\n        yow++;\r\n      }\r\n    }\r\n  }\r\n  return { week: woy, year: yow };\r\n}\r\n\r\nfunction ISODateSurpasses(sign: -1 | 0 | 1, y1: number, m1: number, d1: number, isoDate2: ISODate) {\r\n  if (y1 !== isoDate2.year) {\r\n    if (sign * (y1 - isoDate2.year) > 0) return true;\r\n  } else if (m1 !== isoDate2.month) {\r\n    if (sign * (m1 - isoDate2.month) > 0) return true;\r\n  } else if (d1 !== isoDate2.day) {\r\n    if (sign * (d1 - isoDate2.day) > 0) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\ntype ResolveFieldsReturn<Type extends ISODateToFieldsType> = Resolve<\r\n  CalendarFieldsRecord & {\r\n    year: Type extends 'date' ? number : never;\r\n    month: number;\r\n    monthCode: string;\r\n    day: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * Shape of internal implementation of each built-in calendar. Note that\r\n * parameter types are simpler than CalendarProtocol because the `Calendar`\r\n * class performs validation and parameter normalization before handing control\r\n * over to CalendarImpl.\r\n *\r\n * There are two instances of this interface: one for the ISO calendar and\r\n * another that handles logic that's the same across all non-ISO calendars. The\r\n * latter is cloned for each non-ISO calendar at the end of this file.\r\n */\r\nexport interface CalendarImpl {\r\n  isoToDate<\r\n    Request extends Partial<Record<keyof CalendarDateRecord, true>>,\r\n    T extends {\r\n      [Field in keyof CalendarDateRecord]: Request extends { [K in Field]: true } ? CalendarDateRecord[Field] : never;\r\n    }\r\n  >(\r\n    isoDate: ISODate,\r\n    requestedFields: Request\r\n  ): T;\r\n  getFirstDayOfWeek(): number | undefined;\r\n  getMinimalDaysInFirstWeek(): number | undefined;\r\n  resolveFields<Type extends ISODateToFieldsType>(\r\n    fields: CalendarFieldsRecord,\r\n    type: Type\r\n  ): asserts fields is ResolveFieldsReturn<Type>;\r\n  dateToISO(fields: ResolveFieldsReturn<'date'>, overflow: Overflow): ISODate;\r\n  monthDayToISOReferenceDate(fields: ResolveFieldsReturn<'month-day'>, overflow: Overflow): ISODate;\r\n  dateAdd(date: ISODate, duration: Partial<DateDuration>, overflow: Overflow): ISODate;\r\n  dateUntil(one: ISODate, two: ISODate, largestUnit: 'year' | 'month' | 'week' | 'day'): DateDuration;\r\n  extraFields(fields: FieldKey[]): FieldKey[];\r\n  fieldKeysToIgnore(keys: FieldKey[]): FieldKey[];\r\n}\r\n\r\ntype CalendarImplementations = {\r\n  [k in BuiltinCalendarId]: CalendarImpl;\r\n};\r\n\r\n/**\r\n * Implementations for each calendar.\r\n * Registration for each of these calendars happens throughout this file. The ISO and non-ISO calendars are registered\r\n * separately - look for 'iso8601' for the ISO calendar registration, and all non-ISO calendar registrations happens\r\n * at the bottom of the file.\r\n */\r\nconst impl: CalendarImplementations = {} as unknown as CalendarImplementations;\r\n\r\n/**\r\n * Implementation for the ISO 8601 calendar. This is the only calendar that's\r\n * guaranteed to be supported by all ECMAScript implementations, including those\r\n * without Intl (ECMA-402) support.\r\n */\r\nimpl['iso8601'] = {\r\n  resolveFields(fields, type) {\r\n    if ((type === 'date' || type === 'year-month') && fields.year === undefined) {\r\n      throw new TypeError('year is required');\r\n    }\r\n    if ((type === 'date' || type === 'month-day') && fields.day === undefined) {\r\n      throw new TypeError('day is required');\r\n    }\r\n    Object.assign(fields, resolveNonLunisolarMonth(fields));\r\n  },\r\n  dateToISO(fields, overflow) {\r\n    return ES.RegulateISODate(fields.year, fields.month, fields.day, overflow);\r\n  },\r\n  monthDayToISOReferenceDate(fields, overflow) {\r\n    const referenceISOYear = 1972;\r\n    const { month, day } = ES.RegulateISODate(fields.year ?? referenceISOYear, fields.month, fields.day, overflow);\r\n    return { month, day, year: referenceISOYear };\r\n  },\r\n  extraFields() {\r\n    return [];\r\n  },\r\n  fieldKeysToIgnore(keys) {\r\n    const result = new Set<FieldKey>();\r\n    for (let ix = 0; ix < keys.length; ix++) {\r\n      const key = keys[ix];\r\n      result.add(key);\r\n      if (key === 'month') {\r\n        result.add('monthCode');\r\n      } else if (key === 'monthCode') {\r\n        result.add('month');\r\n      }\r\n    }\r\n    return arrayFromSet(result);\r\n  },\r\n  dateAdd(isoDate, { years = 0, months = 0, weeks = 0, days = 0 }, overflow) {\r\n    let { year, month, day } = isoDate;\r\n    year += years;\r\n    month += months;\r\n    ({ year, month } = ES.BalanceISOYearMonth(year, month));\r\n    ({ year, month, day } = ES.RegulateISODate(year, month, day, overflow));\r\n    day += days + 7 * weeks;\r\n    return ES.BalanceISODate(year, month, day);\r\n  },\r\n  dateUntil(one, two, largestUnit) {\r\n    const sign = -ES.CompareISODate(one, two);\r\n    if (sign === 0) return { years: 0, months: 0, weeks: 0, days: 0 };\r\n    ES.uncheckedAssertNarrowedType<-1 | 1>(sign, \"the - operator's return type is number\");\r\n\r\n    let years = 0;\r\n    let months = 0;\r\n    let intermediate;\r\n    if (largestUnit === 'year' || largestUnit === 'month') {\r\n      // We can skip right to the neighbourhood of the correct number of years,\r\n      // it'll be at least one less than two.year - one.year (unless it's zero)\r\n      let candidateYears = two.year - one.year;\r\n      if (candidateYears !== 0) candidateYears -= sign;\r\n      // loops at most twice\r\n      while (!ISODateSurpasses(sign, one.year + candidateYears, one.month, one.day, two)) {\r\n        years = candidateYears;\r\n        candidateYears += sign;\r\n      }\r\n\r\n      let candidateMonths = sign;\r\n      intermediate = ES.BalanceISOYearMonth(one.year + years, one.month + candidateMonths);\r\n      // loops at most 12 times\r\n      while (!ISODateSurpasses(sign, intermediate.year, intermediate.month, one.day, two)) {\r\n        months = candidateMonths;\r\n        candidateMonths += sign;\r\n        intermediate = ES.BalanceISOYearMonth(intermediate.year, intermediate.month + sign);\r\n      }\r\n\r\n      if (largestUnit === 'month') {\r\n        months += years * 12;\r\n        years = 0;\r\n      }\r\n    }\r\n\r\n    intermediate = ES.BalanceISOYearMonth(one.year + years, one.month + months);\r\n    const constrained = ES.ConstrainISODate(intermediate.year, intermediate.month, one.day);\r\n\r\n    let weeks = 0;\r\n    let days =\r\n      ES.ISODateToEpochDays(two.year, two.month - 1, two.day) -\r\n      ES.ISODateToEpochDays(constrained.year, constrained.month - 1, constrained.day);\r\n\r\n    if (largestUnit === 'week') {\r\n      weeks = Math.trunc(days / 7);\r\n      days %= 7;\r\n    }\r\n\r\n    return { years, months, weeks, days };\r\n  },\r\n  isoToDate<\r\n    Request extends Partial<Record<keyof CalendarDateRecord, true>>,\r\n    T extends {\r\n      [Field in keyof CalendarDateRecord]: Request extends { [K in Field]: true } ? CalendarDateRecord[Field] : never;\r\n    }\r\n  >({ year, month, day }: ISODate, requestedFields: Request): T {\r\n    // requestedFields parameter is not part of the spec text. It's an\r\n    // illustration of one way implementations may choose to optimize this\r\n    // operation.\r\n    const date: Partial<CalendarDateRecord> = {\r\n      era: undefined,\r\n      eraYear: undefined,\r\n      year,\r\n      month,\r\n      day,\r\n      daysInWeek: 7,\r\n      monthsInYear: 12\r\n    };\r\n    if (requestedFields.monthCode) date.monthCode = buildMonthCode(month);\r\n    if (requestedFields.dayOfWeek) {\r\n      // https://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week#Disparate_variation\r\n      const shiftedMonth = month + (month < 3 ? 10 : -2);\r\n      const shiftedYear = year - (month < 3 ? 1 : 0);\r\n\r\n      const century = Math.floor(shiftedYear / 100);\r\n      const yearInCentury = shiftedYear - century * 100;\r\n\r\n      const monthTerm = Math.floor(2.6 * shiftedMonth - 0.2);\r\n      const yearTerm = yearInCentury + Math.floor(yearInCentury / 4);\r\n      const centuryTerm = Math.floor(century / 4) - 2 * century;\r\n\r\n      const dow = (day + monthTerm + yearTerm + centuryTerm) % 7;\r\n\r\n      date.dayOfWeek = dow + (dow <= 0 ? 7 : 0);\r\n    }\r\n    if (requestedFields.dayOfYear) {\r\n      let days = day;\r\n      for (let m = month - 1; m > 0; m--) {\r\n        days += ES.ISODaysInMonth(year, m);\r\n      }\r\n      date.dayOfYear = days;\r\n    }\r\n    if (requestedFields.weekOfYear) date.weekOfYear = calendarDateWeekOfYear('iso8601', { year, month, day });\r\n    if (requestedFields.daysInMonth) date.daysInMonth = ES.ISODaysInMonth(year, month);\r\n    if (requestedFields.daysInYear || requestedFields.inLeapYear) {\r\n      date.inLeapYear = ES.LeapYear(year);\r\n      date.daysInYear = date.inLeapYear ? 366 : 365;\r\n    }\r\n    return date as T;\r\n  },\r\n  getFirstDayOfWeek() {\r\n    return 1;\r\n  },\r\n  getMinimalDaysInFirstWeek() {\r\n    return 4;\r\n  }\r\n};\r\n\r\n// Note: Built-in calendars other than iso8601 are not part of the Temporal\r\n// proposal for ECMA-262. These calendars will be standardized as part of\r\n// ECMA-402. Code below here includes an implementation of these calendars to\r\n// validate the Temporal API and to get feedback. However, native non-ISO\r\n// calendar behavior is at least somewhat implementation-defined, so may not\r\n// match this polyfill's output exactly.\r\n//\r\n// Some ES implementations don't include ECMA-402. For this reason, it's helpful\r\n// to ensure a clean separation between the ISO calendar implementation which is\r\n// a part of ECMA-262 and the non-ISO calendar implementation which requires\r\n// ECMA-402.\r\n//\r\n// To ensure this separation, the implementation is split. A `CalendarImpl`\r\n// interface defines the common operations between both ISO and non-ISO\r\n// calendars.\r\n\r\n/**\r\n * This type is passed through from CalendarImpl#dateFromFields().\r\n * `monthExtra` is additional information used internally to identify lunisolar leap months.\r\n */\r\ntype CalendarDateFields = CalendarFieldsRecord & { monthExtra?: string };\r\n\r\n/**\r\n * This is a \"fully populated\" calendar date record. It's only lacking\r\n * `era`/`eraYear` (which may not be present in all calendars) and `monthExtra`\r\n * which is only used in some cases.\r\n */\r\ntype FullCalendarDate = {\r\n  era?: string;\r\n  eraYear?: number;\r\n  year: number;\r\n  month: number;\r\n  monthCode: string;\r\n  day: number;\r\n  monthExtra?: string;\r\n};\r\n\r\n// The types below are various subsets of calendar dates\r\ntype CalendarYM = { year: number; month: number };\r\ntype CalendarYearOnly = { year: number };\r\ntype EraAndEraYear = { era: string; eraYear: number };\r\n\r\nfunction nonLeapMonthCodeNumberPart(monthCode: string) {\r\n  if (!monthCode.startsWith('M')) {\r\n    throw new RangeError(`Invalid month code: ${monthCode}.  Month codes must start with M.`);\r\n  }\r\n  const month = +monthCode.slice(1);\r\n  if (Number.isNaN(month)) throw new RangeError(`Invalid month code: ${monthCode}`);\r\n  return month;\r\n}\r\n\r\nfunction buildMonthCode(month: number, leap = false) {\r\n  const digitPart = `${month}`.padStart(2, '0');\r\n  const leapMarker = leap ? 'L' : '';\r\n  return `M${digitPart}${leapMarker}`;\r\n}\r\n\r\n/**\r\n * Safely merge a month, monthCode pair into an integer month.\r\n * If both are present, make sure they match.\r\n * This logic doesn't work for lunisolar calendars!\r\n * */\r\nfunction resolveNonLunisolarMonth<T extends { monthCode?: string; month?: number }>(\r\n  calendarDate: T,\r\n  overflow: Overflow | undefined = undefined,\r\n  monthsPerYear = 12\r\n) {\r\n  let { month, monthCode } = calendarDate;\r\n  if (monthCode === undefined) {\r\n    if (month === undefined) throw new TypeError('Either month or monthCode are required');\r\n    // The ISO calendar uses the default (undefined) value because it does\r\n    // constrain/reject after this method returns. Non-ISO calendars, however,\r\n    // rely on this function to constrain/reject out-of-range `month` values.\r\n    if (overflow === 'reject') ES.RejectToRange(month, 1, monthsPerYear);\r\n    if (overflow === 'constrain') month = ES.ConstrainToRange(month, 1, monthsPerYear);\r\n    monthCode = buildMonthCode(month);\r\n  } else {\r\n    const numberPart = nonLeapMonthCodeNumberPart(monthCode);\r\n    if (monthCode !== buildMonthCode(numberPart)) {\r\n      throw new RangeError(`Invalid month code: ${monthCode}`);\r\n    }\r\n    if (month !== undefined && month !== numberPart) {\r\n      throw new RangeError(`monthCode ${monthCode} and month ${month} must match if both are present`);\r\n    }\r\n    month = numberPart;\r\n    if (month < 1 || month > monthsPerYear) throw new RangeError(`Invalid monthCode: ${monthCode}`);\r\n  }\r\n  return { ...calendarDate, month, monthCode };\r\n}\r\n\r\nfunction weekNumber(firstDayOfWeek: number, minimalDaysInFirstWeek: number, desiredDay: number, dayOfWeek: number) {\r\n  let periodStartDayOfWeek = (dayOfWeek - firstDayOfWeek - desiredDay + 1) % 7;\r\n  if (periodStartDayOfWeek < 0) periodStartDayOfWeek += 7;\r\n  let weekNo = Math.floor((desiredDay + periodStartDayOfWeek - 1) / 7);\r\n  if (7 - periodStartDayOfWeek >= minimalDaysInFirstWeek) {\r\n    ++weekNo;\r\n  }\r\n  return weekNo;\r\n}\r\n\r\n/**\r\n * This prototype implementation of non-ISO calendars makes many repeated calls\r\n * to Intl APIs which may be slow (e.g. >0.2ms). This trivial cache will speed\r\n * up these repeat accesses. Each cache instance is associated (via a WeakMap)\r\n * to a specific Temporal object, which speeds up multiple calendar calls on the\r\n * same Temporal object instance.  No invalidation or pruning is necessary\r\n * because each object's cache is thrown away when the object is GC-ed.\r\n */\r\nclass OneObjectCache {\r\n  map = new Map();\r\n  calls = 0;\r\n  // now = OneObjectCache.monotonicTimestamp();\r\n  hits = 0;\r\n  misses = 0;\r\n\r\n  // static monotonicTimestamp() {\r\n  //   return performance?.now() ?? Date.now();\r\n  // }\r\n\r\n  constructor(cacheToClone?: OneObjectCache) {\r\n    if (cacheToClone !== undefined) {\r\n      let i = 0;\r\n      for (const entry of cacheToClone.map.entries()) {\r\n        if (++i > OneObjectCache.MAX_CACHE_ENTRIES) break;\r\n        this.map.set(...entry);\r\n      }\r\n    }\r\n  }\r\n  get(key: string) {\r\n    const result = this.map.get(key);\r\n    if (result) {\r\n      this.hits++;\r\n      this.report();\r\n    }\r\n    this.calls++;\r\n    return result;\r\n  }\r\n  set(key: string, value: unknown) {\r\n    this.map.set(key, value);\r\n    this.misses++;\r\n    this.report();\r\n  }\r\n  report() {\r\n    // if (this.calls === 0) return;\r\n    // const ms = OneObjectCache.monotonicTimestamp() - this.now;\r\n    // const hitRate = ((100 * this.hits) / this.calls).toFixed(0);\r\n    // const t = `${ms.toFixed(2)}ms`;\r\n    // // eslint-disable-next-line no-console\r\n    // console.log(`${this.calls} calls in ${t}. Hits: ${this.hits} (${hitRate}%). Misses: ${this.misses}.`);\r\n  }\r\n  setObject(obj: ISODate) {\r\n    if (OneObjectCache.objectMap.get(obj)) throw new RangeError('object already cached');\r\n    OneObjectCache.objectMap.set(obj, this);\r\n    this.report();\r\n  }\r\n\r\n  static objectMap = new WeakMap();\r\n  static MAX_CACHE_ENTRIES = 1000;\r\n\r\n  /**\r\n   * Returns a WeakMap-backed cache that's used to store expensive results\r\n   * that are associated with a particular Temporal object instance.\r\n   *\r\n   * @param obj - object to associate with the cache\r\n   */\r\n  static getCacheForObject(obj: ISODate) {\r\n    let cache = OneObjectCache.objectMap.get(obj);\r\n    if (!cache) {\r\n      cache = new OneObjectCache();\r\n      OneObjectCache.objectMap.set(obj, cache);\r\n    }\r\n    return cache;\r\n  }\r\n}\r\n\r\nfunction toUtcIsoDateString({ isoYear, isoMonth, isoDay }: { isoYear: number; isoMonth: number; isoDay: number }) {\r\n  const yearString = ES.ISOYearString(isoYear);\r\n  const monthString = ES.ISODateTimePartString(isoMonth);\r\n  const dayString = ES.ISODateTimePartString(isoDay);\r\n  return `${yearString}-${monthString}-${dayString}T00:00Z`;\r\n}\r\n\r\nfunction simpleDateDiff(one: CalendarYMD, two: CalendarYMD) {\r\n  return {\r\n    years: one.year - two.year,\r\n    months: one.month - two.month,\r\n    days: one.day - two.day\r\n  };\r\n}\r\n\r\n/**\r\n * Implementation helper that's common to all non-ISO calendars\r\n */\r\nabstract class HelperBase {\r\n  abstract id: BuiltinCalendarId;\r\n  abstract monthsInYear(calendarDate: CalendarYearOnly, cache?: OneObjectCache): number;\r\n  abstract maximumMonthLength(calendarDate?: CalendarYM): number;\r\n  abstract minimumMonthLength(calendarDate?: CalendarYM): number;\r\n  abstract maxLengthOfMonthCodeInAnyYear(monthCode: string): number;\r\n  abstract estimateIsoDate(calendarDate: CalendarYMD): ISODate;\r\n  abstract inLeapYear(calendarDate: CalendarYearOnly, cache?: OneObjectCache): boolean;\r\n  abstract calendarType: 'solar' | 'lunar' | 'lunisolar';\r\n  reviseIntlEra?<T extends Partial<EraAndEraYear>>(calendarDate: T, isoDate: ISODate): T;\r\n  eras: Era[] = [];\r\n  checkIcuBugs?(isoDate: ISODate): void;\r\n  private formatter?: globalThis.Intl.DateTimeFormat;\r\n  getFormatter() {\r\n    // `new Intl.DateTimeFormat()` is amazingly slow and chews up RAM. Per\r\n    // https://bugs.chromium.org/p/v8/issues/detail?id=6528#c4, we cache one\r\n    // DateTimeFormat instance per calendar. Caching is lazy so we only pay for\r\n    // calendars that are used. Note that the HelperBase class is extended to\r\n    // create each calendar's implementation before any cache is created, so\r\n    // each calendar gets its own separate cached formatter.\r\n    if (typeof this.formatter === 'undefined') {\r\n      this.formatter = new Intl.DateTimeFormat(`en-US-u-ca-${this.id}`, {\r\n        day: 'numeric',\r\n        month: 'numeric',\r\n        year: 'numeric',\r\n        era: 'short',\r\n        timeZone: 'UTC'\r\n      });\r\n    }\r\n    return this.formatter;\r\n  }\r\n  getCalendarParts(isoString: string) {\r\n    let dateTimeFormat = this.getFormatter();\r\n    let legacyDate = new Date(isoString);\r\n\r\n    // PlainDate's minimum date -271821-04-19 is one day beyond legacy Date's\r\n    // minimum -271821-04-20, because of accommodating all Instants in all time\r\n    // zones. If we have -271821-04-19, instead format -271821-04-20 in a time\r\n    // zone that pushes the result into the previous day. This is a slow path\r\n    // because we create a new Intl.DateTimeFormat.\r\n    if (isoString === '-271821-04-19T00:00Z') {\r\n      const options = dateTimeFormat.resolvedOptions();\r\n      dateTimeFormat = new Intl.DateTimeFormat(options.locale, {\r\n        ...(options as Intl.DateTimeFormatOptions),\r\n        timeZone: 'Etc/GMT+1'\r\n      });\r\n      legacyDate = new Date('-271821-04-20T00:00Z');\r\n    }\r\n\r\n    try {\r\n      return dateTimeFormat.formatToParts(legacyDate);\r\n    } catch (e) {\r\n      throw new RangeError(`Invalid ISO date: ${isoString}`);\r\n    }\r\n  }\r\n  isoToCalendarDate(isoDate: ISODate, cache: OneObjectCache): FullCalendarDate {\r\n    const { year: isoYear, month: isoMonth, day: isoDay } = isoDate;\r\n    const key = JSON.stringify({ func: 'isoToCalendarDate', isoYear, isoMonth, isoDay, id: this.id });\r\n    const cached = cache.get(key);\r\n    if (cached) return cached;\r\n\r\n    const isoString = toUtcIsoDateString({ isoYear, isoMonth, isoDay });\r\n    const parts = this.getCalendarParts(isoString);\r\n    const result: Partial<FullCalendarDate> = {};\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const { type, value } = parts[i];\r\n      // TODO: remove this type annotation when `relatedYear` gets into TS lib types\r\n      if (type === 'year' || type === ('relatedYear' as Intl.DateTimeFormatPartTypes)) {\r\n        if (this.hasEra) {\r\n          result.eraYear = +value;\r\n        } else {\r\n          result.year = +value;\r\n        }\r\n      }\r\n      if (type === 'month') {\r\n        const matches = /^([0-9]*)(.*?)$/.exec(value);\r\n        if (!matches || matches.length != 3 || (!matches[1] && !matches[2])) {\r\n          throw new RangeError(`Unexpected month: ${value}`);\r\n        }\r\n        // If the month has no numeric part (should only see this for the Hebrew\r\n        // calendar with newer FF / Chromium versions; see\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1751833) then set a\r\n        // placeholder month index of `1` and rely on the derived class to\r\n        // calculate the correct month index from the month name stored in\r\n        // `monthExtra`.\r\n        result.month = matches[1] ? +matches[1] : 1;\r\n        if (result.month < 1) {\r\n          throw new RangeError(\r\n            `Invalid month ${value} from ${isoString}[u-ca-${this.id}]` +\r\n              ' (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10527)'\r\n          );\r\n        }\r\n        if (result.month > 13) {\r\n          throw new RangeError(\r\n            `Invalid month ${value} from ${isoString}[u-ca-${this.id}]` +\r\n              ' (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10529)'\r\n          );\r\n        }\r\n\r\n        // The ICU formats for the Hebrew calendar no longer support a numeric\r\n        // month format. So we'll rely on the derived class to interpret it.\r\n        // `monthExtra` is also used on the Chinese calendar to handle a suffix\r\n        // \"bis\" indicating a leap month.\r\n        if (matches[2]) result.monthExtra = matches[2];\r\n      }\r\n      if (type === 'day') result.day = +value;\r\n      if (this.hasEra && type === 'era' && value != null && value !== '') {\r\n        // The convention for Temporal era values is lowercase, so following\r\n        // that convention in this prototype. Punctuation is removed, accented\r\n        // letters are normalized, and spaces are replaced with dashes.\r\n        // E.g.: \"ERA0\" => \"era0\", \"Before R.O.C.\" => \"before-roc\", \"En’ō\" => \"eno\"\r\n        // The call to normalize() and the replacement regex deals with era\r\n        // names that contain non-ASCII characters like Japanese eras. Also\r\n        // ignore extra content in parentheses like JPN era date ranges.\r\n        result.era = value\r\n          .split(' (')[0]\r\n          .normalize('NFD')\r\n          .replace(/[^-0-9 \\p{L}]/gu, '')\r\n          .replace(/ /g, '-')\r\n          .toLowerCase();\r\n      }\r\n    }\r\n    if (this.hasEra && result.eraYear === undefined) {\r\n      // Node 12 has outdated ICU data that lacks the `relatedYear` field in the\r\n      // output of Intl.DateTimeFormat.formatToParts.\r\n      throw new RangeError(\r\n        `Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`\r\n      );\r\n    }\r\n    // Translate old ICU era codes \"ERA0\" etc. into canonical era names.\r\n    if (this.hasEra) {\r\n      const replacement = this.eras.find((e) => result.era === e.genericName);\r\n      if (replacement) result.era = replacement.code;\r\n    }\r\n    // Translate eras that may be handled differently by Temporal vs. by Intl\r\n    // (e.g. Japanese pre-Meiji eras). See https://github.com/tc39/proposal-temporal/issues/526.\r\n    if (this.reviseIntlEra) {\r\n      const { era, eraYear } = this.reviseIntlEra(result, isoDate);\r\n      result.era = era;\r\n      result.eraYear = eraYear;\r\n    }\r\n    if (this.checkIcuBugs) this.checkIcuBugs(isoDate);\r\n\r\n    const calendarDate = this.adjustCalendarDate(result, cache, 'constrain', true);\r\n    if (calendarDate.year === undefined) throw new RangeError(`Missing year converting ${JSON.stringify(isoDate)}`);\r\n    if (calendarDate.month === undefined) {\r\n      throw new RangeError(`Missing month converting ${JSON.stringify(isoDate)}`);\r\n    }\r\n    if (calendarDate.day === undefined) throw new RangeError(`Missing day converting ${JSON.stringify(isoDate)}`);\r\n    cache.set(key, calendarDate);\r\n    // Also cache the reverse mapping\r\n    const cacheReverse = (overflow: Overflow) => {\r\n      const keyReverse = JSON.stringify({\r\n        func: 'calendarToIsoDate',\r\n        year: calendarDate.year,\r\n        month: calendarDate.month,\r\n        day: calendarDate.day,\r\n        overflow,\r\n        id: this.id\r\n      });\r\n      cache.set(keyReverse, isoDate);\r\n    };\r\n    (['constrain', 'reject'] as const).forEach(cacheReverse);\r\n    return calendarDate;\r\n  }\r\n  validateCalendarDate(calendarDate: Partial<FullCalendarDate>): asserts calendarDate is FullCalendarDate {\r\n    const { month, year, day, eraYear, monthCode, monthExtra } = calendarDate;\r\n    // When there's a suffix (e.g. \"5bis\" for a leap month in Chinese calendar)\r\n    // the derived class must deal with it.\r\n    if (monthExtra !== undefined) throw new RangeError('Unexpected `monthExtra` value');\r\n    if (year === undefined && eraYear === undefined) throw new TypeError('year or eraYear is required');\r\n    if (month === undefined && monthCode === undefined) throw new TypeError('month or monthCode is required');\r\n    if (day === undefined) throw new RangeError('Missing day');\r\n    if (monthCode !== undefined) {\r\n      if (typeof monthCode !== 'string') {\r\n        throw new RangeError(`monthCode must be a string, not ${typeof monthCode}`);\r\n      }\r\n      if (!/^M([01]?\\d)(L?)$/.test(monthCode)) {\r\n        throw new RangeError(`Invalid monthCode: ${monthCode}`);\r\n      }\r\n    }\r\n    if (this.hasEra) {\r\n      if ((calendarDate['era'] === undefined) !== (calendarDate['eraYear'] === undefined)) {\r\n        throw new TypeError('properties era and eraYear must be provided together');\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Allows derived calendars to add additional fields and/or to make\r\n   * adjustments e.g. to set the era based on the date or to revise the month\r\n   * number in lunisolar calendars per\r\n   * https://github.com/tc39/proposal-temporal/issues/1203.\r\n   *\r\n   * The base implementation fills in missing values by assuming the simplest\r\n   * possible calendar:\r\n   * - no eras\r\n   * - non-lunisolar calendar (no leap months)\r\n   * */\r\n  adjustCalendarDate(\r\n    calendarDateParam: Partial<FullCalendarDate>,\r\n    cache: OneObjectCache | undefined = undefined,\r\n    overflow: Overflow = 'constrain',\r\n    // This param is only used by derived classes\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    fromLegacyDate = false\r\n  ): FullCalendarDate {\r\n    if (this.calendarType === 'lunisolar') throw new RangeError('Override required for lunisolar calendars');\r\n    let calendarDate = calendarDateParam;\r\n    this.validateCalendarDate(calendarDate);\r\n    const largestMonth = this.monthsInYear(calendarDate, cache);\r\n    let { month, monthCode } = calendarDate;\r\n\r\n    ({ month, monthCode } = resolveNonLunisolarMonth(calendarDate, overflow, largestMonth));\r\n    return { ...(calendarDate as typeof calendarDate & CalendarYMD), month, monthCode };\r\n  }\r\n  regulateMonthDayNaive(calendarDate: FullCalendarDate, overflow: Overflow, cache: OneObjectCache): FullCalendarDate {\r\n    const largestMonth = this.monthsInYear(calendarDate, cache);\r\n    let { month, day } = calendarDate;\r\n    if (overflow === 'reject') {\r\n      ES.RejectToRange(month, 1, largestMonth);\r\n      ES.RejectToRange(day, 1, this.maximumMonthLength(calendarDate));\r\n    } else {\r\n      month = ES.ConstrainToRange(month, 1, largestMonth);\r\n      day = ES.ConstrainToRange(day, 1, this.maximumMonthLength({ ...calendarDate, month }));\r\n    }\r\n    return { ...calendarDate, month, day };\r\n  }\r\n  calendarToIsoDate(dateParam: CalendarDateFields, overflow: Overflow = 'constrain', cache: OneObjectCache): ISODate {\r\n    const originalDate = dateParam as Partial<FullCalendarDate>;\r\n    // First, normalize the calendar date to ensure that (year, month, day)\r\n    // are all present, converting monthCode and eraYear if needed.\r\n    let date = this.adjustCalendarDate(dateParam, cache, overflow, false);\r\n\r\n    // Fix obviously out-of-bounds values. Values that are valid generally, but\r\n    // not in this particular year, may not be caught here for some calendars.\r\n    // If so, these will be handled lower below.\r\n    date = this.regulateMonthDayNaive(date, overflow, cache);\r\n\r\n    const { year, month, day } = date;\r\n    const key = JSON.stringify({ func: 'calendarToIsoDate', year, month, day, overflow, id: this.id });\r\n    let cached = cache.get(key);\r\n    if (cached) return cached;\r\n    // If YMD are present in the input but the input has been constrained\r\n    // already, then cache both the original value and the constrained value.\r\n    let keyOriginal;\r\n    if (\r\n      originalDate.year !== undefined &&\r\n      originalDate.month !== undefined &&\r\n      originalDate.day !== undefined &&\r\n      (originalDate.year !== date.year || originalDate.month !== date.month || originalDate.day !== date.day)\r\n    ) {\r\n      keyOriginal = JSON.stringify({\r\n        func: 'calendarToIsoDate',\r\n        year: originalDate.year,\r\n        month: originalDate.month,\r\n        day: originalDate.day,\r\n        overflow,\r\n        id: this.id\r\n      });\r\n      cached = cache.get(keyOriginal);\r\n      if (cached) return cached;\r\n    }\r\n\r\n    // First, try to roughly guess the result\r\n    let isoEstimate = this.estimateIsoDate({ year, month, day });\r\n    const calculateSameMonthResult = (diffDays: number) => {\r\n      // If the estimate is in the same year & month as the target, then we can\r\n      // calculate the result exactly and short-circuit any additional logic.\r\n      // This optimization assumes that months are continuous. It would break if\r\n      // a calendar skipped days, like the Julian->Gregorian switchover. But\r\n      // current ICU calendars only skip days (japanese/roc/buddhist) because of\r\n      // a bug (https://bugs.chromium.org/p/chromium/issues/detail?id=1173158)\r\n      // that's currently worked around by a custom calendarToIsoDate\r\n      // implementation in those calendars. So this optimization should be safe\r\n      // for all ICU calendars.\r\n      let testIsoEstimate = this.addDaysIso(isoEstimate, diffDays);\r\n      if (date.day > this.minimumMonthLength(date)) {\r\n        // There's a chance that the calendar date is out of range. Throw or\r\n        // constrain if so.\r\n        let testCalendarDate = this.isoToCalendarDate(testIsoEstimate, cache);\r\n        while (testCalendarDate.month !== month || testCalendarDate.year !== year) {\r\n          if (overflow === 'reject') {\r\n            throw new RangeError(`day ${day} does not exist in month ${month} of year ${year}`);\r\n          }\r\n          // Back up a day at a time until we're not hanging over the month end\r\n          testIsoEstimate = this.addDaysIso(testIsoEstimate, -1);\r\n          testCalendarDate = this.isoToCalendarDate(testIsoEstimate, cache);\r\n        }\r\n      }\r\n      return testIsoEstimate;\r\n    };\r\n    let sign = 0;\r\n    let roundtripEstimate = this.isoToCalendarDate(isoEstimate, cache);\r\n    let diff = simpleDateDiff(date, roundtripEstimate);\r\n    if (diff.years !== 0 || diff.months !== 0 || diff.days !== 0) {\r\n      const diffTotalDaysEstimate = diff.years * 365 + diff.months * 30 + diff.days;\r\n      isoEstimate = this.addDaysIso(isoEstimate, diffTotalDaysEstimate);\r\n      roundtripEstimate = this.isoToCalendarDate(isoEstimate, cache);\r\n      diff = simpleDateDiff(date, roundtripEstimate);\r\n      if (diff.years === 0 && diff.months === 0) {\r\n        isoEstimate = calculateSameMonthResult(diff.days);\r\n      } else {\r\n        sign = this.compareCalendarDates(date, roundtripEstimate);\r\n      }\r\n    }\r\n    // If the initial guess is not in the same month, then bisect the\r\n    // distance to the target, starting with 8 days per step.\r\n    let increment = 8;\r\n    while (sign) {\r\n      isoEstimate = this.addDaysIso(isoEstimate, sign * increment);\r\n      const oldRoundtripEstimate = roundtripEstimate;\r\n      roundtripEstimate = this.isoToCalendarDate(isoEstimate, cache);\r\n      const oldSign = sign;\r\n      sign = this.compareCalendarDates(date, roundtripEstimate);\r\n      if (sign) {\r\n        diff = simpleDateDiff(date, roundtripEstimate);\r\n        if (diff.years === 0 && diff.months === 0) {\r\n          isoEstimate = calculateSameMonthResult(diff.days);\r\n          // Signal the loop condition that there's a match.\r\n          sign = 0;\r\n        } else if (oldSign && sign !== oldSign) {\r\n          if (increment > 1) {\r\n            // If the estimate overshot the target, try again with a smaller increment\r\n            // in the reverse direction.\r\n            increment /= 2;\r\n          } else {\r\n            // Increment is 1, and neither the previous estimate nor the new\r\n            // estimate is correct. The only way that can happen is if the\r\n            // original date was an invalid value that will be constrained or\r\n            // rejected here.\r\n            if (overflow === 'reject') {\r\n              throw new RangeError(`Can't find ISO date from calendar date: ${JSON.stringify({ ...originalDate })}`);\r\n            } else {\r\n              // To constrain, pick the earliest value\r\n              const order = this.compareCalendarDates(roundtripEstimate, oldRoundtripEstimate);\r\n              // If current value is larger, then back up to the previous value.\r\n              if (order > 0) isoEstimate = this.addDaysIso(isoEstimate, -1);\r\n              sign = 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    cache.set(key, isoEstimate);\r\n    if (keyOriginal) cache.set(keyOriginal, isoEstimate);\r\n    if (\r\n      date.year === undefined ||\r\n      date.month === undefined ||\r\n      date.day === undefined ||\r\n      date.monthCode === undefined ||\r\n      (this.hasEra && (date.era === undefined || date.eraYear === undefined))\r\n    ) {\r\n      throw new RangeError('Unexpected missing property');\r\n    }\r\n    return isoEstimate;\r\n  }\r\n  compareCalendarDates(date1: CalendarYMD, date2: CalendarYMD) {\r\n    if (date1.year !== date2.year) return ES.ComparisonResult(date1.year - date2.year);\r\n    if (date1.month !== date2.month) return ES.ComparisonResult(date1.month - date2.month);\r\n    if (date1.day !== date2.day) return ES.ComparisonResult(date1.day - date2.day);\r\n    return 0;\r\n  }\r\n  /** Ensure that a calendar date actually exists. If not, return the closest earlier date. */\r\n  regulateDate(calendarDate: CalendarYMD, overflow: Overflow = 'constrain', cache: OneObjectCache): FullCalendarDate {\r\n    const isoDate = this.calendarToIsoDate(calendarDate, overflow, cache);\r\n    return this.isoToCalendarDate(isoDate, cache);\r\n  }\r\n  addDaysIso(isoDate: ISODate, days: number): ISODate {\r\n    const added = ES.BalanceISODate(isoDate.year, isoDate.month, isoDate.day + days);\r\n    return added;\r\n  }\r\n  addDaysCalendar(calendarDate: CalendarYMD, days: number, cache: OneObjectCache): FullCalendarDate {\r\n    const isoDate = this.calendarToIsoDate(calendarDate, 'constrain', cache);\r\n    const addedIso = this.addDaysIso(isoDate, days);\r\n    const addedCalendar = this.isoToCalendarDate(addedIso, cache);\r\n    return addedCalendar;\r\n  }\r\n  addMonthsCalendar(\r\n    calendarDateParam: CalendarYMD,\r\n    months: number,\r\n    overflow: Overflow,\r\n    cache: OneObjectCache\r\n  ): CalendarYMD {\r\n    let calendarDate = calendarDateParam;\r\n    const { day } = calendarDate;\r\n    for (let i = 0, absMonths = Math.abs(months); i < absMonths; i++) {\r\n      const { month } = calendarDate;\r\n      const oldCalendarDate = calendarDate;\r\n      const days =\r\n        months < 0\r\n          ? -Math.max(day, this.daysInPreviousMonth(calendarDate, cache))\r\n          : this.daysInMonth(calendarDate, cache);\r\n      const isoDate = this.calendarToIsoDate(calendarDate, 'constrain', cache);\r\n      let addedIso = this.addDaysIso(isoDate, days);\r\n      calendarDate = this.isoToCalendarDate(addedIso, cache);\r\n\r\n      // Normally, we can advance one month by adding the number of days in the\r\n      // current month. However, if we're at the end of the current month and\r\n      // the next month has fewer days, then we rolled over to the after-next\r\n      // month. Below we detect this condition and back up until we're back in\r\n      // the desired month.\r\n      if (months > 0) {\r\n        const monthsInOldYear = this.monthsInYear(oldCalendarDate, cache);\r\n        while (calendarDate.month - 1 !== month % monthsInOldYear) {\r\n          addedIso = this.addDaysIso(addedIso, -1);\r\n          calendarDate = this.isoToCalendarDate(addedIso, cache);\r\n        }\r\n      }\r\n\r\n      if (calendarDate.day !== day) {\r\n        // try to retain the original day-of-month, if possible\r\n        calendarDate = this.regulateDate({ ...calendarDate, day }, 'constrain', cache);\r\n      }\r\n    }\r\n    if (overflow === 'reject' && calendarDate.day !== day) {\r\n      throw new RangeError(`Day ${day} does not exist in resulting calendar month`);\r\n    }\r\n    return calendarDate;\r\n  }\r\n  addCalendar(\r\n    calendarDate: CalendarYMD & { monthCode: string },\r\n    { years = 0, months = 0, weeks = 0, days = 0 },\r\n    overflow: Overflow,\r\n    cache: OneObjectCache\r\n  ): FullCalendarDate {\r\n    const { year, day, monthCode } = calendarDate;\r\n    const addedYears = this.adjustCalendarDate({ year: year + years, monthCode, day }, cache);\r\n    const addedMonths = this.addMonthsCalendar(addedYears, months, overflow, cache);\r\n    const initialDays = days + weeks * 7;\r\n    const addedDays = this.addDaysCalendar(addedMonths, initialDays, cache);\r\n    return addedDays;\r\n  }\r\n  untilCalendar(\r\n    calendarOne: FullCalendarDate,\r\n    calendarTwo: FullCalendarDate,\r\n    largestUnit: Temporal.DateUnit,\r\n    cache: OneObjectCache\r\n  ): { years: number; months: number; weeks: number; days: number } {\r\n    let days = 0;\r\n    let weeks = 0;\r\n    let months = 0;\r\n    let years = 0;\r\n    switch (largestUnit) {\r\n      case 'day':\r\n        days = this.calendarDaysUntil(calendarOne, calendarTwo, cache);\r\n        break;\r\n      case 'week': {\r\n        const totalDays = this.calendarDaysUntil(calendarOne, calendarTwo, cache);\r\n        days = totalDays % 7;\r\n        weeks = (totalDays - days) / 7;\r\n        break;\r\n      }\r\n      case 'month':\r\n      case 'year': {\r\n        const sign = this.compareCalendarDates(calendarTwo, calendarOne);\r\n        if (!sign) {\r\n          return { years: 0, months: 0, weeks: 0, days: 0 };\r\n        }\r\n        const diffYears = calendarTwo.year - calendarOne.year;\r\n        const diffDays = calendarTwo.day - calendarOne.day;\r\n        if (largestUnit === 'year' && diffYears) {\r\n          let diffInYearSign = 0;\r\n          if (calendarTwo.monthCode > calendarOne.monthCode) diffInYearSign = 1;\r\n          if (calendarTwo.monthCode < calendarOne.monthCode) diffInYearSign = -1;\r\n          if (!diffInYearSign) diffInYearSign = Math.sign(diffDays);\r\n          const isOneFurtherInYear = diffInYearSign * sign < 0;\r\n          years = isOneFurtherInYear ? diffYears - sign : diffYears;\r\n        }\r\n        const yearsAdded = years ? this.addCalendar(calendarOne, { years }, 'constrain', cache) : calendarOne;\r\n        // Now we have less than one year remaining. Add one month at a time\r\n        // until we go over the target, then back up one month and calculate\r\n        // remaining days and weeks.\r\n        let current;\r\n        let next: CalendarYMD = yearsAdded;\r\n        do {\r\n          months += sign;\r\n          current = next;\r\n          next = this.addMonthsCalendar(current, sign, 'constrain', cache);\r\n          if (next.day !== calendarOne.day) {\r\n            // In case the day was constrained down, try to un-constrain it\r\n            next = this.regulateDate({ ...next, day: calendarOne.day }, 'constrain', cache);\r\n          }\r\n        } while (this.compareCalendarDates(calendarTwo, next) * sign >= 0);\r\n        months -= sign; // correct for loop above which overshoots by 1\r\n        const remainingDays = this.calendarDaysUntil(current, calendarTwo, cache);\r\n        days = remainingDays;\r\n        break;\r\n      }\r\n    }\r\n    return { years, months, weeks, days };\r\n  }\r\n  daysInMonth(calendarDate: CalendarYMD, cache: OneObjectCache): number {\r\n    // Add enough days to roll over to the next month. One we're in the next\r\n    // month, we can calculate the length of the current month. NOTE: This\r\n    // algorithm assumes that months are continuous. It would break if a\r\n    // calendar skipped days, like the Julian->Gregorian switchover. But current\r\n    // ICU calendars only skip days (japanese/roc/buddhist) because of a bug\r\n    // (https://bugs.chromium.org/p/chromium/issues/detail?id=1173158) that's\r\n    // currently worked around by a custom calendarToIsoDate implementation in\r\n    // those calendars. So this code should be safe for all ICU calendars.\r\n    const { day } = calendarDate;\r\n    const max = this.maximumMonthLength(calendarDate);\r\n    const min = this.minimumMonthLength(calendarDate);\r\n    // easiest case: we already know the month length if min and max are the same.\r\n    if (min === max) return min;\r\n\r\n    // Add enough days to get into the next month, without skipping it\r\n    const increment = day <= max - min ? max : min;\r\n    const isoDate = this.calendarToIsoDate(calendarDate, 'constrain', cache);\r\n    const addedIsoDate = this.addDaysIso(isoDate, increment);\r\n    const addedCalendarDate = this.isoToCalendarDate(addedIsoDate, cache);\r\n\r\n    // Now back up to the last day of the original month\r\n    const endOfMonthIso = this.addDaysIso(addedIsoDate, -addedCalendarDate.day);\r\n    const endOfMonthCalendar = this.isoToCalendarDate(endOfMonthIso, cache);\r\n    return endOfMonthCalendar.day;\r\n  }\r\n  daysInPreviousMonth(calendarDate: CalendarYMD, cache: OneObjectCache): number {\r\n    const { day, month, year } = calendarDate;\r\n\r\n    // Check to see if we already know the month length, and return it if so\r\n    const previousMonthYear = month > 1 ? year : year - 1;\r\n    let previousMonthDate = { year: previousMonthYear, month, day: 1 };\r\n    const previousMonth = month > 1 ? month - 1 : this.monthsInYear(previousMonthDate, cache);\r\n    previousMonthDate = { ...previousMonthDate, month: previousMonth };\r\n    const min = this.minimumMonthLength(previousMonthDate);\r\n    const max = this.maximumMonthLength(previousMonthDate);\r\n    if (min === max) return max;\r\n\r\n    const isoDate = this.calendarToIsoDate(calendarDate, 'constrain', cache);\r\n    const lastDayOfPreviousMonthIso = this.addDaysIso(isoDate, -day);\r\n    const lastDayOfPreviousMonthCalendar = this.isoToCalendarDate(lastDayOfPreviousMonthIso, cache);\r\n    return lastDayOfPreviousMonthCalendar.day;\r\n  }\r\n  startOfCalendarYear(calendarDate: CalendarYearOnly): CalendarYMD & { monthCode: string } {\r\n    return { year: calendarDate.year, month: 1, monthCode: 'M01', day: 1 };\r\n  }\r\n  startOfCalendarMonth(calendarDate: CalendarYM): CalendarYMD {\r\n    return { year: calendarDate.year, month: calendarDate.month, day: 1 };\r\n  }\r\n  calendarDaysUntil(calendarOne: CalendarYMD, calendarTwo: CalendarYMD, cache: OneObjectCache): number {\r\n    const oneIso = this.calendarToIsoDate(calendarOne, 'constrain', cache);\r\n    const twoIso = this.calendarToIsoDate(calendarTwo, 'constrain', cache);\r\n    return (\r\n      ES.ISODateToEpochDays(twoIso.year, twoIso.month - 1, twoIso.day) -\r\n      ES.ISODateToEpochDays(oneIso.year, oneIso.month - 1, oneIso.day)\r\n    );\r\n  }\r\n  // Override if calendar uses eras\r\n  hasEra = false;\r\n  // See https://github.com/tc39/proposal-temporal/issues/1784\r\n  erasBeginMidYear = false;\r\n  // Override this to shortcut the search space if certain month codes only\r\n  // occur long in the past\r\n  monthDaySearchStartYear(monthCode: string, day: number) {\r\n    void monthCode, day;\r\n    return 1972;\r\n  }\r\n  monthDayFromFields(fields: MonthDayFromFieldsObject, overflow: Overflow, cache: OneObjectCache): ISODate {\r\n    let { era, eraYear, year, month, monthCode, day } = fields;\r\n    if (month !== undefined && year === undefined && (!this.hasEra || era === undefined || eraYear === undefined)) {\r\n      throw new TypeError('when month is present, year (or era and eraYear) are required');\r\n    }\r\n    if (monthCode === undefined || year !== undefined || (this.hasEra && eraYear !== undefined)) {\r\n      // Apply overflow behaviour to year/month/day, to get correct monthCode/day\r\n      ({ monthCode, day } = this.isoToCalendarDate(this.calendarToIsoDate(fields, overflow, cache), cache));\r\n    }\r\n\r\n    let isoYear, isoMonth, isoDay;\r\n    let closestCalendar, closestIso;\r\n    // Look backwards starting from one of the calendar years spanning ISO year\r\n    // 1972, up to 20 calendar years prior, to find a year that has this month\r\n    // and day. Normal months and days will match immediately, but for leap days\r\n    // and leap months we may have to look for a while. For searches longer than\r\n    // 20 years, override the start date in monthDaySearchStartYear.\r\n    const startDateIso = {\r\n      year: this.monthDaySearchStartYear(monthCode, day),\r\n      month: 12,\r\n      day: 31\r\n    };\r\n    const calendarOfStartDateIso = this.isoToCalendarDate(startDateIso, cache);\r\n    // Note: relies on lexicographical ordering of monthCodes\r\n    const calendarYear =\r\n      calendarOfStartDateIso.monthCode > monthCode ||\r\n      (calendarOfStartDateIso.monthCode === monthCode && calendarOfStartDateIso.day >= day)\r\n        ? calendarOfStartDateIso.year\r\n        : calendarOfStartDateIso.year - 1;\r\n    for (let i = 0; i < 20; i++) {\r\n      const testCalendarDate: FullCalendarDate = this.adjustCalendarDate(\r\n        { day, monthCode, year: calendarYear - i },\r\n        cache\r\n      );\r\n      const isoDate = this.calendarToIsoDate(testCalendarDate, 'constrain', cache);\r\n      const roundTripCalendarDate = this.isoToCalendarDate(isoDate, cache);\r\n      ({ year: isoYear, month: isoMonth, day: isoDay } = isoDate);\r\n      if (roundTripCalendarDate.monthCode === monthCode && roundTripCalendarDate.day === day) {\r\n        return { month: isoMonth, day: isoDay, year: isoYear };\r\n      } else if (overflow === 'constrain') {\r\n        // If the requested day is never present in any instance of this month\r\n        // code, and the round trip date is an instance of this month code with\r\n        // the most possible days, we are as close as we can get.\r\n        const maxDayForMonthCode = this.maxLengthOfMonthCodeInAnyYear(roundTripCalendarDate.monthCode);\r\n        if (\r\n          roundTripCalendarDate.monthCode === monthCode &&\r\n          roundTripCalendarDate.day === maxDayForMonthCode &&\r\n          day > maxDayForMonthCode\r\n        ) {\r\n          return { month: isoMonth, day: isoDay, year: isoYear };\r\n        }\r\n        // non-ISO constrain algorithm tries to find the closest date in a matching month\r\n        if (\r\n          closestCalendar === undefined ||\r\n          (roundTripCalendarDate.monthCode === closestCalendar.monthCode &&\r\n            roundTripCalendarDate.day > closestCalendar.day)\r\n        ) {\r\n          closestCalendar = roundTripCalendarDate;\r\n          closestIso = isoDate;\r\n        }\r\n      }\r\n    }\r\n    if (overflow === 'constrain' && closestIso !== undefined) return closestIso;\r\n    throw new RangeError(`No recent ${this.id} year with monthCode ${monthCode} and day ${day}`);\r\n  }\r\n  getFirstDayOfWeek(): number | undefined {\r\n    return undefined;\r\n  }\r\n  getMinimalDaysInFirstWeek(): number | undefined {\r\n    return undefined;\r\n  }\r\n}\r\n\r\ninterface HebrewMonthInfo {\r\n  [m: string]: (\r\n    | {\r\n        leap: undefined;\r\n        regular: number;\r\n      }\r\n    | {\r\n        leap: number;\r\n        regular: undefined;\r\n      }\r\n    | {\r\n        leap: number;\r\n        regular: number;\r\n      }\r\n  ) & {\r\n    monthCode: string;\r\n    days:\r\n      | number\r\n      | {\r\n          min: number;\r\n          max: number;\r\n        };\r\n  };\r\n}\r\n\r\nclass HebrewHelper extends HelperBase {\r\n  id = 'hebrew' as const;\r\n  calendarType = 'lunisolar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly) {\r\n    const { year } = calendarDate;\r\n    // FYI: In addition to adding a month in leap years, the Hebrew calendar\r\n    // also has per-year changes to the number of days of Heshvan and Kislev.\r\n    // Given that these can be calculated by counting the number of days in\r\n    // those months, I assume that these DO NOT need to be exposed as\r\n    // Hebrew-only prototype fields or methods.\r\n    return (7 * year + 1) % 19 < 7;\r\n  }\r\n  monthsInYear(calendarDate: CalendarYearOnly) {\r\n    return this.inLeapYear(calendarDate) ? 13 : 12;\r\n  }\r\n  minimumMonthLength(calendarDate: CalendarYM) {\r\n    return this.minMaxMonthLength(calendarDate, 'min');\r\n  }\r\n  maximumMonthLength(calendarDate: CalendarYM) {\r\n    return this.minMaxMonthLength(calendarDate, 'max');\r\n  }\r\n  minMaxMonthLength(calendarDate: CalendarYM, minOrMax: 'min' | 'max') {\r\n    const { month, year } = calendarDate;\r\n    const monthCode = this.getMonthCode(year, month);\r\n    const monthInfo = Object.entries(this.months).find((m) => m[1].monthCode === monthCode);\r\n    if (monthInfo === undefined) throw new RangeError(`unmatched Hebrew month: ${month}`);\r\n    const daysInMonth = monthInfo[1].days;\r\n    return typeof daysInMonth === 'number' ? daysInMonth : daysInMonth[minOrMax];\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    return ['M04', 'M06', 'M08', 'M10', 'M12'].includes(monthCode) ? 29 : 30;\r\n  }\r\n  /** Take a guess at what ISO date a particular calendar date corresponds to */\r\n  estimateIsoDate(calendarDate: CalendarYMD) {\r\n    const { year } = calendarDate;\r\n    return { year: year - 3760, month: 1, day: 1 };\r\n  }\r\n  months: HebrewMonthInfo = {\r\n    Tishri: { leap: 1, regular: 1, monthCode: 'M01', days: 30 },\r\n    Heshvan: { leap: 2, regular: 2, monthCode: 'M02', days: { min: 29, max: 30 } },\r\n    Kislev: { leap: 3, regular: 3, monthCode: 'M03', days: { min: 29, max: 30 } },\r\n    Tevet: { leap: 4, regular: 4, monthCode: 'M04', days: 29 },\r\n    Shevat: { leap: 5, regular: 5, monthCode: 'M05', days: 30 },\r\n    Adar: { leap: undefined, regular: 6, monthCode: 'M06', days: 29 },\r\n    'Adar I': { leap: 6, regular: undefined, monthCode: 'M05L', days: 30 },\r\n    'Adar II': { leap: 7, regular: undefined, monthCode: 'M06', days: 29 },\r\n    Nisan: { leap: 8, regular: 7, monthCode: 'M07', days: 30 },\r\n    Iyar: { leap: 9, regular: 8, monthCode: 'M08', days: 29 },\r\n    Sivan: { leap: 10, regular: 9, monthCode: 'M09', days: 30 },\r\n    Tamuz: { leap: 11, regular: 10, monthCode: 'M10', days: 29 },\r\n    Av: { leap: 12, regular: 11, monthCode: 'M11', days: 30 },\r\n    Elul: { leap: 13, regular: 12, monthCode: 'M12', days: 29 }\r\n  };\r\n  getMonthCode(year: number, month: number) {\r\n    if (this.inLeapYear({ year })) {\r\n      return month === 6 ? buildMonthCode(5, true) : buildMonthCode(month < 6 ? month : month - 1);\r\n    } else {\r\n      return buildMonthCode(month);\r\n    }\r\n  }\r\n  override adjustCalendarDate(\r\n    calendarDate: Partial<FullCalendarDate>,\r\n    cache?: OneObjectCache,\r\n    overflow: Overflow = 'constrain',\r\n    fromLegacyDate = false\r\n  ): FullCalendarDate {\r\n    let { year, month, monthCode, day, monthExtra } = calendarDate as Omit<typeof calendarDate, 'day'> & {\r\n      day: number;\r\n    };\r\n    if (year === undefined) throw new TypeError('Missing property: year');\r\n    if (fromLegacyDate) {\r\n      // In Pre Node-14 V8, DateTimeFormat.formatToParts `month: 'numeric'`\r\n      // output returns the numeric equivalent of `month` as a string, meaning\r\n      // that `'6'` in a leap year is Adar I, while `'6'` in a non-leap year\r\n      // means Adar. In this case, `month` will already be correct and no action\r\n      // is needed. However, in Node 14 and later formatToParts returns the name\r\n      // of the Hebrew month (e.g. \"Tevet\"), so we'll need to look up the\r\n      // correct `month` using the string name as a key.\r\n      if (monthExtra) {\r\n        const monthInfo = this.months[monthExtra];\r\n        if (!monthInfo) throw new RangeError(`Unrecognized month from formatToParts: ${monthExtra}`);\r\n        month = this.inLeapYear({ year }) ? monthInfo.leap : monthInfo.regular;\r\n      }\r\n      // Because we're getting data from legacy Date, then `month` will always be present\r\n      monthCode = this.getMonthCode(year, month as number);\r\n      return { year, month: month as number, day, monthCode };\r\n    } else {\r\n      // When called without input coming from legacy Date output, simply ensure\r\n      // that all fields are present.\r\n      this.validateCalendarDate(calendarDate);\r\n      if (month === undefined) {\r\n        ES.assertExists(monthCode);\r\n        if (monthCode.endsWith('L')) {\r\n          if (monthCode !== 'M05L') {\r\n            throw new RangeError(`Hebrew leap month must have monthCode M05L, not ${monthCode}`);\r\n          }\r\n          month = 6;\r\n          if (!this.inLeapYear({ year })) {\r\n            if (overflow === 'reject') {\r\n              throw new RangeError(`Hebrew monthCode M05L is invalid in year ${year} which is not a leap year`);\r\n            } else {\r\n              // constrain to same day of next month (Adar)\r\n              month = 6;\r\n              monthCode = 'M06';\r\n            }\r\n          }\r\n        } else {\r\n          month = nonLeapMonthCodeNumberPart(monthCode);\r\n          // if leap month is before this one, the month index is one more than the month code\r\n          if (this.inLeapYear({ year }) && month >= 6) month++;\r\n          const largestMonth = this.monthsInYear({ year });\r\n          if (month < 1 || month > largestMonth) throw new RangeError(`Invalid monthCode: ${monthCode}`);\r\n        }\r\n      } else {\r\n        if (overflow === 'reject') {\r\n          ES.RejectToRange(month, 1, this.monthsInYear({ year }));\r\n          ES.RejectToRange(day, 1, this.maximumMonthLength({ year, month }));\r\n        } else {\r\n          month = ES.ConstrainToRange(month, 1, this.monthsInYear({ year }));\r\n          day = ES.ConstrainToRange(day, 1, this.maximumMonthLength({ year, month }));\r\n        }\r\n        if (monthCode === undefined) {\r\n          monthCode = this.getMonthCode(year, month);\r\n        } else {\r\n          const calculatedMonthCode = this.getMonthCode(year, month);\r\n          if (calculatedMonthCode !== monthCode) {\r\n            throw new RangeError(`monthCode ${monthCode} doesn't correspond to month ${month} in Hebrew year ${year}`);\r\n          }\r\n        }\r\n      }\r\n      return { ...calendarDate, day, month, monthCode, year };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * For Temporal purposes, the Islamic calendar is simple because it's always the\r\n * same 12 months in the same order.\r\n */\r\nabstract class IslamicBaseHelper extends HelperBase {\r\n  abstract override id: BuiltinCalendarId;\r\n  calendarType = 'lunar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly, cache: OneObjectCache) {\r\n    const startOfYearCalendar = { year: calendarDate.year, month: 1, monthCode: 'M01', day: 1 };\r\n    const startOfNextYearCalendar = { year: calendarDate.year + 1, month: 1, monthCode: 'M01', day: 1 };\r\n    const result = this.calendarDaysUntil(startOfYearCalendar, startOfNextYearCalendar, cache);\r\n    return result === 355;\r\n  }\r\n  monthsInYear(/* calendarYear, cache */) {\r\n    return 12;\r\n  }\r\n  minimumMonthLength(/* calendarDate */) {\r\n    return 29;\r\n  }\r\n  maximumMonthLength(/* calendarDate */) {\r\n    return 30;\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(/* monthCode */) {\r\n    return 30;\r\n  }\r\n  DAYS_PER_ISLAMIC_YEAR = 354 + 11 / 30;\r\n  DAYS_PER_ISO_YEAR = 365.2425;\r\n  estimateIsoDate(calendarDate: CalendarYMD) {\r\n    const { year } = this.adjustCalendarDate(calendarDate);\r\n    return { year: Math.floor((year * this.DAYS_PER_ISLAMIC_YEAR) / this.DAYS_PER_ISO_YEAR) + 622, month: 1, day: 1 };\r\n  }\r\n}\r\n\r\n// There are 6 Islamic calendars with the same implementation in this polyfill.\r\n// They vary only in their ID. They do emit different output from the underlying\r\n// Intl implementation, but our code for each of them is identical.\r\nclass IslamicHelper extends IslamicBaseHelper {\r\n  id = 'islamic' as const;\r\n}\r\nclass IslamicUmalquraHelper extends IslamicBaseHelper {\r\n  id = 'islamic-umalqura' as const;\r\n}\r\nclass IslamicTblaHelper extends IslamicBaseHelper {\r\n  id = 'islamic-tbla' as const;\r\n}\r\nclass IslamicCivilHelper extends IslamicBaseHelper {\r\n  id = 'islamic-civil' as const;\r\n}\r\nclass IslamicRgsaHelper extends IslamicBaseHelper {\r\n  id = 'islamic-rgsa' as const;\r\n}\r\nclass IslamicCcHelper extends IslamicBaseHelper {\r\n  id = 'islamicc' as const;\r\n}\r\n\r\nclass PersianHelper extends HelperBase {\r\n  id = 'persian' as const;\r\n  calendarType = 'solar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly, cache: OneObjectCache) {\r\n    // If the last month has 30 days, it's a leap year.\r\n    return this.daysInMonth({ year: calendarDate.year, month: 12, day: 1 }, cache) === 30;\r\n  }\r\n  monthsInYear(/* calendarYear, cache */) {\r\n    return 12;\r\n  }\r\n  minimumMonthLength(calendarDate: CalendarYM) {\r\n    const { month } = calendarDate;\r\n    if (month === 12) return 29;\r\n    return month <= 6 ? 31 : 30;\r\n  }\r\n  maximumMonthLength(calendarDate: CalendarYM) {\r\n    const { month } = calendarDate;\r\n    if (month === 12) return 30;\r\n    return month <= 6 ? 31 : 30;\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    const month = nonLeapMonthCodeNumberPart(monthCode);\r\n    return month <= 6 ? 31 : 30;\r\n  }\r\n  estimateIsoDate(calendarDate: CalendarYMD) {\r\n    const { year } = this.adjustCalendarDate(calendarDate);\r\n    return { year: year + 621, month: 1, day: 1 };\r\n  }\r\n}\r\n\r\ninterface IndianMonthInfo {\r\n  [month: number]: {\r\n    length: number;\r\n    month: number;\r\n    day: number;\r\n    leap?: {\r\n      length: number;\r\n      month: number;\r\n      day: number;\r\n    };\r\n    nextYear?: true | undefined;\r\n  };\r\n}\r\n\r\nclass IndianHelper extends HelperBase {\r\n  id = 'indian' as const;\r\n  calendarType = 'solar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly) {\r\n    // From https://en.wikipedia.org/wiki/Indian_national_calendar:\r\n    // Years are counted in the Saka era, which starts its year 0 in the year 78\r\n    // of the Common Era. To determine leap years, add 78 to the Saka year – if\r\n    // the result is a leap year in the Gregorian calendar, then the Saka year\r\n    // is a leap year as well.\r\n    return isGregorianLeapYear(calendarDate.year + 78);\r\n  }\r\n  monthsInYear(/* calendarYear, cache */) {\r\n    return 12;\r\n  }\r\n  minimumMonthLength(calendarDate: CalendarYM) {\r\n    return this.getMonthInfo(calendarDate).length;\r\n  }\r\n  maximumMonthLength(calendarDate: CalendarYM) {\r\n    return this.getMonthInfo(calendarDate).length;\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    const month = nonLeapMonthCodeNumberPart(monthCode);\r\n    let monthInfo = this.months[month];\r\n    monthInfo = monthInfo.leap ?? monthInfo;\r\n    return monthInfo.length;\r\n  }\r\n  // Indian months always start at the same well-known Gregorian month and\r\n  // day. So this conversion is easy and fast. See\r\n  // https://en.wikipedia.org/wiki/Indian_national_calendar\r\n  months: IndianMonthInfo = {\r\n    1: { length: 30, month: 3, day: 22, leap: { length: 31, month: 3, day: 21 } },\r\n    2: { length: 31, month: 4, day: 21 },\r\n    3: { length: 31, month: 5, day: 22 },\r\n    4: { length: 31, month: 6, day: 22 },\r\n    5: { length: 31, month: 7, day: 23 },\r\n    6: { length: 31, month: 8, day: 23 },\r\n    7: { length: 30, month: 9, day: 23 },\r\n    8: { length: 30, month: 10, day: 23 },\r\n    9: { length: 30, month: 11, day: 22 },\r\n    10: { length: 30, month: 12, day: 22 },\r\n    11: { length: 30, month: 1, nextYear: true, day: 21 },\r\n    12: { length: 30, month: 2, nextYear: true, day: 20 }\r\n  };\r\n  getMonthInfo(calendarDate: CalendarYM) {\r\n    const { month } = calendarDate;\r\n    let monthInfo = this.months[month];\r\n    if (monthInfo === undefined) throw new RangeError(`Invalid month: ${month}`);\r\n    if (this.inLeapYear(calendarDate) && monthInfo.leap) monthInfo = monthInfo.leap;\r\n    return monthInfo;\r\n  }\r\n  estimateIsoDate(calendarDateParam: CalendarYMD) {\r\n    // FYI, this \"estimate\" is always the exact ISO date, which makes the Indian\r\n    // calendar fast!\r\n    const calendarDate = this.adjustCalendarDate(calendarDateParam);\r\n    const monthInfo = this.getMonthInfo(calendarDate);\r\n    const isoYear = calendarDate.year + 78 + (monthInfo.nextYear ? 1 : 0);\r\n    const isoMonth = monthInfo.month;\r\n    const isoDay = monthInfo.day;\r\n    const isoDate = ES.BalanceISODate(isoYear, isoMonth, isoDay + calendarDate.day - 1);\r\n    return isoDate;\r\n  }\r\n  // https://bugs.chromium.org/p/v8/issues/detail?id=10529 causes Intl's Indian\r\n  // calendar output to fail for all dates before 0001-01-01 ISO.  For example,\r\n  // in Node 12 0000-01-01 is calculated as 6146/12/-583 instead of 10/11/-79 as\r\n  // expected.\r\n  vulnerableToBceBug =\r\n    new Date('0000-01-01T00:00Z').toLocaleDateString('en-US-u-ca-indian', { timeZone: 'UTC' }) !== '10/11/-79 Saka';\r\n  override checkIcuBugs(isoDate: ISODate) {\r\n    if (this.vulnerableToBceBug && isoDate.year < 1) {\r\n      throw new RangeError(\r\n        `calendar '${this.id}' is broken for ISO dates before 0001-01-01` +\r\n          ' (see https://bugs.chromium.org/p/v8/issues/detail?id=10529)'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Era metadata defined for each calendar.\r\n * TODO: instead of optional properties, this should really have rules\r\n * encoded in the type, e.g. isoEpoch is required unless reverseOf is present.\r\n *  */\r\ninterface InputEra {\r\n  /**\r\n   * Era code, used to populate the 'era' field of Temporal instances.\r\n   * See https://tc39.es/proposal-intl-era-monthcode/#table-eras\r\n   */\r\n  code: string;\r\n\r\n  /**\r\n   * Names are additionally accepted as alternate era codes on input, and the\r\n   * first name is also output in error messages (and may be the era code if\r\n   * desired.)\r\n   * See https://tc39.es/proposal-intl-era-monthcode/#table-eras\r\n   * If absent, this field defaults to a single element matching the code.\r\n   */\r\n  names?: string[];\r\n\r\n  /**\r\n   * Signed calendar year where this era begins.Will be\r\n   * 1 (or 0 for zero-based eras) for the anchor era assuming that `year`\r\n   * numbering starts at the beginning of the anchor era, which is true\r\n   * for all ICU calendars except Japanese. If an era starts mid-year\r\n   * then a calendar month and day are included. Otherwise\r\n   * `{ month: 1, day: 1 }` is assumed.\r\n   */\r\n  anchorEpoch?: CalendarYearOnly | CalendarYMD;\r\n\r\n  /** ISO date of the first day of this era */\r\n  isoEpoch?: { year: number; month: number; day: number };\r\n\r\n  /**\r\n   * If present, then this era counts years backwards like BC\r\n   * and this property points to the forward era. This must be\r\n   * the last (oldest) era in the array.\r\n   * */\r\n  reverseOf?: string;\r\n\r\n  /**\r\n   * If true, the era's years are 0-based. If omitted or false,\r\n   * then the era's years are 1-based.\r\n   * */\r\n  hasYearZero?: boolean;\r\n\r\n  /**\r\n   * Override if this era is the anchor. Not normally used because\r\n   * anchor eras are inferred.\r\n   * */\r\n  isAnchor?: boolean;\r\n}\r\n/**\r\n * Transformation of the `InputEra` type with all fields filled in by\r\n * `adjustEras()`\r\n * */\r\ninterface Era {\r\n  /**\r\n   * Era code, used to populate the 'era' field of Temporal instances.\r\n   * See https://tc39.es/proposal-intl-era-monthcode/#table-eras\r\n   */\r\n  code: string;\r\n\r\n  /**\r\n   * Names are additionally accepted as alternate era codes on input, and the\r\n   * first name is also output in error messages (and may be the era code if\r\n   * desired.)\r\n   * See https://tc39.es/proposal-intl-era-monthcode/#table-eras\r\n   * If absent, this field defaults to a single element matching the code.\r\n   */\r\n  names: string[];\r\n\r\n  /**\r\n   * alternate name of the era used in old versions of ICU data\r\n   * format is `era{n}` where n is the zero-based index of the era\r\n   * with the oldest era being 0.\r\n   * */\r\n  genericName: string;\r\n\r\n  /**\r\n   * Signed calendar year where this era begins. Will be 1 (or 0 for zero-based\r\n   * eras) for the anchor era assuming that `year` numbering starts at the\r\n   * beginning of the anchor era, which is true for all ICU calendars except\r\n   * Japanese. For input, the month and day are optional. If an era starts\r\n   * mid-year then a calendar month and day are included.\r\n   * Otherwise `{ month: 1, day: 1 }` is assumed.\r\n   */\r\n  anchorEpoch: CalendarYMD;\r\n\r\n  /** ISO date of the first day of this era */\r\n  isoEpoch: ISODate;\r\n\r\n  /**\r\n   * If present, then this era counts years backwards like BC\r\n   * and this property points to the forward era. This must be\r\n   * the last (oldest) era in the array.\r\n   * */\r\n  reverseOf?: Era;\r\n\r\n  /**\r\n   * If true, the era's years are 0-based. If omitted or false,\r\n   * then the era's years are 1-based.\r\n   * */\r\n  hasYearZero?: boolean;\r\n\r\n  /**\r\n   * Override if this era is the anchor. Not normally used because\r\n   * anchor eras are inferred.\r\n   * */\r\n  isAnchor?: boolean;\r\n}\r\n\r\n/**\r\n * This function adds additional metadata that makes it easier to work with\r\n * eras. Note that it mutates and normalizes the original era objects, which is\r\n * OK because this is non-observable, internal-only metadata.\r\n *\r\n * The result is an array of eras with the shape defined above.\r\n * */\r\nfunction adjustEras(erasParam: InputEra[]): { eras: Era[]; anchorEra: Era } {\r\n  let eras: (InputEra | Era)[] = erasParam;\r\n  if (eras.length === 0) {\r\n    throw new RangeError('Invalid era data: eras are required');\r\n  }\r\n  if (eras.length === 1 && eras[0].reverseOf) {\r\n    throw new RangeError('Invalid era data: anchor era cannot count years backwards');\r\n  }\r\n  if (eras.length === 1 && !eras[0].code) {\r\n    throw new RangeError('Invalid era data: at least one named era is required');\r\n  }\r\n  if (eras.filter((e) => e.reverseOf != null).length > 1) {\r\n    throw new RangeError('Invalid era data: only one era can count years backwards');\r\n  }\r\n\r\n  // Find the \"anchor era\" which is the era used for (era-less) `year`. Reversed\r\n  // eras can never be anchors. The era without an `anchorEpoch` property is the\r\n  // anchor.\r\n  let anchorEra: Era | InputEra | undefined;\r\n  eras.forEach((e) => {\r\n    if (e.isAnchor || (!e.anchorEpoch && !e.reverseOf)) {\r\n      if (anchorEra) throw new RangeError('Invalid era data: cannot have multiple anchor eras');\r\n      anchorEra = e;\r\n      e.anchorEpoch = { year: e.hasYearZero ? 0 : 1 };\r\n    } else if (!e.code) {\r\n      throw new RangeError('If era name is blank, it must be the anchor era');\r\n    }\r\n  });\r\n\r\n  // If the era name is undefined, then it's an anchor that doesn't interact\r\n  // with eras at all. For example, Japanese `year` is always the same as ISO\r\n  // `year`.  So this \"era\" is the anchor era but isn't used for era matching.\r\n  // Strip it from the list that's returned.\r\n  eras = eras.filter((e) => e.code);\r\n\r\n  eras.forEach((e) => {\r\n    // Some eras are mirror images of another era e.g. B.C. is the reverse of A.D.\r\n    // Replace the string-valued \"reverseOf\" property with the actual era object\r\n    // that's reversed.\r\n    const { reverseOf } = e;\r\n    if (reverseOf) {\r\n      const reversedEra = eras.find((era) => era.code === reverseOf);\r\n      if (reversedEra === undefined) {\r\n        throw new RangeError(`Invalid era data: unmatched reverseOf era: ${reverseOf}`);\r\n      }\r\n      e.reverseOf = reversedEra as Era; // genericName property added later\r\n      e.anchorEpoch = reversedEra.anchorEpoch;\r\n      e.isoEpoch = reversedEra.isoEpoch;\r\n    }\r\n    type YMD = {\r\n      year: number;\r\n      month: number;\r\n      day: number;\r\n    };\r\n    if ((e.anchorEpoch as YMD).month === undefined) (e.anchorEpoch as YMD).month = 1;\r\n    if ((e.anchorEpoch as YMD).day === undefined) (e.anchorEpoch as YMD).day = 1;\r\n  });\r\n\r\n  // Ensure that the latest epoch is first in the array. This lets us try to\r\n  // match eras in index order, with the last era getting the remaining older\r\n  // years. Any reverse-signed era must be at the end.\r\n  eras.sort((e1, e2) => {\r\n    if (e1.reverseOf) return 1;\r\n    if (e2.reverseOf) return -1;\r\n    if (!e1.isoEpoch || !e2.isoEpoch) throw new RangeError('Invalid era data: missing ISO epoch');\r\n    return e2.isoEpoch.year - e1.isoEpoch.year;\r\n  });\r\n\r\n  // If there's a reversed era, then the one before it must be the era that's\r\n  // being reversed.\r\n  const lastEraReversed = eras[eras.length - 1].reverseOf;\r\n  if (lastEraReversed) {\r\n    if (lastEraReversed !== eras[eras.length - 2]) {\r\n      throw new RangeError('Invalid era data: invalid reverse-sign era');\r\n    }\r\n  }\r\n\r\n  // Finally, add a \"genericName\" property in the format \"era{n} where `n` is\r\n  // zero-based index, with the oldest era being zero. This format is used by\r\n  // older versions of ICU data.\r\n  eras.forEach((e, i) => {\r\n    (e as Era).genericName = `era${eras.length - 1 - i}`;\r\n  });\r\n\r\n  return { eras: eras as Era[], anchorEra: (anchorEra || eras[0]) as Era };\r\n}\r\n\r\nfunction isGregorianLeapYear(year: number) {\r\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\r\n}\r\n\r\n/** Base for all Gregorian-like calendars. */\r\nabstract class GregorianBaseHelperFixedEpoch extends HelperBase {\r\n  id: BuiltinCalendarId;\r\n  isoEpoch: ISODate;\r\n\r\n  constructor(id: BuiltinCalendarId, isoEpoch: ISODate) {\r\n    super();\r\n    this.id = id;\r\n    this.isoEpoch = isoEpoch;\r\n  }\r\n  calendarType = 'solar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly) {\r\n    const { year } = this.estimateIsoDate({ month: 1, day: 1, year: calendarDate.year });\r\n    return isGregorianLeapYear(year);\r\n  }\r\n  monthsInYear(/* calendarDate */) {\r\n    return 12;\r\n  }\r\n  minimumMonthLength(calendarDate: CalendarYM): number {\r\n    const { month } = calendarDate;\r\n    if (month === 2) return this.inLeapYear(calendarDate) ? 29 : 28;\r\n    return [4, 6, 9, 11].indexOf(month) >= 0 ? 30 : 31;\r\n  }\r\n  maximumMonthLength(calendarDate: CalendarYM): number {\r\n    return this.minimumMonthLength(calendarDate);\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    const month = nonLeapMonthCodeNumberPart(monthCode);\r\n    return [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\r\n  }\r\n  estimateIsoDate(calendarDateParam: CalendarYMD) {\r\n    const calendarDate = this.adjustCalendarDate(calendarDateParam);\r\n    return ES.RegulateISODate(\r\n      calendarDate.year + this.isoEpoch.year,\r\n      calendarDate.month + this.isoEpoch.month,\r\n      calendarDate.day + this.isoEpoch.day,\r\n      'constrain'\r\n    );\r\n  }\r\n}\r\n\r\n/** Base for Gregorian-like calendars with eras. */\r\nabstract class GregorianBaseHelper extends HelperBase {\r\n  id: BuiltinCalendarId;\r\n  anchorEra: Era;\r\n\r\n  constructor(id: BuiltinCalendarId, originalEras: InputEra[]) {\r\n    super();\r\n    this.id = id;\r\n    const { eras, anchorEra } = adjustEras(originalEras);\r\n    this.anchorEra = anchorEra;\r\n    this.eras = eras;\r\n  }\r\n  override hasEra = true;\r\n  calendarType = 'solar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly) {\r\n    // Calendars that don't override this method use the same months and leap\r\n    // years as Gregorian. Once we know the ISO year corresponding to the\r\n    // calendar year, we'll know if it's a leap year or not.\r\n    const { year } = this.estimateIsoDate({ month: 1, day: 1, year: calendarDate.year });\r\n    return isGregorianLeapYear(year);\r\n  }\r\n  monthsInYear(/* calendarDate */) {\r\n    return 12;\r\n  }\r\n  minimumMonthLength(calendarDate: CalendarYM): number {\r\n    const { month } = calendarDate;\r\n    if (month === 2) return this.inLeapYear(calendarDate) ? 29 : 28;\r\n    return [4, 6, 9, 11].indexOf(month) >= 0 ? 30 : 31;\r\n  }\r\n  maximumMonthLength(calendarDate: CalendarYM): number {\r\n    return this.minimumMonthLength(calendarDate);\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    const month = nonLeapMonthCodeNumberPart(monthCode);\r\n    return [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\r\n  }\r\n  /** Fill in missing parts of the (year, era, eraYear) tuple */\r\n  completeEraYear(\r\n    calendarDate: FullCalendarDate\r\n  ): FullCalendarDate & Required<Pick<FullCalendarDate, 'era' | 'eraYear'>> {\r\n    const checkField = (property: keyof FullCalendarDate, value: string | number | undefined, names?: string[]) => {\r\n      const currentValue = calendarDate[property];\r\n      if (currentValue != null && currentValue != value && !((names || []) as unknown[]).includes(currentValue)) {\r\n        // Prefer displaying an era alias, instead of \"gregory-inverse\"\r\n        const preferredName = names?.[0];\r\n        const expected = preferredName ? `${value} (also called ${preferredName})` : value;\r\n        throw new RangeError(`Input ${property} ${currentValue} doesn't match calculated value ${expected}`);\r\n      }\r\n    };\r\n    const eraFromYear = (year: number) => {\r\n      let eraYear;\r\n      const adjustedCalendarDate = { ...calendarDate, year };\r\n      const matchingEra = this.eras.find((e, i) => {\r\n        if (i === this.eras.length - 1) {\r\n          if (e.reverseOf) {\r\n            // This is a reverse-sign era (like BCE) which must be the oldest\r\n            // era. Count years backwards.\r\n            if (year > 0) throw new RangeError(`Signed year ${year} is invalid for era ${e.code}`);\r\n            eraYear = e.anchorEpoch.year - year;\r\n            return true;\r\n          }\r\n          // last era always gets all \"leftover\" (older than epoch) years,\r\n          // so no need for a comparison like below.\r\n          eraYear = year - e.anchorEpoch.year + (e.hasYearZero ? 0 : 1);\r\n          return true;\r\n        }\r\n        const comparison = this.compareCalendarDates(adjustedCalendarDate, e.anchorEpoch);\r\n        if (comparison >= 0) {\r\n          eraYear = year - e.anchorEpoch.year + (e.hasYearZero ? 0 : 1);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      if (!matchingEra) throw new RangeError(`Year ${year} was not matched by any era`);\r\n      return { eraYear: eraYear as unknown as number, era: matchingEra.code, eraNames: matchingEra.names };\r\n    };\r\n\r\n    let { year, eraYear, era } = calendarDate;\r\n    if (year != null) {\r\n      const matchData = eraFromYear(year);\r\n      ({ eraYear, era } = matchData);\r\n      checkField('era', era, matchData?.eraNames);\r\n      checkField('eraYear', eraYear);\r\n    } else if (eraYear != null) {\r\n      if (era === undefined) throw new RangeError('era and eraYear must be provided together');\r\n      // TS limitation: https://github.com/microsoft/TypeScript/issues/11498\r\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n      const matchingEra = this.eras.find(({ code, names = [] }) => code === era || names.includes(era!));\r\n      if (!matchingEra) throw new RangeError(`Era ${era} (ISO year ${eraYear}) was not matched by any era`);\r\n      if (matchingEra.reverseOf) {\r\n        year = matchingEra.anchorEpoch.year - eraYear;\r\n      } else {\r\n        year = eraYear + matchingEra.anchorEpoch.year - (matchingEra.hasYearZero ? 0 : 1);\r\n      }\r\n      checkField('year', year);\r\n      // We'll accept dates where the month/day is earlier than the start of\r\n      // the era or after its end as long as it's in the same year. If that\r\n      // happens, we'll adjust the era/eraYear pair to be the correct era for\r\n      // the `year`.\r\n      ({ eraYear, era } = eraFromYear(year));\r\n    } else {\r\n      throw new RangeError('Either year or eraYear and era are required');\r\n    }\r\n    return { ...calendarDate, year, eraYear, era };\r\n  }\r\n  override adjustCalendarDate(\r\n    calendarDateParam: Partial<FullCalendarDate>,\r\n    cache?: OneObjectCache,\r\n    overflow: Overflow = 'constrain'\r\n  ): FullCalendarDate {\r\n    let calendarDate = calendarDateParam;\r\n    // Because this is not a lunisolar calendar, it's safe to convert monthCode to a number\r\n    const { month, monthCode } = calendarDate;\r\n    if (month === undefined) calendarDate = { ...calendarDate, month: nonLeapMonthCodeNumberPart(monthCode as string) };\r\n    this.validateCalendarDate(calendarDate);\r\n    calendarDate = this.completeEraYear(calendarDate);\r\n    return super.adjustCalendarDate(calendarDate, cache, overflow);\r\n  }\r\n  estimateIsoDate(calendarDateParam: CalendarYMD) {\r\n    const calendarDate = this.adjustCalendarDate(calendarDateParam);\r\n    const { year, month, day } = calendarDate;\r\n    const { anchorEra } = this;\r\n    const isoYearEstimate = year + anchorEra.isoEpoch.year - (anchorEra.hasYearZero ? 0 : 1);\r\n    return ES.RegulateISODate(isoYearEstimate, month, day, 'constrain');\r\n  }\r\n}\r\n\r\n/**\r\n * Some calendars are identical to Gregorian except era and year. For these\r\n * calendars, we can avoid using Intl.DateTimeFormat and just calculate the\r\n * year, era, and eraYear. This is faster (because Intl.DateTimeFormat is slow\r\n * and uses a huge amount of RAM), and it avoids ICU bugs like\r\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1173158.\r\n */\r\nabstract class SameMonthDayAsGregorianBaseHelper extends GregorianBaseHelper {\r\n  constructor(id: BuiltinCalendarId, originalEras: InputEra[]) {\r\n    super(id, originalEras);\r\n  }\r\n  override isoToCalendarDate(isoDate: ISODate): FullCalendarDate {\r\n    // Month and day are same as ISO, so bypass Intl.DateTimeFormat and\r\n    // calculate the year, era, and eraYear here.\r\n    const { year: isoYear, month, day } = isoDate;\r\n    const monthCode = buildMonthCode(month);\r\n    const year = isoYear - this.anchorEra.isoEpoch.year + 1;\r\n    return this.completeEraYear({ year, month, monthCode, day });\r\n  }\r\n}\r\nconst OrthodoxOps = {\r\n  inLeapYear(calendarDate: CalendarYearOnly) {\r\n    // Leap years happen one year before the Julian leap year. Note that this\r\n    // calendar is based on the Julian calendar which has a leap year every 4\r\n    // years, unlike the Gregorian calendar which doesn't have leap years on\r\n    // years divisible by 100 except years divisible by 400.\r\n    //\r\n    // Note that we're assuming that leap years in before-epoch times match\r\n    // how leap years are defined now. This is probably not accurate but I'm\r\n    // not sure how better to do it.\r\n    const { year } = calendarDate;\r\n    return (year + 1) % 4 === 0;\r\n  },\r\n  monthsInYear(/* calendarDate */) {\r\n    return 13;\r\n  },\r\n  minimumMonthLength(calendarDate: CalendarYM) {\r\n    const { month } = calendarDate;\r\n    // Ethiopian/Coptic calendars have 12 30-day months and an extra 5-6 day 13th month.\r\n    if (month === 13) return this.inLeapYear(calendarDate) ? 6 : 5;\r\n    return 30;\r\n  },\r\n  maximumMonthLength(calendarDate: CalendarYM) {\r\n    return this.minimumMonthLength(calendarDate);\r\n  },\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    return monthCode === 'M13' ? 6 : 30;\r\n  }\r\n};\r\nabstract class OrthodoxBaseHelperFixedEpoch extends GregorianBaseHelperFixedEpoch {\r\n  constructor(id: BuiltinCalendarId, isoEpoch: ISODate) {\r\n    super(id, isoEpoch);\r\n  }\r\n  override inLeapYear = OrthodoxOps.inLeapYear;\r\n  override monthsInYear = OrthodoxOps.monthsInYear;\r\n  override minimumMonthLength = OrthodoxOps.minimumMonthLength;\r\n  override maximumMonthLength = OrthodoxOps.maximumMonthLength;\r\n  override maxLengthOfMonthCodeInAnyYear = OrthodoxOps.maxLengthOfMonthCodeInAnyYear;\r\n}\r\nabstract class OrthodoxBaseHelper extends GregorianBaseHelper {\r\n  constructor(id: BuiltinCalendarId, originalEras: InputEra[]) {\r\n    super(id, originalEras);\r\n  }\r\n  override inLeapYear = OrthodoxOps.inLeapYear;\r\n  override monthsInYear = OrthodoxOps.monthsInYear;\r\n  override minimumMonthLength = OrthodoxOps.minimumMonthLength;\r\n  override maximumMonthLength = OrthodoxOps.maximumMonthLength;\r\n  override maxLengthOfMonthCodeInAnyYear = OrthodoxOps.maxLengthOfMonthCodeInAnyYear;\r\n}\r\n\r\n// `coptic` and `ethiopic` calendars are very similar to `ethioaa` calendar,\r\n// with the following differences:\r\n// - Coptic uses BCE-like positive numbers for years before its epoch (the other\r\n//   two use negative year numbers before epoch)\r\n// - Coptic has a different epoch date\r\n// - Ethiopic has an additional second era that starts at the same date as the\r\n//   zero era of ethioaa.\r\nclass EthioaaHelper extends OrthodoxBaseHelperFixedEpoch {\r\n  constructor() {\r\n    super('ethioaa', { year: -5492, month: 7, day: 17 });\r\n  }\r\n}\r\nclass CopticHelper extends OrthodoxBaseHelper {\r\n  constructor() {\r\n    super('coptic', [\r\n      { code: 'coptic', isoEpoch: { year: 284, month: 8, day: 29 } },\r\n      { code: 'coptic-inverse', reverseOf: 'coptic' }\r\n    ]);\r\n  }\r\n}\r\n\r\n// Anchor is currently the older era to match ethioaa, but should it be the newer era?\r\n// See https://github.com/tc39/ecma402/issues/534 for discussion.\r\nclass EthiopicHelper extends OrthodoxBaseHelper {\r\n  constructor() {\r\n    super('ethiopic', [\r\n      { code: 'ethioaa', names: ['ethiopic-amete-alem', 'mundi'], isoEpoch: { year: -5492, month: 7, day: 17 } },\r\n      { code: 'ethiopic', names: ['incar'], isoEpoch: { year: 8, month: 8, day: 27 }, anchorEpoch: { year: 5501 } }\r\n    ]);\r\n  }\r\n}\r\n\r\nclass RocHelper extends SameMonthDayAsGregorianBaseHelper {\r\n  constructor() {\r\n    super('roc', [\r\n      { code: 'roc', names: ['minguo'], isoEpoch: { year: 1912, month: 1, day: 1 } },\r\n      { code: 'roc-inverse', names: ['before-roc'], reverseOf: 'roc' }\r\n    ]);\r\n  }\r\n}\r\n\r\nclass BuddhistHelper extends GregorianBaseHelperFixedEpoch {\r\n  constructor() {\r\n    super('buddhist', { year: -543, month: 1, day: 1 });\r\n  }\r\n}\r\n\r\nclass GregoryHelper extends SameMonthDayAsGregorianBaseHelper {\r\n  constructor() {\r\n    super('gregory', [\r\n      { code: 'gregory', names: ['ad', 'ce'], isoEpoch: { year: 1, month: 1, day: 1 } },\r\n      { code: 'gregory-inverse', names: ['be', 'bce'], reverseOf: 'gregory' }\r\n    ]);\r\n  }\r\n  override reviseIntlEra<T extends Partial<EraAndEraYear>>(calendarDate: T /*, isoDate: IsoDate*/): T {\r\n    let { era, eraYear } = calendarDate;\r\n    // Firefox 96 introduced a bug where the `'short'` format of the era\r\n    // option mistakenly returns the one-letter (narrow) format instead. The\r\n    // code below handles either the correct or Firefox-buggy format. See\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\r\n    if (era === 'b') era = 'gregory-inverse';\r\n    if (era === 'a') era = 'gregory';\r\n    return { era, eraYear } as T;\r\n  }\r\n}\r\n\r\n// NOTE: Only the 5 modern eras (Meiji and later) are included. For dates\r\n// before Meiji 1, the `ce` and `bce` eras are used. Challenges with pre-Meiji\r\n// eras include:\r\n// - Start/end dates of older eras are not precisely defined, which is\r\n//   challenging given Temporal's need for precision\r\n// - Some era dates and/or names are disputed by historians\r\n// - As historical research proceeds, new eras are discovered and existing era\r\n//   dates are modified, leading to considerable churn which is not good for\r\n//   Temporal use.\r\n//  - The earliest era (in 645 CE) may not end up being the earliest depending\r\n//    on future historical scholarship\r\n//  - Before Meiji, Japan used a lunar (or lunisolar?) calendar but AFAIK\r\n//    that's not reflected in the ICU implementation.\r\n//\r\n// For more discussion: https://github.com/tc39/proposal-temporal/issues/526.\r\n//\r\n// Here's a full list of CLDR/ICU eras:\r\n// https://github.com/unicode-org/icu/blob/master/icu4c/source/data/locales/root.txt#L1582-L1818\r\n// https://github.com/unicode-org/cldr/blob/master/common/supplemental/supplementalData.xml#L4310-L4546\r\n//\r\n// NOTE: Japan started using the Gregorian calendar in 6 Meiji, replacing a\r\n// lunisolar calendar. So the day before January 1 of 6 Meiji (1873) was not\r\n// December 31, but December 2, of 5 Meiji (1872). The existing Ecma-402\r\n// Japanese calendar doesn't seem to take this into account, so neither do we:\r\n// > args = ['en-ca-u-ca-japanese', { era: 'short' }]\r\n// > new Date('1873-01-01T12:00').toLocaleString(...args)\r\n// '1 1, 6 Meiji, 12:00:00 PM'\r\n// > new Date('1872-12-31T12:00').toLocaleString(...args)\r\n// '12 31, 5 Meiji, 12:00:00 PM'\r\nclass JapaneseHelper extends SameMonthDayAsGregorianBaseHelper {\r\n  constructor() {\r\n    super('japanese', [\r\n      // The Japanese calendar `year` is just the ISO year, because (unlike other\r\n      // ICU calendars) there's no obvious \"default era\", we use the ISO year.\r\n      { code: 'reiwa', isoEpoch: { year: 2019, month: 5, day: 1 }, anchorEpoch: { year: 2019, month: 5, day: 1 } },\r\n      { code: 'heisei', isoEpoch: { year: 1989, month: 1, day: 8 }, anchorEpoch: { year: 1989, month: 1, day: 8 } },\r\n      { code: 'showa', isoEpoch: { year: 1926, month: 12, day: 25 }, anchorEpoch: { year: 1926, month: 12, day: 25 } },\r\n      { code: 'taisho', isoEpoch: { year: 1912, month: 7, day: 30 }, anchorEpoch: { year: 1912, month: 7, day: 30 } },\r\n      { code: 'meiji', isoEpoch: { year: 1868, month: 9, day: 8 }, anchorEpoch: { year: 1868, month: 9, day: 8 } },\r\n      { code: 'japanese', names: ['japanese', 'gregory', 'ad', 'ce'], isoEpoch: { year: 1, month: 1, day: 1 } },\r\n      { code: 'japanese-inverse', names: ['japanese-inverse', 'gregory-inverse', 'bc', 'bce'], reverseOf: 'japanese' }\r\n    ]);\r\n  }\r\n\r\n  override erasBeginMidYear = true;\r\n\r\n  override reviseIntlEra<T extends Partial<EraAndEraYear>>(calendarDate: T, isoDate: ISODate): T {\r\n    const { era, eraYear } = calendarDate;\r\n    const { year: isoYear } = isoDate;\r\n    if (this.eras.find((e) => e.code === era)) return { era, eraYear } as T;\r\n    return (\r\n      isoYear < 1 ? { era: 'japanese-inverse', eraYear: 1 - isoYear } : { era: 'japanese', eraYear: isoYear }\r\n    ) as T;\r\n  }\r\n}\r\n\r\ninterface ChineseMonthInfo {\r\n  [key: string]: { monthIndex: number; daysInMonth: number };\r\n}\r\ninterface ChineseDraftMonthInfo {\r\n  [key: string]: { monthIndex: number; daysInMonth?: number };\r\n}\r\n\r\nabstract class ChineseBaseHelper extends HelperBase {\r\n  abstract override id: BuiltinCalendarId;\r\n  calendarType = 'lunisolar' as const;\r\n  inLeapYear(calendarDate: CalendarYearOnly, cache: OneObjectCache) {\r\n    const months = this.getMonthList(calendarDate.year, cache);\r\n    return Object.entries(months).length === 13;\r\n  }\r\n  monthsInYear(calendarDate: CalendarYearOnly, cache: OneObjectCache) {\r\n    return this.inLeapYear(calendarDate, cache) ? 13 : 12;\r\n  }\r\n  minimumMonthLength(/* calendarDate */) {\r\n    return 29;\r\n  }\r\n  maximumMonthLength(/* calendarDate */) {\r\n    return 30;\r\n  }\r\n  maxLengthOfMonthCodeInAnyYear(monthCode: string) {\r\n    // See note below about ICU4C vs ICU4X. It is possible this override should\r\n    // always return 30.\r\n    return ['M01L', 'M09L', 'M10L', 'M11L', 'M12L'].includes(monthCode) ? 29 : 30;\r\n  }\r\n  override monthDaySearchStartYear(monthCode: string, day: number) {\r\n    // Note that ICU4C actually has _no_ years in which leap months M01L and\r\n    // M09L through M12L have 30 days. The values marked with (*) here are years\r\n    // in which the leap month occurs with 29 days. ICU4C disagrees with ICU4X\r\n    // here and it is not clear which is correct.\r\n    const monthMap: Record<string, [number, number]> = {\r\n      M01L: [1651, 1651], // *\r\n      M02L: [1947, 1765],\r\n      M03L: [1966, 1955],\r\n      M04L: [1963, 1944],\r\n      M05L: [1971, 1952],\r\n      M06L: [1960, 1941],\r\n      M07L: [1968, 1938],\r\n      M08L: [1957, 1718],\r\n      M09L: [1832, 1832], // *\r\n      M10L: [1870, 1870], // *\r\n      M11L: [1814, 1814], // *\r\n      M12L: [1890, 1890] // *\r\n    };\r\n    const years = monthMap[monthCode] ?? [1972, 1972];\r\n    return day < 30 ? years[0] : years[1];\r\n  }\r\n  getMonthList(calendarYear: number, cache: OneObjectCache): ChineseMonthInfo {\r\n    if (calendarYear === undefined) {\r\n      throw new TypeError('Missing year');\r\n    }\r\n    const key = JSON.stringify({ func: 'getMonthList', calendarYear, id: this.id });\r\n    const cached = cache.get(key);\r\n    if (cached) return cached;\r\n    const dateTimeFormat = this.getFormatter();\r\n    const getCalendarDate = (isoYear: number, daysPastFeb1: number) => {\r\n      const isoStringFeb1 = toUtcIsoDateString({ isoYear, isoMonth: 2, isoDay: 1 });\r\n      const legacyDate = new Date(isoStringFeb1);\r\n      // Now add the requested number of days, which may wrap to the next month.\r\n      legacyDate.setUTCDate(daysPastFeb1 + 1);\r\n      const newYearGuess = dateTimeFormat.formatToParts(legacyDate);\r\n      // The 'month' and 'day' parts are guaranteed to be present because the\r\n      // formatter was created with month and day options.\r\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n      const calendarMonthString = newYearGuess.find((tv) => tv.type === 'month')!.value;\r\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n      const calendarDay = +newYearGuess.find((tv) => tv.type === 'day')!.value;\r\n      const calendarYearPartToVerify = newYearGuess.find((tv) => (tv.type as string) === 'relatedYear');\r\n      let calendarYearToVerify: number | undefined;\r\n      if (calendarYearPartToVerify !== undefined) {\r\n        calendarYearToVerify = +calendarYearPartToVerify.value;\r\n      } else {\r\n        // Node 12 has outdated ICU data that lacks the `relatedYear` field in the\r\n        // output of Intl.DateTimeFormat.formatToParts.\r\n        throw new RangeError(\r\n          `Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`\r\n        );\r\n      }\r\n      return { calendarMonthString, calendarDay, calendarYearToVerify };\r\n    };\r\n\r\n    // First, find a date close to Chinese New Year. Feb 17 will either be in\r\n    // the first month or near the end of the last month of the previous year.\r\n    let isoDaysDelta = 17;\r\n    let { calendarMonthString, calendarDay, calendarYearToVerify } = getCalendarDate(calendarYear, isoDaysDelta);\r\n\r\n    // If we didn't guess the first month correctly, add (almost in some months)\r\n    // a lunar month\r\n    if (calendarMonthString !== '1') {\r\n      isoDaysDelta += 29;\r\n      ({ calendarMonthString, calendarDay } = getCalendarDate(calendarYear, isoDaysDelta));\r\n    }\r\n\r\n    // Now back up to near the start of the first month, but not too near that\r\n    // off-by-one issues matter.\r\n    isoDaysDelta -= calendarDay - 5;\r\n    const result = {} as ChineseDraftMonthInfo;\r\n    let monthIndex = 1;\r\n    let oldCalendarDay: number | undefined;\r\n    let oldMonthString: string | undefined;\r\n    let done = false;\r\n    do {\r\n      ({ calendarMonthString, calendarDay, calendarYearToVerify } = getCalendarDate(calendarYear, isoDaysDelta));\r\n      if (oldCalendarDay) {\r\n        result[oldMonthString as string].daysInMonth = oldCalendarDay + 30 - calendarDay;\r\n      }\r\n      if (calendarYearToVerify !== calendarYear) {\r\n        done = true;\r\n      } else {\r\n        result[calendarMonthString] = { monthIndex: monthIndex++ };\r\n        // Move to the next month. Because months are sometimes 29 days, the day of the\r\n        // calendar month will move forward slowly but not enough to flip over to a new\r\n        // month before the loop ends at 12-13 months.\r\n        isoDaysDelta += 30;\r\n      }\r\n      oldCalendarDay = calendarDay;\r\n      oldMonthString = calendarMonthString;\r\n    } while (!done);\r\n    result[oldMonthString].daysInMonth = oldCalendarDay + 30 - calendarDay;\r\n\r\n    cache.set(key, result);\r\n    return result as ChineseMonthInfo;\r\n  }\r\n  estimateIsoDate(calendarDate: CalendarYMD) {\r\n    const { year, month } = calendarDate;\r\n    return { year, month: month >= 12 ? 12 : month + 1, day: 1 };\r\n  }\r\n  override adjustCalendarDate(\r\n    calendarDate: Partial<FullCalendarDate>,\r\n    cache: OneObjectCache,\r\n    overflow: Overflow = 'constrain',\r\n    fromLegacyDate = false\r\n  ): FullCalendarDate {\r\n    let { year, month, monthExtra, day, monthCode } = calendarDate;\r\n    if (year === undefined) throw new TypeError('Missing property: year');\r\n    if (fromLegacyDate) {\r\n      // Legacy Date output returns a string that's an integer with an optional\r\n      // \"bis\" suffix used only by the Chinese/Dangi calendar to indicate a leap\r\n      // month. Below we'll normalize the output.\r\n      if (monthExtra && monthExtra !== 'bis') throw new RangeError(`Unexpected leap month suffix: ${monthExtra}`);\r\n      const monthCode = buildMonthCode(month as number, monthExtra !== undefined);\r\n      const monthString = `${month}${monthExtra || ''}`;\r\n      const months = this.getMonthList(year, cache);\r\n      const monthInfo = months[monthString];\r\n      if (monthInfo === undefined) throw new RangeError(`Unmatched month ${monthString} in Chinese year ${year}`);\r\n      month = monthInfo.monthIndex;\r\n      return { year, month, day: day as number, monthCode };\r\n    } else {\r\n      // When called without input coming from legacy Date output,\r\n      // simply ensure that all fields are present.\r\n      this.validateCalendarDate(calendarDate);\r\n      if (month === undefined) {\r\n        ES.assertExists(monthCode);\r\n        const months = this.getMonthList(year, cache);\r\n        let numberPart = monthCode.replace(/^M|L$/g, (ch) => (ch === 'L' ? 'bis' : ''));\r\n        if (numberPart[0] === '0') numberPart = numberPart.slice(1);\r\n        let monthInfo = months[numberPart];\r\n        month = monthInfo && monthInfo.monthIndex;\r\n\r\n        // If this leap month isn't present in this year, constrain to the same\r\n        // day of the previous month.\r\n        if (month === undefined && monthCode.endsWith('L') && monthCode != 'M13L' && overflow === 'constrain') {\r\n          const withoutML = +monthCode.replace(/^M0?|L$/g, '');\r\n          monthInfo = months[withoutML];\r\n          if (monthInfo) {\r\n            month = monthInfo.monthIndex;\r\n            monthCode = buildMonthCode(withoutML);\r\n          }\r\n        }\r\n        if (month === undefined) {\r\n          throw new RangeError(`Unmatched month ${monthCode} in Chinese year ${year}`);\r\n        }\r\n      } else if (monthCode === undefined) {\r\n        const months = this.getMonthList(year, cache);\r\n        const monthEntries = Object.entries(months);\r\n        const largestMonth = monthEntries.length;\r\n        if (overflow === 'reject') {\r\n          ES.RejectToRange(month, 1, largestMonth);\r\n          ES.RejectToRange(day as number, 1, this.maximumMonthLength());\r\n        } else {\r\n          month = ES.ConstrainToRange(month, 1, largestMonth);\r\n          day = ES.ConstrainToRange(day, 1, this.maximumMonthLength());\r\n        }\r\n        const matchingMonthEntry = monthEntries.find((entry) => entry[1].monthIndex === month);\r\n        if (matchingMonthEntry === undefined) {\r\n          throw new RangeError(`Invalid month ${month} in Chinese year ${year}`);\r\n        }\r\n        monthCode = buildMonthCode(\r\n          +matchingMonthEntry[0].replace('bis', ''),\r\n          matchingMonthEntry[0].indexOf('bis') !== -1\r\n        );\r\n      } else {\r\n        // Both month and monthCode are present. Make sure they don't conflict.\r\n        const months = this.getMonthList(year, cache);\r\n        let numberPart = monthCode.replace(/^M|L$/g, (ch) => (ch === 'L' ? 'bis' : ''));\r\n        if (numberPart[0] === '0') numberPart = numberPart.slice(1);\r\n        const monthInfo = months[numberPart];\r\n        if (!monthInfo) throw new RangeError(`Unmatched monthCode ${monthCode} in Chinese year ${year}`);\r\n        if (month !== monthInfo.monthIndex) {\r\n          throw new RangeError(`monthCode ${monthCode} doesn't correspond to month ${month} in Chinese year ${year}`);\r\n        }\r\n      }\r\n      return { ...calendarDate, year, month, monthCode, day: day as number };\r\n    }\r\n  }\r\n}\r\n\r\nclass ChineseHelper extends ChineseBaseHelper {\r\n  id = 'chinese' as const;\r\n}\r\n\r\n// Dangi (Korean) calendar has same implementation as Chinese\r\nclass DangiHelper extends ChineseBaseHelper {\r\n  id = 'dangi' as const;\r\n}\r\n\r\n/**\r\n * Common implementation of all non-ISO calendars.\r\n * Per-calendar id and logic live in `id` and `helper` properties attached later.\r\n * This split allowed an easy separation between code that was similar between\r\n * ISO and non-ISO implementations vs. code that was very different.\r\n */\r\nclass NonIsoCalendar implements CalendarImpl {\r\n  constructor(private readonly helper: HelperBase) {}\r\n  extraFields(fields: FieldKey[]): FieldKey[] {\r\n    if (this.helper.hasEra && fields.includes('year')) {\r\n      return ['era', 'eraYear'];\r\n    }\r\n    return [];\r\n  }\r\n  resolveFields(fields: CalendarFieldsRecord /* , type */) {\r\n    if (this.helper.calendarType !== 'lunisolar') {\r\n      const cache = new OneObjectCache();\r\n      const largestMonth = this.helper.monthsInYear({ year: fields.year ?? 1972 }, cache);\r\n      resolveNonLunisolarMonth(fields, undefined, largestMonth);\r\n    }\r\n  }\r\n  dateToISO(fields: CalendarDateFields, overflow: Overflow) {\r\n    const cache = new OneObjectCache();\r\n    const result = this.helper.calendarToIsoDate(fields, overflow, cache);\r\n    cache.setObject(result);\r\n    return result;\r\n  }\r\n  monthDayToISOReferenceDate(fields: MonthDayFromFieldsObject, overflow: Overflow) {\r\n    const cache = new OneObjectCache();\r\n    const result = this.helper.monthDayFromFields(fields, overflow, cache);\r\n    // result.year is a reference year where this month/day exists in this calendar\r\n    cache.setObject(result);\r\n    return result;\r\n  }\r\n  fieldKeysToIgnore(\r\n    keys: Exclude<keyof Temporal.PlainDateLike, 'calendar'>[]\r\n  ): Exclude<keyof Temporal.PlainDateLike, 'calendar'>[] {\r\n    const result = new Set<(typeof keys)[number]>();\r\n    for (let ix = 0; ix < keys.length; ix++) {\r\n      const key = keys[ix];\r\n      result.add(key);\r\n      switch (key) {\r\n        case 'era':\r\n          result.add('eraYear');\r\n          result.add('year');\r\n          break;\r\n        case 'eraYear':\r\n          result.add('era');\r\n          result.add('year');\r\n          break;\r\n        case 'year':\r\n          result.add('era');\r\n          result.add('eraYear');\r\n          break;\r\n        case 'month':\r\n          result.add('monthCode');\r\n          // See https://github.com/tc39/proposal-temporal/issues/1784\r\n          if (this.helper.erasBeginMidYear) {\r\n            result.add('era');\r\n            result.add('eraYear');\r\n          }\r\n          break;\r\n        case 'monthCode':\r\n          result.add('month');\r\n          if (this.helper.erasBeginMidYear) {\r\n            result.add('era');\r\n            result.add('eraYear');\r\n          }\r\n          break;\r\n        case 'day':\r\n          if (this.helper.erasBeginMidYear) {\r\n            result.add('era');\r\n            result.add('eraYear');\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    return arrayFromSet(result);\r\n  }\r\n  dateAdd(isoDate: ISODate, { years, months, weeks, days }: DateDuration, overflow: Overflow) {\r\n    const cache = OneObjectCache.getCacheForObject(isoDate);\r\n    const calendarDate = this.helper.isoToCalendarDate(isoDate, cache);\r\n    const added = this.helper.addCalendar(calendarDate, { years, months, weeks, days }, overflow, cache);\r\n    const isoAdded = this.helper.calendarToIsoDate(added, 'constrain', cache);\r\n    // The new object's cache starts with the cache of the old object\r\n    if (!OneObjectCache.getCacheForObject(isoAdded)) {\r\n      const newCache = new OneObjectCache(cache);\r\n      newCache.setObject(isoAdded);\r\n    }\r\n    return isoAdded;\r\n  }\r\n  dateUntil(one: ISODate, two: ISODate, largestUnit: Temporal.DateUnit) {\r\n    const cacheOne = OneObjectCache.getCacheForObject(one);\r\n    const cacheTwo = OneObjectCache.getCacheForObject(two);\r\n    const calendarOne = this.helper.isoToCalendarDate(one, cacheOne);\r\n    const calendarTwo = this.helper.isoToCalendarDate(two, cacheTwo);\r\n    const result = this.helper.untilCalendar(calendarOne, calendarTwo, largestUnit, cacheOne);\r\n    return result;\r\n  }\r\n  isoToDate<\r\n    Request extends Partial<Record<keyof CalendarDateRecord, true>>,\r\n    T extends {\r\n      [Field in keyof CalendarDateRecord]: Request extends { [K in Field]: true } ? CalendarDateRecord[Field] : never;\r\n    }\r\n  >(isoDate: ISODate, requestedFields: Request): T {\r\n    const cache = OneObjectCache.getCacheForObject(isoDate);\r\n    const calendarDate: Partial<CalendarDateRecord> & FullCalendarDate = this.helper.isoToCalendarDate(isoDate, cache);\r\n    if (requestedFields.dayOfWeek) {\r\n      calendarDate.dayOfWeek = impl['iso8601'].isoToDate(isoDate, { dayOfWeek: true }).dayOfWeek;\r\n    }\r\n    if (requestedFields.dayOfYear) {\r\n      const startOfYear = this.helper.startOfCalendarYear(calendarDate);\r\n      const diffDays = this.helper.calendarDaysUntil(startOfYear, calendarDate, cache);\r\n      calendarDate.dayOfYear = diffDays + 1;\r\n    }\r\n    if (requestedFields.weekOfYear) calendarDate.weekOfYear = calendarDateWeekOfYear(this.helper.id, isoDate);\r\n    calendarDate.daysInWeek = 7;\r\n    if (requestedFields.daysInMonth) calendarDate.daysInMonth = this.helper.daysInMonth(calendarDate, cache);\r\n    if (requestedFields.daysInYear) {\r\n      const startOfYearCalendar = this.helper.startOfCalendarYear(calendarDate);\r\n      const startOfNextYearCalendar = this.helper.addCalendar(startOfYearCalendar, { years: 1 }, 'constrain', cache);\r\n      calendarDate.daysInYear = this.helper.calendarDaysUntil(startOfYearCalendar, startOfNextYearCalendar, cache);\r\n    }\r\n    if (requestedFields.monthsInYear) calendarDate.monthsInYear = this.helper.monthsInYear(calendarDate, cache);\r\n    if (requestedFields.inLeapYear) calendarDate.inLeapYear = this.helper.inLeapYear(calendarDate, cache);\r\n    return calendarDate as T;\r\n  }\r\n  getFirstDayOfWeek(): number | undefined {\r\n    return this.helper.getFirstDayOfWeek();\r\n  }\r\n  getMinimalDaysInFirstWeek(): number | undefined {\r\n    return this.helper.getMinimalDaysInFirstWeek();\r\n  }\r\n}\r\n\r\nfor (const Helper of [\r\n  HebrewHelper,\r\n  PersianHelper,\r\n  EthiopicHelper,\r\n  EthioaaHelper,\r\n  CopticHelper,\r\n  ChineseHelper,\r\n  DangiHelper,\r\n  RocHelper,\r\n  IndianHelper,\r\n  BuddhistHelper,\r\n  GregoryHelper,\r\n  JapaneseHelper,\r\n  IslamicHelper,\r\n  IslamicUmalquraHelper,\r\n  IslamicTblaHelper,\r\n  IslamicCivilHelper,\r\n  IslamicRgsaHelper,\r\n  IslamicCcHelper\r\n]) {\r\n  const helper = new Helper();\r\n  // Construct a new NonIsoCalendar instance with the given Helper implementation that contains\r\n  // per-calendar logic.\r\n  impl[helper.id] = new NonIsoCalendar(helper);\r\n}\r\n\r\nfunction calendarImpl(calendar: BuiltinCalendarId) {\r\n  return impl[calendar];\r\n}\r\n// Probably not what the intrinsics mechanism was intended for, but view this as\r\n// an export of calendarImpl while avoiding circular dependencies\r\nDefineIntrinsic('calendarImpl', calendarImpl);\r\n","import { assert } from './assert';\r\nimport * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport {\r\n  CAL_ID,\r\n  CALENDAR,\r\n  CreateSlots,\r\n  DATE,\r\n  DATETIME,\r\n  DAYS,\r\n  EPOCHNANOSECONDS,\r\n  GetSlot,\r\n  HasSlot,\r\n  HOURS,\r\n  INST,\r\n  ISO_DATE,\r\n  ISO_DATE_TIME,\r\n  LOCALE,\r\n  MD,\r\n  MICROSECONDS,\r\n  MILLISECONDS,\r\n  MINUTES,\r\n  MONTHS,\r\n  NANOSECONDS,\r\n  OPTIONS,\r\n  ORIGINAL,\r\n  ResetSlot,\r\n  SECONDS,\r\n  SetSlot,\r\n  TIME,\r\n  TIME_FMT,\r\n  TZ_CANONICAL,\r\n  TZ_ORIGINAL,\r\n  WEEKS,\r\n  YEARS,\r\n  YM\r\n} from './slots';\r\nimport type { Temporal } from '..';\r\nimport type { DateTimeFormatParams as Params, DateTimeFormatReturn as Return } from './internaltypes';\r\n\r\n// Save the original Intl.DateTimeFormat, it will likely be overwritten\r\nconst OriginalIntlDateTimeFormat = Intl.DateTimeFormat;\r\n\r\ntype LazySlot = typeof DATE | typeof YM | typeof MD | typeof TIME_FMT | typeof DATETIME | typeof INST;\r\n\r\n// Construction of built-in Intl.DateTimeFormat objects is sloooooow,\r\n// so we'll only create those instances when we need them.\r\n// See https://bugs.chromium.org/p/v8/issues/detail?id=6528\r\nfunction getSlotLazy(obj: DateTimeFormatImpl, slot: LazySlot) {\r\n  let val = GetSlot(obj, slot);\r\n  if (typeof val === 'function') {\r\n    // If we get here, `val` is an \"amender function\". It will take the user's\r\n    // options and transform them into suitable options to be passed into the\r\n    // built-in (non-polyfill) Intl.DateTimeFormat constructor. These options\r\n    // will vary depending on the Temporal type, so that's why we store separate\r\n    // formatters in separate props on the polyfill's DateTimeFormat instances.\r\n    // The efficiency happens because we don't create an (expensive) formatter\r\n    // until the user calls toLocaleString for that Temporal type.\r\n    val = new OriginalIntlDateTimeFormat(GetSlot(obj, LOCALE), val(GetSlot(obj, OPTIONS)));\r\n    ResetSlot(obj, slot, val);\r\n  }\r\n  return val;\r\n}\r\n\r\nfunction createDateTimeFormat(\r\n  dtf: DateTimeFormatImpl,\r\n  locale: Params['constructor'][0],\r\n  optionsParam: Params['constructor'][1]\r\n) {\r\n  const hasOptions = typeof optionsParam !== 'undefined';\r\n  let options: Intl.DateTimeFormatOptions;\r\n  if (hasOptions) {\r\n    // Read all the options in the expected order and copy them to a\r\n    // null-prototype object with which we can do further operations\r\n    // unobservably\r\n    const props: (keyof Intl.DateTimeFormatOptions)[] = [\r\n      'localeMatcher',\r\n      'calendar',\r\n      'numberingSystem',\r\n      'hour12',\r\n      'hourCycle',\r\n      'timeZone',\r\n      'weekday',\r\n      'era',\r\n      'year',\r\n      'month',\r\n      'day',\r\n      'dayPeriod',\r\n      'hour',\r\n      'minute',\r\n      'second',\r\n      'fractionalSecondDigits',\r\n      'timeZoneName',\r\n      'formatMatcher',\r\n      'dateStyle',\r\n      'timeStyle'\r\n    ];\r\n    options = ES.ToObject(optionsParam);\r\n    const newOptions = Object.create(null);\r\n    for (let i = 0; i < props.length; i++) {\r\n      const prop = props[i];\r\n      if (Object.prototype.hasOwnProperty.call(options, prop)) {\r\n        newOptions[prop] = options[prop];\r\n      }\r\n    }\r\n    options = newOptions;\r\n  } else {\r\n    options = Object.create(null);\r\n  }\r\n  const original = new OriginalIntlDateTimeFormat(locale, options);\r\n  const ro = original.resolvedOptions();\r\n\r\n  CreateSlots(dtf);\r\n\r\n  // DateTimeFormat instances are very expensive to create. Therefore, they will\r\n  // be lazily created only when needed, using the locale and options provided.\r\n  // But it's possible for callers to mutate those inputs before lazy creation\r\n  // happens. For this reason, we clone the inputs instead of caching the\r\n  // original objects. To avoid the complexity of deep cloning any inputs that\r\n  // are themselves objects (e.g. the locales array, or options property values\r\n  // that will be coerced to strings), we rely on `resolvedOptions()` to do the\r\n  // coercion and cloning for us. Unfortunately, we can't just use the resolved\r\n  // options as-is because our options-amending logic adds additional fields if\r\n  // the user doesn't supply any unit fields like year, month, day, hour, etc.\r\n  // Therefore, we limit the properties in the clone to properties that were\r\n  // present in the original input.\r\n  if (hasOptions) {\r\n    const clonedResolved = Object.assign(Object.create(null), ro);\r\n    for (const prop in clonedResolved) {\r\n      if (!Object.prototype.hasOwnProperty.call(options, prop)) {\r\n        delete clonedResolved[prop as keyof typeof clonedResolved];\r\n      }\r\n    }\r\n    // hour12/hourCycle don't show up in resolvedOptions() unless the chosen\r\n    // format includes an hour component, so copy them explicitly in case they\r\n    // would otherwise be lost\r\n    clonedResolved.hour12 = options.hour12;\r\n    clonedResolved.hourCycle = options.hourCycle;\r\n    SetSlot(dtf, OPTIONS, clonedResolved);\r\n  } else {\r\n    SetSlot(dtf, OPTIONS, options);\r\n  }\r\n\r\n  SetSlot(dtf, LOCALE, ro.locale);\r\n  SetSlot(dtf, ORIGINAL, original);\r\n  SetSlot(dtf, TZ_CANONICAL, ro.timeZone);\r\n  SetSlot(dtf, CAL_ID, ro.calendar);\r\n  SetSlot(dtf, DATE, dateAmend);\r\n  SetSlot(dtf, YM, yearMonthAmend);\r\n  SetSlot(dtf, MD, monthDayAmend);\r\n  SetSlot(dtf, TIME_FMT, timeAmend);\r\n  SetSlot(dtf, DATETIME, datetimeAmend);\r\n  SetSlot(dtf, INST, instantAmend);\r\n\r\n  // Save the original time zone, for a few reasons:\r\n  // - Clearer error messages\r\n  // - More clearly follows the spec for InitializeDateTimeFormat\r\n  // - Because it follows the spec more closely, will make it easier to integrate\r\n  //   support of offset strings and other potential changes like proposal-canonical-tz.\r\n  const timeZoneOption = hasOptions ? options.timeZone : undefined;\r\n  if (timeZoneOption === undefined) {\r\n    SetSlot(dtf, TZ_ORIGINAL, ro.timeZone);\r\n  } else {\r\n    const id = ES.ToString(timeZoneOption);\r\n    if (id.startsWith('−')) {\r\n      // The initial (Node 23) implementation of offset time zones allowed use\r\n      // of the Unicode minus sign, which was disallowed by a later spec change.\r\n      throw new RangeError('Unicode minus (U+2212) is not supported in time zone offsets');\r\n    }\r\n    // store a normalized identifier\r\n    SetSlot(dtf, TZ_ORIGINAL, ES.ToTemporalTimeZoneIdentifier(id));\r\n  }\r\n  return undefined; // TODO: I couldn't satisfy TS without adding this. Is there another way?\r\n}\r\n\r\nfunction IsPatchedDateTimeFormat(item: unknown): item is DateTimeFormatImpl {\r\n  return HasSlot(item, ORIGINAL);\r\n}\r\n\r\nclass DateTimeFormatImpl {\r\n  constructor(locales: Params['constructor'][0] = undefined, options: Params['constructor'][1] = undefined) {\r\n    createDateTimeFormat(this, locales, options);\r\n  }\r\n\r\n  get format() {\r\n    ES.CheckReceiver(this, IsPatchedDateTimeFormat);\r\n    const boundFormat = format.bind(this);\r\n    Object.defineProperties(boundFormat, {\r\n      length: { value: 1, enumerable: false, writable: false, configurable: true },\r\n      name: { value: '', enumerable: false, writable: false, configurable: true }\r\n    });\r\n    return boundFormat;\r\n  }\r\n\r\n  formatRange(a: Params['formatRange'][0], b: Params['formatRange'][1]): Return['formatRange'] {\r\n    ES.CheckReceiver(this, IsPatchedDateTimeFormat);\r\n    return formatRange.call(this, a, b);\r\n  }\r\n\r\n  formatToParts?<P extends readonly unknown[]>(\r\n    datetime: Params['formatToParts'][0],\r\n    ...rest: P\r\n  ): Return['formatToParts'] {\r\n    ES.CheckReceiver(this, IsPatchedDateTimeFormat);\r\n    return formatToParts.call(this, datetime, ...rest);\r\n  }\r\n\r\n  formatRangeToParts?(\r\n    a: Params['formatRangeToParts'][0],\r\n    b: Params['formatRangeToParts'][1]\r\n  ): Return['formatRangeToParts'] {\r\n    ES.CheckReceiver(this, IsPatchedDateTimeFormat);\r\n    return formatRangeToParts.call(this, a, b);\r\n  }\r\n\r\n  resolvedOptions(): Return['resolvedOptions'] {\r\n    ES.CheckReceiver(this, IsPatchedDateTimeFormat);\r\n    return resolvedOptions.call(this);\r\n  }\r\n}\r\n\r\nif (!('formatToParts' in OriginalIntlDateTimeFormat.prototype)) {\r\n  delete DateTimeFormatImpl.prototype.formatToParts;\r\n}\r\n\r\nif (!('formatRangeToParts' in OriginalIntlDateTimeFormat.prototype)) {\r\n  delete DateTimeFormatImpl.prototype.formatRangeToParts;\r\n}\r\nexport type { DateTimeFormatImpl };\r\n\r\ninterface DateTimeFormatInterface {\r\n  (locales: Params['constructor'][0], options: Params['constructor'][1]): DateTimeFormatImpl;\r\n  new (locales: Params['constructor'][0], options: Params['constructor'][1]): DateTimeFormatImpl;\r\n  supportedLocalesOf: typeof Intl.DateTimeFormat.supportedLocalesOf;\r\n}\r\n\r\n// A non-class constructor is needed because Intl.DateTimeFormat must be able to\r\n// be called without 'new'\r\nexport const DateTimeFormat = function (\r\n  locales: Params['constructor'][0] = undefined,\r\n  options: Params['constructor'][1] = undefined\r\n): DateTimeFormatImpl {\r\n  return new DateTimeFormatImpl(locales, options);\r\n} as unknown as DateTimeFormatInterface;\r\nDateTimeFormatImpl.prototype.constructor = DateTimeFormat;\r\n\r\nObject.defineProperty(DateTimeFormat, 'prototype', {\r\n  value: DateTimeFormatImpl.prototype,\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: false\r\n});\r\nDateTimeFormat.supportedLocalesOf = OriginalIntlDateTimeFormat.supportedLocalesOf;\r\nMakeIntrinsicClass(DateTimeFormat as unknown as typeof Intl.DateTimeFormat, 'Intl.DateTimeFormat');\r\n\r\nfunction resolvedOptions(this: DateTimeFormatImpl): Return['resolvedOptions'] {\r\n  const resolved = GetSlot(this, ORIGINAL).resolvedOptions();\r\n  resolved.timeZone = GetSlot(this, TZ_ORIGINAL);\r\n  return resolved;\r\n}\r\n\r\n// TODO: investigate why there's a rest parameter here. Does this function really need to accept extra params?\r\n// And if so, why doesn't formatRange also accept extra params?\r\nfunction format<P extends readonly unknown[]>(\r\n  this: DateTimeFormatImpl,\r\n  datetime: Params['format'][0],\r\n  ...rest: P\r\n): Return['format'] {\r\n  let overrides = extractOverrides(datetime, this);\r\n  let formatter, formatArgs: [Params['format'][0], ...unknown[]];\r\n  if (overrides.formatter) {\r\n    formatter = overrides.formatter;\r\n    formatArgs = [ES.epochNsToMs(overrides.epochNs, 'floor')];\r\n  } else {\r\n    formatter = GetSlot(this, ORIGINAL);\r\n    formatArgs = [datetime, ...rest];\r\n  }\r\n  return formatter.format(...(formatArgs as [number | Date | undefined]));\r\n}\r\n\r\nfunction formatToParts<P extends readonly unknown[]>(\r\n  this: DateTimeFormatImpl,\r\n  datetime: Params['formatToParts'][0],\r\n  ...rest: P\r\n): Return['formatToParts'] {\r\n  let overrides = extractOverrides(datetime, this);\r\n  let formatter, formatArgs;\r\n  if (overrides.formatter) {\r\n    formatter = overrides.formatter;\r\n    formatArgs = [ES.epochNsToMs(overrides.epochNs, 'floor')];\r\n  } else {\r\n    formatter = GetSlot(this, ORIGINAL);\r\n    formatArgs = [datetime, ...rest];\r\n  }\r\n  return formatter.formatToParts(...(formatArgs as [number | Date | undefined]));\r\n}\r\n\r\nfunction formatRange(this: DateTimeFormatImpl, aParam: Params['formatRange'][0], bParam: Params['formatRange'][1]) {\r\n  if (aParam === undefined || bParam === undefined) {\r\n    throw new TypeError('Intl.DateTimeFormat.formatRange requires two values');\r\n  }\r\n  const a = toDateTimeFormattable(aParam);\r\n  const b = toDateTimeFormattable(bParam);\r\n  let formatArgs = [a, b] as const;\r\n  let formatter;\r\n  if (isTemporalObject(a) !== isTemporalObject(b)) {\r\n    throw new TypeError('Intl.DateTimeFormat.formatRange accepts two values of the same type');\r\n  }\r\n  if (isTemporalObject(a)) {\r\n    if (!sameTemporalType(a, b)) {\r\n      throw new TypeError('Intl.DateTimeFormat.formatRange accepts two values of the same type');\r\n    }\r\n    const { epochNs: aa, formatter: aformatter } = extractOverrides(a, this);\r\n    const { epochNs: bb, formatter: bformatter } = extractOverrides(b, this);\r\n    if (aformatter) {\r\n      assert(bformatter == aformatter, 'formatters for same Temporal type should be identical');\r\n      formatter = aformatter;\r\n      formatArgs = [ES.epochNsToMs(aa, 'floor'), ES.epochNsToMs(bb, 'floor')];\r\n    }\r\n  }\r\n  if (!formatter) {\r\n    formatter = GetSlot(this, ORIGINAL);\r\n  }\r\n  return formatter.formatRange(...(formatArgs as [number, number]));\r\n}\r\n\r\nfunction formatRangeToParts(\r\n  this: DateTimeFormatImpl,\r\n  aParam: Params['formatRangeToParts'][0],\r\n  bParam: Params['formatRangeToParts'][1]\r\n) {\r\n  if (aParam === undefined || bParam === undefined) {\r\n    throw new TypeError('Intl.DateTimeFormat.formatRange requires two values');\r\n  }\r\n  const a = toDateTimeFormattable(aParam);\r\n  const b = toDateTimeFormattable(bParam);\r\n  let formatArgs = [a, b] as const;\r\n  let formatter;\r\n  if (isTemporalObject(a) !== isTemporalObject(b)) {\r\n    throw new TypeError('Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type');\r\n  }\r\n  if (isTemporalObject(a)) {\r\n    if (!sameTemporalType(a, b)) {\r\n      throw new TypeError('Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type');\r\n    }\r\n    const { epochNs: aa, formatter: aformatter } = extractOverrides(a, this);\r\n    const { epochNs: bb, formatter: bformatter } = extractOverrides(b, this);\r\n    if (aformatter) {\r\n      assert(bformatter == aformatter, 'formatters for same Temporal type should be identical');\r\n      formatter = aformatter;\r\n      formatArgs = [ES.epochNsToMs(aa, 'floor'), ES.epochNsToMs(bb, 'floor')];\r\n    }\r\n  }\r\n  if (!formatter) {\r\n    formatter = GetSlot(this, ORIGINAL);\r\n  }\r\n  return formatter.formatRangeToParts(...(formatArgs as [number, number]));\r\n}\r\n\r\n// \"false\" is a signal to delete this option\r\ntype MaybeFalseOptions = {\r\n  [K in keyof Intl.DateTimeFormatOptions]?: Intl.DateTimeFormatOptions[K] | false;\r\n};\r\n\r\nfunction amend(optionsParam: Intl.DateTimeFormatOptions = {}, amended: MaybeFalseOptions = {}) {\r\n  const options = Object.assign({}, optionsParam);\r\n  const props = [\r\n    'year',\r\n    'month',\r\n    'day',\r\n    'hour',\r\n    'minute',\r\n    'second',\r\n    'weekday',\r\n    'dayPeriod',\r\n    'timeZoneName',\r\n    'dateStyle',\r\n    'timeStyle'\r\n  ] as const;\r\n  for (let i = 0; i < props.length; i++) {\r\n    const opt = props[i];\r\n    // TODO: can this be typed more cleanly?\r\n    type OptionMaybeFalse = (typeof options)[typeof opt] | false;\r\n    (options[opt] as OptionMaybeFalse) = opt in amended ? amended[opt] : options[opt];\r\n    if ((options[opt] as OptionMaybeFalse) === false || options[opt] === undefined) delete options[opt];\r\n  }\r\n  return options;\r\n}\r\n\r\ntype OptionsType<T extends TypesWithToLocaleString> = NonNullable<Parameters<T['toLocaleString']>[1]>;\r\n\r\nfunction timeAmend(originalOptions: OptionsType<Temporal.PlainTime>) {\r\n  const options = amend(originalOptions, {\r\n    year: false,\r\n    month: false,\r\n    day: false,\r\n    weekday: false,\r\n    timeZoneName: false,\r\n    dateStyle: false\r\n  });\r\n  if (options.timeStyle === 'long' || options.timeStyle === 'full') {\r\n    // Try to fake what timeStyle should do if not printing the time zone name\r\n    delete options.timeStyle;\r\n    Object.assign(options, { hour: 'numeric', minute: '2-digit', second: '2-digit' });\r\n  }\r\n  if (!hasTimeOptions(options)) {\r\n    if (hasAnyDateTimeOptions(originalOptions)) {\r\n      throw new TypeError(`cannot format Temporal.PlainTime with options [${Object.keys(originalOptions)}]`);\r\n    }\r\n    Object.assign(options, {\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      second: 'numeric'\r\n    });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction yearMonthAmend(originalOptions: OptionsType<Temporal.PlainYearMonth>) {\r\n  // Try to fake what dateStyle should do for dates without a day. This is not\r\n  // accurate for locales that always print the era\r\n  const dateStyleHacks = {\r\n    short: { year: '2-digit', month: 'numeric' },\r\n    medium: { year: 'numeric', month: 'short' },\r\n    long: { year: 'numeric', month: 'long' },\r\n    full: { year: 'numeric', month: 'long' }\r\n  };\r\n  const options = amend(originalOptions, {\r\n    day: false,\r\n    hour: false,\r\n    minute: false,\r\n    second: false,\r\n    weekday: false,\r\n    dayPeriod: false,\r\n    timeZoneName: false,\r\n    timeStyle: false\r\n  });\r\n  if ('dateStyle' in options && options.dateStyle) {\r\n    const style = options.dateStyle;\r\n    delete options.dateStyle;\r\n    Object.assign(options, dateStyleHacks[style]);\r\n  }\r\n  if (!('year' in options || 'month' in options || 'era' in options)) {\r\n    if (hasAnyDateTimeOptions(originalOptions)) {\r\n      throw new TypeError(`cannot format PlainYearMonth with options [${Object.keys(originalOptions)}]`);\r\n    }\r\n    Object.assign(options, { year: 'numeric', month: 'numeric' });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction monthDayAmend(originalOptions: OptionsType<Temporal.PlainMonthDay>) {\r\n  // Try to fake what dateStyle should do for dates without a day\r\n  const dateStyleHacks = {\r\n    short: { month: 'numeric', day: 'numeric' },\r\n    medium: { month: 'short', day: 'numeric' },\r\n    long: { month: 'long', day: 'numeric' },\r\n    full: { month: 'long', day: 'numeric' }\r\n  };\r\n  const options = amend(originalOptions, {\r\n    year: false,\r\n    hour: false,\r\n    minute: false,\r\n    second: false,\r\n    weekday: false,\r\n    dayPeriod: false,\r\n    timeZoneName: false,\r\n    timeStyle: false\r\n  });\r\n  if ('dateStyle' in options && options.dateStyle) {\r\n    const style = options.dateStyle;\r\n    delete options.dateStyle;\r\n    Object.assign(options, dateStyleHacks[style]);\r\n  }\r\n  if (!('month' in options || 'day' in options)) {\r\n    if (hasAnyDateTimeOptions(originalOptions)) {\r\n      throw new TypeError(`cannot format PlainMonthDay with options [${Object.keys(originalOptions)}]`);\r\n    }\r\n    Object.assign(options, { month: 'numeric', day: 'numeric' });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction dateAmend(originalOptions: OptionsType<Temporal.PlainDate>) {\r\n  const options = amend(originalOptions, {\r\n    hour: false,\r\n    minute: false,\r\n    second: false,\r\n    dayPeriod: false,\r\n    timeZoneName: false,\r\n    timeStyle: false\r\n  });\r\n  if (!hasDateOptions(options)) {\r\n    if (hasAnyDateTimeOptions(originalOptions)) {\r\n      throw new TypeError(`cannot format PlainDate with options [${Object.keys(originalOptions)}]`);\r\n    }\r\n    Object.assign(options, {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction datetimeAmend(originalOptions: OptionsType<Temporal.PlainDateTime>) {\r\n  const options = amend(originalOptions, { timeZoneName: false });\r\n  if (options.timeStyle === 'long' || options.timeStyle === 'full') {\r\n    // Try to fake what timeStyle should do if not printing the time zone name\r\n    delete options.timeStyle;\r\n    Object.assign(options, { hour: 'numeric', minute: '2-digit', second: '2-digit' });\r\n\r\n    // If moving to a fake timeStyle while dateStyle is present, we also have to\r\n    // move to a fake dateStyle. dateStyle is mutually exclusive with hour etc.\r\n    if (options.dateStyle) {\r\n      const dateStyleHacks = {\r\n        short: { year: 'numeric', month: 'numeric', day: 'numeric' },\r\n        medium: { year: 'numeric', month: 'short', day: 'numeric' },\r\n        long: { year: 'numeric', month: 'long', day: 'numeric' },\r\n        full: { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' }\r\n      };\r\n      Object.assign(options, dateStyleHacks[options.dateStyle]);\r\n      delete options.dateStyle;\r\n    }\r\n  }\r\n  if (!hasTimeOptions(options) && !hasDateOptions(options)) {\r\n    if (hasAnyDateTimeOptions(originalOptions)) {\r\n      throw new TypeError(`cannot format PlainDateTime with options [${Object.keys(originalOptions)}]`);\r\n    }\r\n    Object.assign(options, {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      second: 'numeric'\r\n    });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction instantAmend(optionsParam: OptionsType<Temporal.Instant>) {\r\n  let options = optionsParam;\r\n  if (!hasTimeOptions(options) && !hasDateOptions(options)) {\r\n    options = Object.assign({}, options, {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      second: 'numeric'\r\n    });\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction hasDateOptions(options: OptionsType<TypesWithToLocaleString>) {\r\n  return (\r\n    'year' in options ||\r\n    'month' in options ||\r\n    'day' in options ||\r\n    'weekday' in options ||\r\n    'dateStyle' in options ||\r\n    'era' in options\r\n  );\r\n}\r\n\r\nfunction hasTimeOptions(options: OptionsType<TypesWithToLocaleString>) {\r\n  return (\r\n    'hour' in options ||\r\n    'minute' in options ||\r\n    'second' in options ||\r\n    'timeStyle' in options ||\r\n    'dayPeriod' in options ||\r\n    'fractionalSecondDigits' in options\r\n  );\r\n}\r\n\r\nfunction hasAnyDateTimeOptions(originalOptions: OptionsType<TypesWithToLocaleString>) {\r\n  return (\r\n    hasDateOptions(originalOptions) ||\r\n    hasTimeOptions(originalOptions) ||\r\n    'dateStyle' in originalOptions ||\r\n    'timeStyle' in originalOptions ||\r\n    'timeZoneName' in originalOptions\r\n  );\r\n}\r\n\r\nfunction isTemporalObject(\r\n  obj: unknown\r\n): obj is\r\n  | Temporal.PlainDate\r\n  | Temporal.PlainTime\r\n  | Temporal.PlainDateTime\r\n  | Temporal.ZonedDateTime\r\n  | Temporal.PlainYearMonth\r\n  | Temporal.PlainMonthDay\r\n  | Temporal.Instant {\r\n  return (\r\n    ES.IsTemporalDate(obj) ||\r\n    ES.IsTemporalTime(obj) ||\r\n    ES.IsTemporalDateTime(obj) ||\r\n    ES.IsTemporalZonedDateTime(obj) ||\r\n    ES.IsTemporalYearMonth(obj) ||\r\n    ES.IsTemporalMonthDay(obj) ||\r\n    ES.IsTemporalInstant(obj)\r\n  );\r\n}\r\n\r\nfunction toDateTimeFormattable(value: unknown) {\r\n  if (isTemporalObject(value)) return value;\r\n  return ES.ToNumber(value);\r\n}\r\n\r\nfunction sameTemporalType(x: unknown, y: unknown) {\r\n  if (!isTemporalObject(x) || !isTemporalObject(y)) return false;\r\n  if (ES.IsTemporalTime(x) && !ES.IsTemporalTime(y)) return false;\r\n  if (ES.IsTemporalDate(x) && !ES.IsTemporalDate(y)) return false;\r\n  if (ES.IsTemporalDateTime(x) && !ES.IsTemporalDateTime(y)) return false;\r\n  if (ES.IsTemporalZonedDateTime(x) && !ES.IsTemporalZonedDateTime(y)) return false;\r\n  if (ES.IsTemporalYearMonth(x) && !ES.IsTemporalYearMonth(y)) return false;\r\n  if (ES.IsTemporalMonthDay(x) && !ES.IsTemporalMonthDay(y)) return false;\r\n  if (ES.IsTemporalInstant(x) && !ES.IsTemporalInstant(y)) return false;\r\n  return true;\r\n}\r\n\r\ntype TypesWithToLocaleString =\r\n  | Temporal.PlainDateTime\r\n  | Temporal.PlainDate\r\n  | Temporal.PlainTime\r\n  | Temporal.PlainYearMonth\r\n  | Temporal.PlainMonthDay\r\n  | Temporal.ZonedDateTime\r\n  | Temporal.Instant;\r\n\r\nfunction extractOverrides(temporalObj: Params['format'][0], main: DateTimeFormatImpl) {\r\n  if (ES.IsTemporalTime(temporalObj)) {\r\n    const isoDateTime = {\r\n      isoDate: { year: 1970, month: 1, day: 1 },\r\n      time: GetSlot(temporalObj, TIME)\r\n    };\r\n    return {\r\n      epochNs: ES.GetEpochNanosecondsFor(GetSlot(main, TZ_CANONICAL), isoDateTime, 'compatible'),\r\n      formatter: getSlotLazy(main, TIME_FMT)\r\n    };\r\n  }\r\n\r\n  if (ES.IsTemporalYearMonth(temporalObj)) {\r\n    const calendar = GetSlot(temporalObj, CALENDAR);\r\n    const mainCalendar = GetSlot(main, CAL_ID);\r\n    if (calendar !== mainCalendar) {\r\n      throw new RangeError(\r\n        `cannot format PlainYearMonth with calendar ${calendar} in locale with calendar ${mainCalendar}`\r\n      );\r\n    }\r\n    const isoDateTime = ES.CombineISODateAndTimeRecord(GetSlot(temporalObj, ISO_DATE), ES.NoonTimeRecord());\r\n    return {\r\n      epochNs: ES.GetEpochNanosecondsFor(GetSlot(main, TZ_CANONICAL), isoDateTime, 'compatible'),\r\n      formatter: getSlotLazy(main, YM)\r\n    };\r\n  }\r\n\r\n  if (ES.IsTemporalMonthDay(temporalObj)) {\r\n    const calendar = GetSlot(temporalObj, CALENDAR);\r\n    const mainCalendar = GetSlot(main, CAL_ID);\r\n    if (calendar !== mainCalendar) {\r\n      throw new RangeError(\r\n        `cannot format PlainMonthDay with calendar ${calendar} in locale with calendar ${mainCalendar}`\r\n      );\r\n    }\r\n    const isoDateTime = ES.CombineISODateAndTimeRecord(GetSlot(temporalObj, ISO_DATE), ES.NoonTimeRecord());\r\n    return {\r\n      epochNs: ES.GetEpochNanosecondsFor(GetSlot(main, TZ_CANONICAL), isoDateTime, 'compatible'),\r\n      formatter: getSlotLazy(main, MD)\r\n    };\r\n  }\r\n\r\n  if (ES.IsTemporalDate(temporalObj)) {\r\n    const calendar = GetSlot(temporalObj, CALENDAR);\r\n    const mainCalendar = GetSlot(main, CAL_ID);\r\n    if (calendar !== 'iso8601' && calendar !== mainCalendar) {\r\n      throw new RangeError(`cannot format PlainDate with calendar ${calendar} in locale with calendar ${mainCalendar}`);\r\n    }\r\n    const isoDateTime = ES.CombineISODateAndTimeRecord(GetSlot(temporalObj, ISO_DATE), ES.NoonTimeRecord());\r\n    return {\r\n      epochNs: ES.GetEpochNanosecondsFor(GetSlot(main, TZ_CANONICAL), isoDateTime, 'compatible'),\r\n      formatter: getSlotLazy(main, DATE)\r\n    };\r\n  }\r\n\r\n  if (ES.IsTemporalDateTime(temporalObj)) {\r\n    const calendar = GetSlot(temporalObj, CALENDAR);\r\n    const mainCalendar = GetSlot(main, CAL_ID);\r\n    if (calendar !== 'iso8601' && calendar !== mainCalendar) {\r\n      throw new RangeError(\r\n        `cannot format PlainDateTime with calendar ${calendar} in locale with calendar ${mainCalendar}`\r\n      );\r\n    }\r\n    const isoDateTime = GetSlot(temporalObj, ISO_DATE_TIME);\r\n    return {\r\n      epochNs: ES.GetEpochNanosecondsFor(GetSlot(main, TZ_CANONICAL), isoDateTime, 'compatible'),\r\n      formatter: getSlotLazy(main, DATETIME)\r\n    };\r\n  }\r\n\r\n  if (ES.IsTemporalZonedDateTime(temporalObj)) {\r\n    throw new TypeError(\r\n      'Temporal.ZonedDateTime not supported in DateTimeFormat methods. Use toLocaleString() instead.'\r\n    );\r\n  }\r\n\r\n  if (ES.IsTemporalInstant(temporalObj)) {\r\n    return {\r\n      epochNs: GetSlot(temporalObj, EPOCHNANOSECONDS),\r\n      formatter: getSlotLazy(main, INST)\r\n    };\r\n  }\r\n\r\n  return {};\r\n}\r\n\r\nfunction temporalDurationToCompatibilityRecord(duration: Temporal.Duration) {\r\n  const record = Object.create(null);\r\n  record.years = GetSlot(duration, YEARS);\r\n  record.months = GetSlot(duration, MONTHS);\r\n  record.weeks = GetSlot(duration, WEEKS);\r\n  record.days = GetSlot(duration, DAYS);\r\n  record.hours = GetSlot(duration, HOURS);\r\n  record.minutes = GetSlot(duration, MINUTES);\r\n  record.seconds = GetSlot(duration, SECONDS);\r\n  record.milliseconds = GetSlot(duration, MILLISECONDS);\r\n  record.microseconds = GetSlot(duration, MICROSECONDS);\r\n  record.nanoseconds = GetSlot(duration, NANOSECONDS);\r\n  return record;\r\n}\r\n\r\nconst { format: IntlDurationFormatPrototypeFormat, formatToParts: IntlDurationFormatPrototypeFormatToParts } =\r\n  Intl.DurationFormat?.prototype ?? Object.create(null);\r\n\r\nexport function ModifiedIntlDurationFormatPrototypeFormat(\r\n  this: Intl.DurationFormat,\r\n  durationLike: Temporal.DurationLike\r\n) {\r\n  Intl.DurationFormat.prototype.resolvedOptions.call(this); // brand check\r\n  const duration = ES.ToTemporalDuration(durationLike);\r\n  const record = temporalDurationToCompatibilityRecord(duration);\r\n  return IntlDurationFormatPrototypeFormat.call(this, record);\r\n}\r\n\r\nif (Intl.DurationFormat?.prototype) {\r\n  Intl.DurationFormat.prototype.format = ModifiedIntlDurationFormatPrototypeFormat;\r\n  Intl.DurationFormat.prototype.formatToParts = function formatToParts(durationLike: Temporal.DurationLike) {\r\n    Intl.DurationFormat.prototype.resolvedOptions.call(this); // brand check\r\n    const duration = ES.ToTemporalDuration(durationLike);\r\n    const record = temporalDurationToCompatibilityRecord(duration);\r\n    return IntlDurationFormatPrototypeFormatToParts.call(this, record);\r\n  };\r\n}\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport { EPOCHNANOSECONDS, GetSlot } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type { InstantParams as Params, InstantReturn as Return } from './internaltypes';\r\n\r\nexport class Instant implements Temporal.Instant {\r\n  constructor(epochNanoseconds: bigint) {\r\n    // Note: if the argument is not passed, ToBigInt(undefined) will throw. This check exists only\r\n    //       to improve the error message.\r\n    if (arguments.length < 1) {\r\n      throw new TypeError('missing argument: epochNanoseconds is required');\r\n    }\r\n\r\n    const ns = BigInt(epochNanoseconds);\r\n    ES.CreateTemporalInstantSlots(this, ns);\r\n  }\r\n\r\n  get epochMilliseconds(): Return['epochMilliseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    const value = GetSlot(this, EPOCHNANOSECONDS);\r\n    return ES.epochNsToMs(value, 'floor');\r\n  }\r\n  get epochNanoseconds(): Return['epochNanoseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.ToBigIntExternal(BigInt(GetSlot(this, EPOCHNANOSECONDS)));\r\n  }\r\n\r\n  add(temporalDurationLike: Params['add'][0]): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.AddDurationToInstant('add', this, temporalDurationLike);\r\n  }\r\n  subtract(temporalDurationLike: Params['subtract'][0]): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.AddDurationToInstant('subtract', this, temporalDurationLike);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.DifferenceTemporalInstant('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.DifferenceTemporalInstant('since', this, other, options);\r\n  }\r\n  round(roundToParam: Params['round'][0]): Return['round'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    if (roundToParam === undefined) throw new TypeError('options parameter is required');\r\n    const roundTo =\r\n      typeof roundToParam === 'string'\r\n        ? (ES.CreateOnePropObject('smallestUnit', roundToParam) as Exclude<typeof roundToParam, string>)\r\n        : ES.GetOptionsObject(roundToParam);\r\n    const roundingIncrement = ES.GetTemporalRoundingIncrementOption(roundTo);\r\n    const roundingMode = ES.GetRoundingModeOption(roundTo, 'halfExpand');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'smallestUnit', 'time', ES.REQUIRED);\r\n    const maximumIncrements = {\r\n      hour: 24,\r\n      minute: 1440,\r\n      second: 86400,\r\n      millisecond: 86400e3,\r\n      microsecond: 86400e6,\r\n      nanosecond: 86400e9\r\n    };\r\n    ES.ValidateTemporalRoundingIncrement(roundingIncrement, maximumIncrements[smallestUnit], true);\r\n    const ns = GetSlot(this, EPOCHNANOSECONDS);\r\n    const roundedNs = ES.RoundTemporalInstant(ns, roundingIncrement, smallestUnit, roundingMode);\r\n    return ES.CreateTemporalInstant(roundedNs);\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    const other = ES.ToTemporalInstant(otherParam);\r\n    const one = GetSlot(this, EPOCHNANOSECONDS);\r\n    const two = GetSlot(other, EPOCHNANOSECONDS);\r\n    return BigInt(one) === BigInt(two);\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const digits = ES.GetTemporalFractionalSecondDigitsOption(resolvedOptions);\r\n    const roundingMode = ES.GetRoundingModeOption(resolvedOptions, 'trunc');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(resolvedOptions, 'smallestUnit', 'time', undefined);\r\n    if (smallestUnit === 'hour') throw new RangeError('smallestUnit must be a time unit other than \"hour\"');\r\n    let timeZone = resolvedOptions.timeZone;\r\n    if (timeZone !== undefined) timeZone = ES.ToTemporalTimeZoneIdentifier(timeZone);\r\n    const { precision, unit, increment } = ES.ToSecondsStringPrecisionRecord(smallestUnit, digits);\r\n    const ns = GetSlot(this, EPOCHNANOSECONDS);\r\n    const roundedNs = ES.RoundTemporalInstant(ns, increment, unit, roundingMode);\r\n    const roundedInstant = ES.CreateTemporalInstant(roundedNs);\r\n    return ES.TemporalInstantToString(roundedInstant, timeZone, precision);\r\n  }\r\n  toJSON(): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return ES.TemporalInstantToString(this, undefined, 'auto');\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('Instant');\r\n  }\r\n  toZonedDateTimeISO(timeZoneParam: Params['toZonedDateTimeISO'][0]): Return['toZonedDateTimeISO'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalInstant);\r\n    const timeZone = ES.ToTemporalTimeZoneIdentifier(timeZoneParam);\r\n    return ES.CreateTemporalZonedDateTime(GetSlot(this, EPOCHNANOSECONDS), timeZone, 'iso8601');\r\n  }\r\n\r\n  static fromEpochMilliseconds(epochMilliseconds: Params['fromEpochMilliseconds'][0]): Return['fromEpochMilliseconds'] {\r\n    const epochNanoseconds = ES.epochMsToNs(ES.ToNumber(epochMilliseconds));\r\n    return ES.CreateTemporalInstant(epochNanoseconds);\r\n  }\r\n  static fromEpochNanoseconds(\r\n    epochNanosecondsParam: Params['fromEpochNanoseconds'][0]\r\n  ): Return['fromEpochNanoseconds'] {\r\n    const epochNanoseconds = BigInt(epochNanosecondsParam);\r\n    return ES.CreateTemporalInstant(epochNanoseconds);\r\n  }\r\n  static from(item: Params['from'][0]): Return['from'] {\r\n    return ES.ToTemporalInstant(item);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalInstant(oneParam);\r\n    const two = ES.ToTemporalInstant(twoParam);\r\n    const oneNs = GetSlot(one, EPOCHNANOSECONDS);\r\n    const twoNs = GetSlot(two, EPOCHNANOSECONDS);\r\n    if (oneNs < twoNs) return -1;\r\n    if (oneNs > twoNs) return 1;\r\n    return 0;\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.Instant';\r\n}\r\n\r\nMakeIntrinsicClass(Instant, 'Temporal.Instant');\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport { CALENDAR, GetSlot, ISO_DATE, TIME } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type { CalendarDateRecord, PlainDateParams as Params, PlainDateReturn as Return } from './internaltypes';\r\n\r\nexport class PlainDate implements Temporal.PlainDate {\r\n  constructor(\r\n    isoYear: Params['constructor'][0],\r\n    isoMonth: Params['constructor'][1],\r\n    isoDay: Params['constructor'][2],\r\n    calendarParam: Params['constructor'][3] = 'iso8601'\r\n  ) {\r\n    const year = ES.ToIntegerWithTruncation(isoYear);\r\n    const month = ES.ToIntegerWithTruncation(isoMonth);\r\n    const day = ES.ToIntegerWithTruncation(isoDay);\r\n    const calendar = ES.CanonicalizeCalendar(calendarParam === undefined ? 'iso8601' : ES.RequireString(calendarParam));\r\n    ES.RejectISODate(year, month, day);\r\n\r\n    ES.CreateTemporalDateSlots(this, { year, month, day }, calendar);\r\n  }\r\n  get calendarId(): Return['calendarId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return GetSlot(this, CALENDAR);\r\n  }\r\n  get era(): Return['era'] {\r\n    return getCalendarProperty(this, 'era');\r\n  }\r\n  get eraYear(): Return['eraYear'] {\r\n    return getCalendarProperty(this, 'eraYear');\r\n  }\r\n  get year(): Return['year'] {\r\n    return getCalendarProperty(this, 'year');\r\n  }\r\n  get month(): Return['month'] {\r\n    return getCalendarProperty(this, 'month');\r\n  }\r\n  get monthCode(): Return['monthCode'] {\r\n    return getCalendarProperty(this, 'monthCode');\r\n  }\r\n  get day(): Return['day'] {\r\n    return getCalendarProperty(this, 'day');\r\n  }\r\n  get dayOfWeek(): Return['dayOfWeek'] {\r\n    return getCalendarProperty(this, 'dayOfWeek');\r\n  }\r\n  get dayOfYear(): Return['dayOfYear'] {\r\n    return getCalendarProperty(this, 'dayOfYear');\r\n  }\r\n  get weekOfYear(): Return['weekOfYear'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.week;\r\n  }\r\n  get yearOfWeek(): Return['yearOfWeek'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.year;\r\n  }\r\n  get daysInWeek(): Return['daysInWeek'] {\r\n    return getCalendarProperty(this, 'daysInWeek');\r\n  }\r\n  get daysInMonth(): Return['daysInMonth'] {\r\n    return getCalendarProperty(this, 'daysInMonth');\r\n  }\r\n  get daysInYear(): Return['daysInYear'] {\r\n    return getCalendarProperty(this, 'daysInYear');\r\n  }\r\n  get monthsInYear(): Return['monthsInYear'] {\r\n    return getCalendarProperty(this, 'monthsInYear');\r\n  }\r\n  get inLeapYear(): Return['inLeapYear'] {\r\n    return getCalendarProperty(this, 'inLeapYear');\r\n  }\r\n  with(temporalDateLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    if (!ES.IsObject(temporalDateLike)) {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalDateLike);\r\n\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    let fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE));\r\n    const partialDate = ES.PrepareCalendarFields(\r\n      calendar,\r\n      temporalDateLike,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      [],\r\n      'partial'\r\n    );\r\n    fields = ES.CalendarMergeFields(calendar, fields, partialDate);\r\n\r\n    const overflow = ES.GetTemporalOverflowOption(ES.GetOptionsObject(options));\r\n    const isoDate = ES.CalendarDateFromFields(calendar, fields, overflow);\r\n    return ES.CreateTemporalDate(isoDate, calendar);\r\n  }\r\n  withCalendar(calendarParam: Params['withCalendar'][0]): Return['withCalendar'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const calendar = ES.ToTemporalCalendarIdentifier(calendarParam);\r\n    return ES.CreateTemporalDate(GetSlot(this, ISO_DATE), calendar);\r\n  }\r\n  add(temporalDurationLike: Params['add'][0], options: Params['add'][1] = undefined): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return ES.AddDurationToDate('add', this, temporalDurationLike, options);\r\n  }\r\n  subtract(\r\n    temporalDurationLike: Params['subtract'][0],\r\n    options: Params['subtract'][1] = undefined\r\n  ): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return ES.AddDurationToDate('subtract', this, temporalDurationLike, options);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return ES.DifferenceTemporalPlainDate('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return ES.DifferenceTemporalPlainDate('since', this, other, options);\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const other = ES.ToTemporalDate(otherParam);\r\n    if (ES.CompareISODate(GetSlot(this, ISO_DATE), GetSlot(other, ISO_DATE)) !== 0) return false;\r\n    return ES.CalendarEquals(GetSlot(this, CALENDAR), GetSlot(other, CALENDAR));\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const showCalendar = ES.GetTemporalShowCalendarNameOption(resolvedOptions);\r\n    return ES.TemporalDateToString(this, showCalendar);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return ES.TemporalDateToString(this);\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('PlainDate');\r\n  }\r\n  toPlainDateTime(temporalTime: Params['toPlainDateTime'][0] = undefined): Return['toPlainDateTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const time = ES.ToTimeRecordOrMidnight(temporalTime);\r\n    const isoDateTime = ES.CombineISODateAndTimeRecord(GetSlot(this, ISO_DATE), time);\r\n    return ES.CreateTemporalDateTime(isoDateTime, GetSlot(this, CALENDAR));\r\n  }\r\n  toZonedDateTime(item: Params['toZonedDateTime'][0]): Return['toZonedDateTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n\r\n    let timeZone, temporalTime;\r\n    if (ES.IsObject(item)) {\r\n      const timeZoneLike = item.timeZone;\r\n      if (timeZoneLike === undefined) {\r\n        timeZone = ES.ToTemporalTimeZoneIdentifier(item);\r\n      } else {\r\n        timeZone = ES.ToTemporalTimeZoneIdentifier(timeZoneLike);\r\n        temporalTime = item.plainTime;\r\n      }\r\n    } else {\r\n      timeZone = ES.ToTemporalTimeZoneIdentifier(item);\r\n    }\r\n\r\n    const isoDate = GetSlot(this, ISO_DATE);\r\n    let epochNs;\r\n    if (temporalTime === undefined) {\r\n      epochNs = ES.GetStartOfDay(timeZone, isoDate);\r\n    } else {\r\n      temporalTime = ES.ToTemporalTime(temporalTime);\r\n      const isoDateTime = ES.CombineISODateAndTimeRecord(isoDate, GetSlot(temporalTime, TIME));\r\n      epochNs = ES.GetEpochNanosecondsFor(timeZone, isoDateTime, 'compatible');\r\n    }\r\n    return ES.CreateTemporalZonedDateTime(epochNs, timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  toPlainYearMonth(): Return['toPlainYearMonth'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    const fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE));\r\n    const isoDate = ES.CalendarYearMonthFromFields(calendar, fields, 'constrain');\r\n    return ES.CreateTemporalYearMonth(isoDate, calendar);\r\n  }\r\n  toPlainMonthDay(): Return['toPlainMonthDay'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDate);\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    const fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE));\r\n    const isoDate = ES.CalendarMonthDayFromFields(calendar, fields, 'constrain');\r\n    return ES.CreateTemporalMonthDay(isoDate, calendar);\r\n  }\r\n\r\n  static from(item: Params['from'][0], options: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalDate(item, options);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalDate(oneParam);\r\n    const two = ES.ToTemporalDate(twoParam);\r\n    return ES.CompareISODate(GetSlot(one, ISO_DATE), GetSlot(two, ISO_DATE));\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.PlainDate';\r\n}\r\n\r\nMakeIntrinsicClass(PlainDate, 'Temporal.PlainDate');\r\n\r\nfunction getCalendarProperty<P extends keyof CalendarDateRecord>(\r\n  date: Temporal.PlainDate,\r\n  prop: P\r\n): CalendarDateRecord[P] {\r\n  ES.CheckReceiver(date, ES.IsTemporalDate);\r\n  const isoDate = GetSlot(date, ISO_DATE);\r\n  return ES.calendarImplForObj(date).isoToDate(isoDate, { [prop]: true })[prop];\r\n}\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\n\r\nimport { CALENDAR, GetSlot, ISO_DATE_TIME } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type { CalendarDateRecord, PlainDateTimeParams as Params, PlainDateTimeReturn as Return } from './internaltypes';\r\n\r\nexport class PlainDateTime implements Temporal.PlainDateTime {\r\n  constructor(\r\n    isoYear: Params['constructor'][0],\r\n    isoMonth: Params['constructor'][1],\r\n    isoDay: Params['constructor'][2],\r\n    hourParam: Params['constructor'][3] = 0,\r\n    minuteParam: Params['constructor'][4] = 0,\r\n    secondParam: Params['constructor'][5] = 0,\r\n    millisecondParam: Params['constructor'][6] = 0,\r\n    microsecondParam: Params['constructor'][7] = 0,\r\n    nanosecondParam: Params['constructor'][8] = 0,\r\n    calendarParam: Params['constructor'][9] = 'iso8601'\r\n  ) {\r\n    const year = ES.ToIntegerWithTruncation(isoYear);\r\n    const month = ES.ToIntegerWithTruncation(isoMonth);\r\n    const day = ES.ToIntegerWithTruncation(isoDay);\r\n    const hour = hourParam === undefined ? 0 : ES.ToIntegerWithTruncation(hourParam);\r\n    const minute = minuteParam === undefined ? 0 : ES.ToIntegerWithTruncation(minuteParam);\r\n    const second = secondParam === undefined ? 0 : ES.ToIntegerWithTruncation(secondParam);\r\n    const millisecond = millisecondParam === undefined ? 0 : ES.ToIntegerWithTruncation(millisecondParam);\r\n    const microsecond = microsecondParam === undefined ? 0 : ES.ToIntegerWithTruncation(microsecondParam);\r\n    const nanosecond = nanosecondParam === undefined ? 0 : ES.ToIntegerWithTruncation(nanosecondParam);\r\n    const calendar = ES.CanonicalizeCalendar(calendarParam === undefined ? 'iso8601' : ES.RequireString(calendarParam));\r\n\r\n    ES.RejectDateTime(year, month, day, hour, minute, second, millisecond, microsecond, nanosecond);\r\n\r\n    ES.CreateTemporalDateTimeSlots(\r\n      this,\r\n      { isoDate: { year, month, day }, time: { hour, minute, second, millisecond, microsecond, nanosecond } },\r\n      calendar\r\n    );\r\n  }\r\n  get calendarId(): Return['calendarId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return GetSlot(this, CALENDAR);\r\n  }\r\n  get year(): Return['year'] {\r\n    return getCalendarProperty(this, 'year');\r\n  }\r\n  get month(): Return['month'] {\r\n    return getCalendarProperty(this, 'month');\r\n  }\r\n  get monthCode(): Return['monthCode'] {\r\n    return getCalendarProperty(this, 'monthCode');\r\n  }\r\n  get day(): Return['day'] {\r\n    return getCalendarProperty(this, 'day');\r\n  }\r\n  get hour(): Return['hour'] {\r\n    return getTimeProperty(this, 'hour');\r\n  }\r\n  get minute(): Return['minute'] {\r\n    return getTimeProperty(this, 'minute');\r\n  }\r\n  get second(): Return['second'] {\r\n    return getTimeProperty(this, 'second');\r\n  }\r\n  get millisecond(): Return['millisecond'] {\r\n    return getTimeProperty(this, 'millisecond');\r\n  }\r\n  get microsecond(): Return['microsecond'] {\r\n    return getTimeProperty(this, 'microsecond');\r\n  }\r\n  get nanosecond(): Return['nanosecond'] {\r\n    return getTimeProperty(this, 'nanosecond');\r\n  }\r\n  get era(): Return['era'] {\r\n    return getCalendarProperty(this, 'era');\r\n  }\r\n  get eraYear(): Return['eraYear'] {\r\n    return getCalendarProperty(this, 'eraYear');\r\n  }\r\n  get dayOfWeek(): Return['dayOfWeek'] {\r\n    return getCalendarProperty(this, 'dayOfWeek');\r\n  }\r\n  get dayOfYear(): Return['dayOfYear'] {\r\n    return getCalendarProperty(this, 'dayOfYear');\r\n  }\r\n  get weekOfYear(): Return['weekOfYear'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.week;\r\n  }\r\n  get yearOfWeek(): Return['yearOfWeek'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.year;\r\n  }\r\n  get daysInWeek(): Return['daysInWeek'] {\r\n    return getCalendarProperty(this, 'daysInWeek');\r\n  }\r\n  get daysInYear(): Return['daysInYear'] {\r\n    return getCalendarProperty(this, 'daysInYear');\r\n  }\r\n  get daysInMonth(): Return['daysInMonth'] {\r\n    return getCalendarProperty(this, 'daysInMonth');\r\n  }\r\n  get monthsInYear(): Return['monthsInYear'] {\r\n    return getCalendarProperty(this, 'monthsInYear');\r\n  }\r\n  get inLeapYear(): Return['inLeapYear'] {\r\n    return getCalendarProperty(this, 'inLeapYear');\r\n  }\r\n  with(temporalDateTimeLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    if (!ES.IsObject(temporalDateTimeLike)) {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalDateTimeLike);\r\n\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    const isoDateTime = GetSlot(this, ISO_DATE_TIME);\r\n    let fields = {\r\n      ...ES.ISODateToFields(calendar, isoDateTime.isoDate),\r\n      ...isoDateTime.time\r\n    };\r\n    const partialDateTime = ES.PrepareCalendarFields(\r\n      calendar,\r\n      temporalDateTimeLike,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\r\n      'partial'\r\n    );\r\n    fields = ES.CalendarMergeFields(calendar, fields, partialDateTime);\r\n\r\n    const overflow = ES.GetTemporalOverflowOption(ES.GetOptionsObject(options));\r\n    const newDateTime = ES.InterpretTemporalDateTimeFields(calendar, fields, overflow);\r\n    return ES.CreateTemporalDateTime(newDateTime, calendar);\r\n  }\r\n  withPlainTime(temporalTime: Params['withPlainTime'][0] = undefined): Return['withPlainTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    const time = ES.ToTimeRecordOrMidnight(temporalTime);\r\n    const isoDateTime = ES.CombineISODateAndTimeRecord(GetSlot(this, ISO_DATE_TIME).isoDate, time);\r\n    return ES.CreateTemporalDateTime(isoDateTime, GetSlot(this, CALENDAR));\r\n  }\r\n  withCalendar(calendarParam: Params['withCalendar'][0]): Return['withCalendar'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    const calendar = ES.ToTemporalCalendarIdentifier(calendarParam);\r\n    return ES.CreateTemporalDateTime(GetSlot(this, ISO_DATE_TIME), calendar);\r\n  }\r\n  add(temporalDurationLike: Params['add'][0], options: Params['add'][1] = undefined): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.AddDurationToDateTime('add', this, temporalDurationLike, options);\r\n  }\r\n  subtract(\r\n    temporalDurationLike: Params['subtract'][0],\r\n    options: Params['subtract'][1] = undefined\r\n  ): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.AddDurationToDateTime('subtract', this, temporalDurationLike, options);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.DifferenceTemporalPlainDateTime('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.DifferenceTemporalPlainDateTime('since', this, other, options);\r\n  }\r\n  round(roundToParam: Params['round'][0]): Return['round'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    if (roundToParam === undefined) throw new TypeError('options parameter is required');\r\n    const roundTo =\r\n      typeof roundToParam === 'string'\r\n        ? (ES.CreateOnePropObject('smallestUnit', roundToParam) as Exclude<typeof roundToParam, string>)\r\n        : ES.GetOptionsObject(roundToParam);\r\n    const roundingIncrement = ES.GetTemporalRoundingIncrementOption(roundTo);\r\n    const roundingMode = ES.GetRoundingModeOption(roundTo, 'halfExpand');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'smallestUnit', 'time', ES.REQUIRED, ['day']);\r\n    const maximumIncrements = {\r\n      day: 1,\r\n      hour: 24,\r\n      minute: 60,\r\n      second: 60,\r\n      millisecond: 1000,\r\n      microsecond: 1000,\r\n      nanosecond: 1000\r\n    };\r\n    const maximum = maximumIncrements[smallestUnit];\r\n    const inclusive = maximum === 1;\r\n    ES.ValidateTemporalRoundingIncrement(roundingIncrement, maximum, inclusive);\r\n\r\n    const isoDateTime = GetSlot(this, ISO_DATE_TIME);\r\n    if (roundingIncrement === 1 && smallestUnit === 'nanosecond') {\r\n      return ES.CreateTemporalDateTime(isoDateTime, GetSlot(this, CALENDAR));\r\n    }\r\n    const result = ES.RoundISODateTime(isoDateTime, roundingIncrement, smallestUnit, roundingMode);\r\n\r\n    return ES.CreateTemporalDateTime(result, GetSlot(this, CALENDAR));\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    const other = ES.ToTemporalDateTime(otherParam);\r\n    if (ES.CompareISODateTime(GetSlot(this, ISO_DATE_TIME), GetSlot(other, ISO_DATE_TIME)) !== 0) return false;\r\n    return ES.CalendarEquals(GetSlot(this, CALENDAR), GetSlot(other, CALENDAR));\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const showCalendar = ES.GetTemporalShowCalendarNameOption(resolvedOptions);\r\n    const digits = ES.GetTemporalFractionalSecondDigitsOption(resolvedOptions);\r\n    const roundingMode = ES.GetRoundingModeOption(resolvedOptions, 'trunc');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(resolvedOptions, 'smallestUnit', 'time', undefined);\r\n    if (smallestUnit === 'hour') throw new RangeError('smallestUnit must be a time unit other than \"hour\"');\r\n    const { precision, unit, increment } = ES.ToSecondsStringPrecisionRecord(smallestUnit, digits);\r\n    const result = ES.RoundISODateTime(GetSlot(this, ISO_DATE_TIME), increment, unit, roundingMode);\r\n    ES.RejectDateTimeRange(result);\r\n    return ES.ISODateTimeToString(result, GetSlot(this, CALENDAR), precision, showCalendar);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.ISODateTimeToString(GetSlot(this, ISO_DATE_TIME), GetSlot(this, CALENDAR), 'auto');\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('PlainDateTime');\r\n  }\r\n\r\n  toZonedDateTime(\r\n    temporalTimeZoneLike: Params['toZonedDateTime'][0],\r\n    options: Params['toZonedDateTime'][1] = undefined\r\n  ): Return['toZonedDateTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    const timeZone = ES.ToTemporalTimeZoneIdentifier(temporalTimeZoneLike);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const disambiguation = ES.GetTemporalDisambiguationOption(resolvedOptions);\r\n    const epochNs = ES.GetEpochNanosecondsFor(timeZone, GetSlot(this, ISO_DATE_TIME), disambiguation);\r\n    return ES.CreateTemporalZonedDateTime(epochNs, timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  toPlainDate(): Return['toPlainDate'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.CreateTemporalDate(GetSlot(this, ISO_DATE_TIME).isoDate, GetSlot(this, CALENDAR));\r\n  }\r\n  toPlainTime(): Return['toPlainTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDateTime);\r\n    return ES.CreateTemporalTime(GetSlot(this, ISO_DATE_TIME).time);\r\n  }\r\n\r\n  static from(item: Params['from'][0], options: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalDateTime(item, options);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalDateTime(oneParam);\r\n    const two = ES.ToTemporalDateTime(twoParam);\r\n    return ES.CompareISODateTime(GetSlot(one, ISO_DATE_TIME), GetSlot(two, ISO_DATE_TIME));\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.PlainDateTime';\r\n}\r\n\r\nMakeIntrinsicClass(PlainDateTime, 'Temporal.PlainDateTime');\r\n\r\nfunction getCalendarProperty<P extends keyof CalendarDateRecord>(\r\n  dt: Temporal.PlainDateTime,\r\n  prop: P\r\n): CalendarDateRecord[P] {\r\n  ES.CheckReceiver(dt, ES.IsTemporalDateTime);\r\n  const isoDate = GetSlot(dt, ISO_DATE_TIME).isoDate;\r\n  return ES.calendarImplForObj(dt).isoToDate(isoDate, { [prop]: true })[prop];\r\n}\r\n\r\nfunction getTimeProperty(dt: Temporal.PlainDateTime, prop: Temporal.TimeUnit) {\r\n  ES.CheckReceiver(dt, ES.IsTemporalDateTime);\r\n  return GetSlot(dt, ISO_DATE_TIME).time[prop];\r\n}\r\n","import { DEBUG } from './debug';\r\nimport { assert } from './assert';\r\nimport * as ES from './ecmascript';\r\nimport { ModifiedIntlDurationFormatPrototypeFormat } from './intl';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport {\r\n  YEARS,\r\n  MONTHS,\r\n  WEEKS,\r\n  DAYS,\r\n  HOURS,\r\n  MINUTES,\r\n  SECONDS,\r\n  MILLISECONDS,\r\n  MICROSECONDS,\r\n  NANOSECONDS,\r\n  CALENDAR,\r\n  EPOCHNANOSECONDS,\r\n  CreateSlots,\r\n  GetSlot,\r\n  ISO_DATE,\r\n  SetSlot,\r\n  TIME_ZONE\r\n} from './slots';\r\nimport { TimeDuration } from './timeduration';\r\nimport type { Temporal } from '..';\r\nimport type { DurationParams as Params, DurationReturn as Return } from './internaltypes';\r\n\r\nexport class Duration implements Temporal.Duration {\r\n  constructor(\r\n    yearsParam: Params['constructor'][0] = 0,\r\n    monthsParam: Params['constructor'][1] = 0,\r\n    weeksParam: Params['constructor'][2] = 0,\r\n    daysParam: Params['constructor'][3] = 0,\r\n    hoursParam: Params['constructor'][4] = 0,\r\n    minutesParam: Params['constructor'][5] = 0,\r\n    secondsParam: Params['constructor'][6] = 0,\r\n    millisecondsParam: Params['constructor'][7] = 0,\r\n    microsecondsParam: Params['constructor'][8] = 0,\r\n    nanosecondsParam: Params['constructor'][9] = 0\r\n  ) {\r\n    const years = yearsParam === undefined ? 0 : ES.ToIntegerIfIntegral(yearsParam);\r\n    const months = monthsParam === undefined ? 0 : ES.ToIntegerIfIntegral(monthsParam);\r\n    const weeks = weeksParam === undefined ? 0 : ES.ToIntegerIfIntegral(weeksParam);\r\n    const days = daysParam === undefined ? 0 : ES.ToIntegerIfIntegral(daysParam);\r\n    const hours = hoursParam === undefined ? 0 : ES.ToIntegerIfIntegral(hoursParam);\r\n    const minutes = minutesParam === undefined ? 0 : ES.ToIntegerIfIntegral(minutesParam);\r\n    const seconds = secondsParam === undefined ? 0 : ES.ToIntegerIfIntegral(secondsParam);\r\n    const milliseconds = millisecondsParam === undefined ? 0 : ES.ToIntegerIfIntegral(millisecondsParam);\r\n    const microseconds = microsecondsParam === undefined ? 0 : ES.ToIntegerIfIntegral(microsecondsParam);\r\n    const nanoseconds = nanosecondsParam === undefined ? 0 : ES.ToIntegerIfIntegral(nanosecondsParam);\r\n\r\n    ES.RejectDuration(years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds);\r\n\r\n    CreateSlots(this);\r\n    SetSlot(this, YEARS, years);\r\n    SetSlot(this, MONTHS, months);\r\n    SetSlot(this, WEEKS, weeks);\r\n    SetSlot(this, DAYS, days);\r\n    SetSlot(this, HOURS, hours);\r\n    SetSlot(this, MINUTES, minutes);\r\n    SetSlot(this, SECONDS, seconds);\r\n    SetSlot(this, MILLISECONDS, milliseconds);\r\n    SetSlot(this, MICROSECONDS, microseconds);\r\n    SetSlot(this, NANOSECONDS, nanoseconds);\r\n\r\n    if (DEBUG) {\r\n      Object.defineProperty(this, '_repr_', {\r\n        value: `Temporal.Duration <${ES.TemporalDurationToString(this, 'auto')}>`,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n    }\r\n  }\r\n  get years(): Return['years'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, YEARS);\r\n  }\r\n  get months(): Return['months'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, MONTHS);\r\n  }\r\n  get weeks(): Return['weeks'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, WEEKS);\r\n  }\r\n  get days(): Return['days'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, DAYS);\r\n  }\r\n  get hours(): Return['hours'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, HOURS);\r\n  }\r\n  get minutes(): Return['minutes'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, MINUTES);\r\n  }\r\n  get seconds(): Return['seconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, SECONDS);\r\n  }\r\n  get milliseconds(): Return['milliseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, MILLISECONDS);\r\n  }\r\n  get microseconds(): Return['microseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, MICROSECONDS);\r\n  }\r\n  get nanoseconds(): Return['nanoseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return GetSlot(this, NANOSECONDS);\r\n  }\r\n  get sign(): Return['sign'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.DurationSign(this);\r\n  }\r\n  get blank(): Return['blank'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.DurationSign(this) === 0;\r\n  }\r\n  with(durationLike: Params['with'][0]): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    const partialDuration = ES.ToTemporalPartialDurationRecord(durationLike);\r\n    const {\r\n      years = GetSlot(this, YEARS),\r\n      months = GetSlot(this, MONTHS),\r\n      weeks = GetSlot(this, WEEKS),\r\n      days = GetSlot(this, DAYS),\r\n      hours = GetSlot(this, HOURS),\r\n      minutes = GetSlot(this, MINUTES),\r\n      seconds = GetSlot(this, SECONDS),\r\n      milliseconds = GetSlot(this, MILLISECONDS),\r\n      microseconds = GetSlot(this, MICROSECONDS),\r\n      nanoseconds = GetSlot(this, NANOSECONDS)\r\n    } = partialDuration;\r\n    return new Duration(years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds);\r\n  }\r\n  negated(): Return['negated'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.CreateNegatedTemporalDuration(this);\r\n  }\r\n  abs(): Return['abs'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return new Duration(\r\n      Math.abs(GetSlot(this, YEARS)),\r\n      Math.abs(GetSlot(this, MONTHS)),\r\n      Math.abs(GetSlot(this, WEEKS)),\r\n      Math.abs(GetSlot(this, DAYS)),\r\n      Math.abs(GetSlot(this, HOURS)),\r\n      Math.abs(GetSlot(this, MINUTES)),\r\n      Math.abs(GetSlot(this, SECONDS)),\r\n      Math.abs(GetSlot(this, MILLISECONDS)),\r\n      Math.abs(GetSlot(this, MICROSECONDS)),\r\n      Math.abs(GetSlot(this, NANOSECONDS))\r\n    );\r\n  }\r\n  add(other: Params['add'][0]): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.AddDurations('add', this, other);\r\n  }\r\n  subtract(other: Params['subtract'][0]): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.AddDurations('subtract', this, other);\r\n  }\r\n  round(roundToParam: Params['round'][0]): Return['round'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    if (roundToParam === undefined) throw new TypeError('options parameter is required');\r\n\r\n    const existingLargestUnit = ES.DefaultTemporalLargestUnit(this);\r\n    const roundTo =\r\n      typeof roundToParam === 'string'\r\n        ? (ES.CreateOnePropObject('smallestUnit', roundToParam) as Exclude<typeof roundToParam, string>)\r\n        : ES.GetOptionsObject(roundToParam);\r\n\r\n    let largestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'largestUnit', 'datetime', undefined, ['auto']);\r\n    let { plainRelativeTo, zonedRelativeTo } = ES.GetTemporalRelativeToOption(roundTo);\r\n    const roundingIncrement = ES.GetTemporalRoundingIncrementOption(roundTo);\r\n    const roundingMode = ES.GetRoundingModeOption(roundTo, 'halfExpand');\r\n    let smallestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'smallestUnit', 'datetime', undefined);\r\n\r\n    let smallestUnitPresent = true;\r\n    if (!smallestUnit) {\r\n      smallestUnitPresent = false;\r\n      smallestUnit = 'nanosecond';\r\n    }\r\n    const defaultLargestUnit = ES.LargerOfTwoTemporalUnits(existingLargestUnit, smallestUnit);\r\n    let largestUnitPresent = true;\r\n    if (!largestUnit) {\r\n      largestUnitPresent = false;\r\n      largestUnit = defaultLargestUnit;\r\n    }\r\n    if (largestUnit === 'auto') largestUnit = defaultLargestUnit;\r\n    if (!smallestUnitPresent && !largestUnitPresent) {\r\n      throw new RangeError('at least one of smallestUnit or largestUnit is required');\r\n    }\r\n    if (ES.LargerOfTwoTemporalUnits(largestUnit, smallestUnit) !== largestUnit) {\r\n      throw new RangeError(`largestUnit ${largestUnit} cannot be smaller than smallestUnit ${smallestUnit}`);\r\n    }\r\n\r\n    const maximumIncrements = {\r\n      hour: 24,\r\n      minute: 60,\r\n      second: 60,\r\n      millisecond: 1000,\r\n      microsecond: 1000,\r\n      nanosecond: 1000\r\n    } as { [k in Temporal.DateTimeUnit]?: number };\r\n    const maximum = maximumIncrements[smallestUnit];\r\n    if (maximum !== undefined) ES.ValidateTemporalRoundingIncrement(roundingIncrement, maximum, false);\r\n    if (roundingIncrement > 1 && ES.TemporalUnitCategory(smallestUnit) === 'date' && largestUnit !== smallestUnit) {\r\n      throw new RangeError('For calendar units with roundingIncrement > 1, use largestUnit = smallestUnit');\r\n    }\r\n\r\n    if (zonedRelativeTo) {\r\n      let duration = ES.ToInternalDurationRecord(this);\r\n      const timeZone = GetSlot(zonedRelativeTo, TIME_ZONE);\r\n      const calendar = GetSlot(zonedRelativeTo, CALENDAR);\r\n      const relativeEpochNs = GetSlot(zonedRelativeTo, EPOCHNANOSECONDS);\r\n      const targetEpochNs = ES.AddZonedDateTime(relativeEpochNs, timeZone, calendar, duration);\r\n      duration = ES.DifferenceZonedDateTimeWithRounding(\r\n        relativeEpochNs,\r\n        targetEpochNs,\r\n        timeZone,\r\n        calendar,\r\n        largestUnit,\r\n        roundingIncrement,\r\n        smallestUnit,\r\n        roundingMode\r\n      );\r\n      if (ES.TemporalUnitCategory(largestUnit) === 'date') largestUnit = 'hour';\r\n      return ES.TemporalDurationFromInternal(duration, largestUnit);\r\n    }\r\n\r\n    if (plainRelativeTo) {\r\n      let duration = ES.ToInternalDurationRecordWith24HourDays(this);\r\n      const targetTime = ES.AddTime(ES.MidnightTimeRecord(), duration.time);\r\n\r\n      // Delegate the date part addition to the calendar\r\n      const isoRelativeToDate = GetSlot(plainRelativeTo, ISO_DATE);\r\n      const calendar = GetSlot(plainRelativeTo, CALENDAR);\r\n      const dateDuration = ES.AdjustDateDurationRecord(duration.date, targetTime.deltaDays);\r\n      const targetDate = ES.CalendarDateAdd(calendar, isoRelativeToDate, dateDuration, 'constrain');\r\n\r\n      const isoDateTime = ES.CombineISODateAndTimeRecord(isoRelativeToDate, ES.MidnightTimeRecord());\r\n      const targetDateTime = ES.CombineISODateAndTimeRecord(targetDate, targetTime);\r\n      duration = ES.DifferencePlainDateTimeWithRounding(\r\n        isoDateTime,\r\n        targetDateTime,\r\n        calendar,\r\n        largestUnit,\r\n        roundingIncrement,\r\n        smallestUnit,\r\n        roundingMode\r\n      );\r\n      return ES.TemporalDurationFromInternal(duration, largestUnit);\r\n    }\r\n\r\n    // No reference date to calculate difference relative to\r\n    if (ES.IsCalendarUnit(existingLargestUnit)) {\r\n      throw new RangeError(`a starting point is required for ${existingLargestUnit}s balancing`);\r\n    }\r\n    if (ES.IsCalendarUnit(largestUnit)) {\r\n      throw new RangeError(`a starting point is required for ${largestUnit}s balancing`);\r\n    }\r\n    assert(!ES.IsCalendarUnit(smallestUnit), 'smallestUnit was larger than largestUnit');\r\n    let internalDuration = ES.ToInternalDurationRecordWith24HourDays(this);\r\n    if (smallestUnit === 'day') {\r\n      // First convert time units up to days\r\n      const { quotient, remainder } = internalDuration.time.divmod(ES.DAY_NANOS);\r\n      let days = internalDuration.date.days + ES.ToNumber(quotient) + ES.TotalTimeDuration(remainder, 'day');\r\n      days = ES.RoundNumberToIncrement(days, roundingIncrement, roundingMode);\r\n      const dateDuration = { years: 0, months: 0, weeks: 0, days };\r\n      internalDuration = ES.CombineDateAndTimeDuration(dateDuration, TimeDuration.ZERO);\r\n    } else {\r\n      const timeDuration = ES.RoundTimeDuration(internalDuration.time, roundingIncrement, smallestUnit, roundingMode);\r\n      internalDuration = ES.CombineDateAndTimeDuration(ES.ZeroDateDuration(), timeDuration);\r\n    }\r\n    return ES.TemporalDurationFromInternal(internalDuration, largestUnit);\r\n  }\r\n  total(optionsParam: Params['total'][0]): Return['total'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n\r\n    if (optionsParam === undefined) throw new TypeError('options argument is required');\r\n    const options =\r\n      typeof optionsParam === 'string'\r\n        ? (ES.CreateOnePropObject('unit', optionsParam) as Exclude<typeof optionsParam, string>)\r\n        : ES.GetOptionsObject(optionsParam);\r\n    let { plainRelativeTo, zonedRelativeTo } = ES.GetTemporalRelativeToOption(options);\r\n    const unit = ES.GetTemporalUnitValuedOption(options, 'unit', 'datetime', ES.REQUIRED);\r\n\r\n    if (zonedRelativeTo) {\r\n      const duration = ES.ToInternalDurationRecord(this);\r\n      const timeZone = GetSlot(zonedRelativeTo, TIME_ZONE);\r\n      const calendar = GetSlot(zonedRelativeTo, CALENDAR);\r\n      const relativeEpochNs = GetSlot(zonedRelativeTo, EPOCHNANOSECONDS);\r\n      const targetEpochNs = ES.AddZonedDateTime(relativeEpochNs, timeZone, calendar, duration);\r\n      return ES.DifferenceZonedDateTimeWithTotal(relativeEpochNs, targetEpochNs, timeZone, calendar, unit);\r\n    }\r\n\r\n    if (plainRelativeTo) {\r\n      const duration = ES.ToInternalDurationRecordWith24HourDays(this);\r\n      let targetTime = ES.AddTime(ES.MidnightTimeRecord(), duration.time);\r\n\r\n      // Delegate the date part addition to the calendar\r\n      const isoRelativeToDate = GetSlot(plainRelativeTo, ISO_DATE);\r\n      const calendar = GetSlot(plainRelativeTo, CALENDAR);\r\n      const dateDuration = ES.AdjustDateDurationRecord(duration.date, targetTime.deltaDays);\r\n      const targetDate = ES.CalendarDateAdd(calendar, isoRelativeToDate, dateDuration, 'constrain');\r\n\r\n      const isoDateTime = ES.CombineISODateAndTimeRecord(isoRelativeToDate, ES.MidnightTimeRecord());\r\n      const targetDateTime = ES.CombineISODateAndTimeRecord(targetDate, targetTime);\r\n      return ES.ToNumber(ES.DifferencePlainDateTimeWithTotal(isoDateTime, targetDateTime, calendar, unit));\r\n    }\r\n\r\n    // No reference date to calculate difference relative to\r\n    const largestUnit = ES.DefaultTemporalLargestUnit(this);\r\n    if (ES.IsCalendarUnit(largestUnit)) {\r\n      throw new RangeError(`a starting point is required for ${largestUnit}s total`);\r\n    }\r\n    if (ES.IsCalendarUnit(unit)) {\r\n      throw new RangeError(`a starting point is required for ${unit}s total`);\r\n    }\r\n    const duration = ES.ToInternalDurationRecordWith24HourDays(this);\r\n    return ES.TotalTimeDuration(duration.time, unit);\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const digits = ES.GetTemporalFractionalSecondDigitsOption(resolvedOptions);\r\n    const roundingMode = ES.GetRoundingModeOption(resolvedOptions, 'trunc');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(resolvedOptions, 'smallestUnit', 'time', undefined);\r\n    if (smallestUnit === 'hour' || smallestUnit === 'minute') {\r\n      throw new RangeError('smallestUnit must be a time unit other than \"hours\" or \"minutes\"');\r\n    }\r\n    const { precision, unit, increment } = ES.ToSecondsStringPrecisionRecord(smallestUnit, digits);\r\n    ES.uncheckedAssertNarrowedType<Exclude<typeof precision, 'minute'>>(\r\n      precision,\r\n      'Precision cannot be \"minute\" because of RangeError above'\r\n    );\r\n\r\n    if (unit === 'nanosecond' && increment === 1) return ES.TemporalDurationToString(this, precision);\r\n\r\n    const largestUnit = ES.DefaultTemporalLargestUnit(this);\r\n    let internalDuration = ES.ToInternalDurationRecord(this);\r\n    const timeDuration = ES.RoundTimeDuration(internalDuration.time, increment, unit, roundingMode);\r\n    internalDuration = ES.CombineDateAndTimeDuration(internalDuration.date, timeDuration);\r\n    const roundedDuration = ES.TemporalDurationFromInternal(\r\n      internalDuration,\r\n      ES.LargerOfTwoTemporalUnits(largestUnit, 'second')\r\n    );\r\n    return ES.TemporalDurationToString(roundedDuration, precision);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    return ES.TemporalDurationToString(this, 'auto');\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalDuration);\r\n    if (typeof Intl.DurationFormat === 'function') {\r\n      const formatter = new Intl.DurationFormat(locales, options as Intl.DurationFormatOptions);\r\n      return ModifiedIntlDurationFormatPrototypeFormat.call(formatter, this);\r\n    }\r\n    console.warn('Temporal.Duration.prototype.toLocaleString() requires Intl.DurationFormat.');\r\n    return ES.TemporalDurationToString(this, 'auto');\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('Duration');\r\n  }\r\n  static from(item: Params['from'][0]): Return['from'] {\r\n    return ES.ToTemporalDuration(item);\r\n  }\r\n  static compare(\r\n    oneParam: Params['compare'][0],\r\n    twoParam: Params['compare'][1],\r\n    options: Params['compare'][2] = undefined\r\n  ): Return['compare'] {\r\n    const one = ES.ToTemporalDuration(oneParam);\r\n    const two = ES.ToTemporalDuration(twoParam);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const { plainRelativeTo, zonedRelativeTo } = ES.GetTemporalRelativeToOption(resolvedOptions);\r\n\r\n    if (\r\n      GetSlot(one, YEARS) === GetSlot(two, YEARS) &&\r\n      GetSlot(one, MONTHS) === GetSlot(two, MONTHS) &&\r\n      GetSlot(one, WEEKS) === GetSlot(two, WEEKS) &&\r\n      GetSlot(one, DAYS) === GetSlot(two, DAYS) &&\r\n      GetSlot(one, HOURS) === GetSlot(two, HOURS) &&\r\n      GetSlot(one, MINUTES) === GetSlot(two, MINUTES) &&\r\n      GetSlot(one, SECONDS) === GetSlot(two, SECONDS) &&\r\n      GetSlot(one, MILLISECONDS) === GetSlot(two, MILLISECONDS) &&\r\n      GetSlot(one, MICROSECONDS) === GetSlot(two, MICROSECONDS) &&\r\n      GetSlot(one, NANOSECONDS) === GetSlot(two, NANOSECONDS)\r\n    ) {\r\n      return 0;\r\n    }\r\n\r\n    const largestUnit1 = ES.DefaultTemporalLargestUnit(one);\r\n    const largestUnit2 = ES.DefaultTemporalLargestUnit(two);\r\n    const duration1 = ES.ToInternalDurationRecord(one);\r\n    const duration2 = ES.ToInternalDurationRecord(two);\r\n\r\n    if (\r\n      zonedRelativeTo &&\r\n      (ES.TemporalUnitCategory(largestUnit1) === 'date' || ES.TemporalUnitCategory(largestUnit2) === 'date')\r\n    ) {\r\n      const timeZone = GetSlot(zonedRelativeTo, TIME_ZONE);\r\n      const calendar = GetSlot(zonedRelativeTo, CALENDAR);\r\n      const epochNs = GetSlot(zonedRelativeTo, EPOCHNANOSECONDS);\r\n\r\n      const after1 = ES.AddZonedDateTime(epochNs, timeZone, calendar, duration1);\r\n      const after2 = ES.AddZonedDateTime(epochNs, timeZone, calendar, duration2);\r\n      return ES.ComparisonResult(Number(after1 - after2));\r\n    }\r\n\r\n    let d1 = duration1.date.days;\r\n    let d2 = duration2.date.days;\r\n    if (ES.IsCalendarUnit(largestUnit1) || ES.IsCalendarUnit(largestUnit2)) {\r\n      if (!plainRelativeTo) {\r\n        throw new RangeError('A starting point is required for years, months, or weeks comparison');\r\n      }\r\n      d1 = ES.DateDurationDays(duration1.date, plainRelativeTo);\r\n      d2 = ES.DateDurationDays(duration2.date, plainRelativeTo);\r\n    }\r\n    const timeDuration1 = duration1.time.add24HourDays(d1);\r\n    const timeDuration2 = duration2.time.add24HourDays(d2);\r\n    return timeDuration1.cmp(timeDuration2);\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.Duration';\r\n}\r\n\r\nMakeIntrinsicClass(Duration, 'Temporal.Duration');\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport { CALENDAR, GetSlot, ISO_DATE } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type { CalendarDateRecord, PlainMonthDayParams as Params, PlainMonthDayReturn as Return } from './internaltypes';\r\n\r\nexport class PlainMonthDay implements Temporal.PlainMonthDay {\r\n  constructor(\r\n    isoMonth: Params['constructor'][0],\r\n    isoDay: Params['constructor'][0],\r\n    calendarParam = 'iso8601',\r\n    referenceISOYear = 1972\r\n  ) {\r\n    const month = ES.ToIntegerWithTruncation(isoMonth);\r\n    const day = ES.ToIntegerWithTruncation(isoDay);\r\n    const calendar = ES.CanonicalizeCalendar(calendarParam === undefined ? 'iso8601' : ES.RequireString(calendarParam));\r\n    const year = ES.ToIntegerWithTruncation(referenceISOYear);\r\n\r\n    ES.RejectISODate(year, month, day);\r\n    ES.CreateTemporalMonthDaySlots(this, { year, month, day }, calendar);\r\n  }\r\n\r\n  get monthCode(): Return['monthCode'] {\r\n    return getCalendarProperty(this, 'monthCode');\r\n  }\r\n  get day(): Return['day'] {\r\n    return getCalendarProperty(this, 'day');\r\n  }\r\n  get calendarId(): Return['calendarId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    return GetSlot(this, CALENDAR);\r\n  }\r\n\r\n  with(temporalMonthDayLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    if (!ES.IsObject(temporalMonthDayLike)) {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalMonthDayLike);\r\n\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    let fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE), 'month-day');\r\n    const partialMonthDay = ES.PrepareCalendarFields(\r\n      calendar,\r\n      temporalMonthDayLike,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      [],\r\n      'partial'\r\n    );\r\n    fields = ES.CalendarMergeFields(calendar, fields, partialMonthDay);\r\n\r\n    const overflow = ES.GetTemporalOverflowOption(ES.GetOptionsObject(options));\r\n    const isoDate = ES.CalendarMonthDayFromFields(calendar, fields, overflow);\r\n    return ES.CreateTemporalMonthDay(isoDate, calendar);\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    const other = ES.ToTemporalMonthDay(otherParam);\r\n    if (ES.CompareISODate(GetSlot(this, ISO_DATE), GetSlot(other, ISO_DATE)) !== 0) return false;\r\n    return ES.CalendarEquals(GetSlot(this, CALENDAR), GetSlot(other, CALENDAR));\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const showCalendar = ES.GetTemporalShowCalendarNameOption(resolvedOptions);\r\n    return ES.TemporalMonthDayToString(this, showCalendar);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    return ES.TemporalMonthDayToString(this);\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('PlainMonthDay');\r\n  }\r\n  toPlainDate(item: Params['toPlainDate'][0]): Return['toPlainDate'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalMonthDay);\r\n    if (!ES.IsObject(item)) throw new TypeError('argument should be an object');\r\n    const calendar = GetSlot(this, CALENDAR);\r\n\r\n    const fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE), 'month-day');\r\n    const inputFields = ES.PrepareCalendarFields(calendar, item, ['year'], [], []);\r\n    let mergedFields = ES.CalendarMergeFields(calendar, fields, inputFields);\r\n    const isoDate = ES.CalendarDateFromFields(calendar, mergedFields, 'constrain');\r\n    return ES.CreateTemporalDate(isoDate, calendar);\r\n  }\r\n\r\n  static from(item: Params['from'][0], options: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalMonthDay(item, options);\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.PlainMonthDay';\r\n}\r\n\r\nMakeIntrinsicClass(PlainMonthDay, 'Temporal.PlainMonthDay');\r\n\r\nfunction getCalendarProperty<P extends keyof CalendarDateRecord>(\r\n  md: Temporal.PlainMonthDay,\r\n  prop: P\r\n): CalendarDateRecord[P] {\r\n  ES.CheckReceiver(md, ES.IsTemporalMonthDay);\r\n  const isoDate = GetSlot(md, ISO_DATE);\r\n  return ES.calendarImplForObj(md).isoToDate(isoDate, { [prop]: true })[prop];\r\n}\r\n","import * as ES from './ecmascript';\r\nimport type { Temporal } from '..';\r\n\r\nfunction SystemDateTime(timeZone: string) {\r\n  return ES.GetISODateTimeFor(timeZone, ES.SystemUTCEpochNanoSeconds());\r\n}\r\n\r\nconst instant: (typeof Temporal.Now)['instant'] = () => {\r\n  return ES.CreateTemporalInstant(ES.SystemUTCEpochNanoSeconds());\r\n};\r\nconst plainDateTimeISO: (typeof Temporal.Now)['plainDateTimeISO'] = (temporalTimeZoneLike = ES.DefaultTimeZone()) => {\r\n  const timeZone = ES.ToTemporalTimeZoneIdentifier(temporalTimeZoneLike);\r\n  const isoDateTime = SystemDateTime(timeZone);\r\n  return ES.CreateTemporalDateTime(isoDateTime, 'iso8601');\r\n};\r\nconst zonedDateTimeISO: (typeof Temporal.Now)['zonedDateTimeISO'] = (temporalTimeZoneLike = ES.DefaultTimeZone()) => {\r\n  const timeZone = ES.ToTemporalTimeZoneIdentifier(temporalTimeZoneLike);\r\n  return ES.CreateTemporalZonedDateTime(ES.SystemUTCEpochNanoSeconds(), timeZone, 'iso8601');\r\n};\r\nconst plainDateISO: (typeof Temporal.Now)['plainDateISO'] = (temporalTimeZoneLike = ES.DefaultTimeZone()) => {\r\n  const timeZone = ES.ToTemporalTimeZoneIdentifier(temporalTimeZoneLike);\r\n  const isoDateTime = SystemDateTime(timeZone);\r\n  return ES.CreateTemporalDate(isoDateTime.isoDate, 'iso8601');\r\n};\r\nconst plainTimeISO: (typeof Temporal.Now)['plainTimeISO'] = (temporalTimeZoneLike = ES.DefaultTimeZone()) => {\r\n  const timeZone = ES.ToTemporalTimeZoneIdentifier(temporalTimeZoneLike);\r\n  const isoDateTime = SystemDateTime(timeZone);\r\n  return ES.CreateTemporalTime(isoDateTime.time);\r\n};\r\nconst timeZoneId: (typeof Temporal.Now)['timeZoneId'] = () => {\r\n  return ES.DefaultTimeZone();\r\n};\r\n\r\nexport const Now: typeof Temporal.Now = {\r\n  instant,\r\n  plainDateTimeISO,\r\n  plainDateISO,\r\n  plainTimeISO,\r\n  timeZoneId,\r\n  zonedDateTimeISO,\r\n  [Symbol.toStringTag]: 'Temporal.Now'\r\n};\r\nObject.defineProperty(Now, Symbol.toStringTag, {\r\n  value: 'Temporal.Now',\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true\r\n});\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\n\r\nimport { GetSlot, TIME } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type { PlainTimeParams as Params, PlainTimeReturn as Return } from './internaltypes';\r\n\r\nexport class PlainTime implements Temporal.PlainTime {\r\n  constructor(isoHour = 0, isoMinute = 0, isoSecond = 0, isoMillisecond = 0, isoMicrosecond = 0, isoNanosecond = 0) {\r\n    const hour = isoHour === undefined ? 0 : ES.ToIntegerWithTruncation(isoHour);\r\n    const minute = isoMinute === undefined ? 0 : ES.ToIntegerWithTruncation(isoMinute);\r\n    const second = isoSecond === undefined ? 0 : ES.ToIntegerWithTruncation(isoSecond);\r\n    const millisecond = isoMillisecond === undefined ? 0 : ES.ToIntegerWithTruncation(isoMillisecond);\r\n    const microsecond = isoMicrosecond === undefined ? 0 : ES.ToIntegerWithTruncation(isoMicrosecond);\r\n    const nanosecond = isoNanosecond === undefined ? 0 : ES.ToIntegerWithTruncation(isoNanosecond);\r\n\r\n    ES.RejectTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n    const time = { hour, minute, second, millisecond, microsecond, nanosecond };\r\n\r\n    ES.CreateTemporalTimeSlots(this, time);\r\n  }\r\n\r\n  get hour(): Return['hour'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).hour;\r\n  }\r\n  get minute(): Return['minute'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).minute;\r\n  }\r\n  get second(): Return['second'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).second;\r\n  }\r\n  get millisecond(): Return['millisecond'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).millisecond;\r\n  }\r\n  get microsecond(): Return['microsecond'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).microsecond;\r\n  }\r\n  get nanosecond(): Return['nanosecond'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return GetSlot(this, TIME).nanosecond;\r\n  }\r\n\r\n  with(temporalTimeLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    if (!ES.IsObject(temporalTimeLike)) {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalTimeLike);\r\n\r\n    const partialTime = ES.ToTemporalTimeRecord(temporalTimeLike, 'partial');\r\n\r\n    const fields = ES.ToTemporalTimeRecord(this);\r\n    let { hour, minute, second, millisecond, microsecond, nanosecond } = Object.assign(fields, partialTime);\r\n    const overflow = ES.GetTemporalOverflowOption(ES.GetOptionsObject(options));\r\n    ({ hour, minute, second, millisecond, microsecond, nanosecond } = ES.RegulateTime(\r\n      hour,\r\n      minute,\r\n      second,\r\n      millisecond,\r\n      microsecond,\r\n      nanosecond,\r\n      overflow\r\n    ));\r\n    return new PlainTime(hour, minute, second, millisecond, microsecond, nanosecond);\r\n  }\r\n  add(temporalDurationLike: Params['add'][0]): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return ES.AddDurationToTime('add', this, temporalDurationLike);\r\n  }\r\n  subtract(temporalDurationLike: Params['subtract'][0]): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return ES.AddDurationToTime('subtract', this, temporalDurationLike);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return ES.DifferenceTemporalPlainTime('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return ES.DifferenceTemporalPlainTime('since', this, other, options);\r\n  }\r\n  round(roundToParam: Params['round'][0]): Return['round'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    if (roundToParam === undefined) throw new TypeError('options parameter is required');\r\n    const roundTo =\r\n      typeof roundToParam === 'string'\r\n        ? (ES.CreateOnePropObject('smallestUnit', roundToParam) as Exclude<typeof roundToParam, string>)\r\n        : ES.GetOptionsObject(roundToParam);\r\n    const roundingIncrement = ES.GetTemporalRoundingIncrementOption(roundTo);\r\n    const roundingMode = ES.GetRoundingModeOption(roundTo, 'halfExpand');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'smallestUnit', 'time', ES.REQUIRED);\r\n    const MAX_INCREMENTS = {\r\n      hour: 24,\r\n      minute: 60,\r\n      second: 60,\r\n      millisecond: 1000,\r\n      microsecond: 1000,\r\n      nanosecond: 1000\r\n    };\r\n    ES.ValidateTemporalRoundingIncrement(roundingIncrement, MAX_INCREMENTS[smallestUnit], false);\r\n\r\n    const time = ES.RoundTime(GetSlot(this, TIME), roundingIncrement, smallestUnit, roundingMode);\r\n    return ES.CreateTemporalTime(time);\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    const other = ES.ToTemporalTime(otherParam);\r\n    return ES.CompareTimeRecord(GetSlot(this, TIME), GetSlot(other, TIME)) === 0;\r\n  }\r\n\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const digits = ES.GetTemporalFractionalSecondDigitsOption(resolvedOptions);\r\n    const roundingMode = ES.GetRoundingModeOption(resolvedOptions, 'trunc');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(resolvedOptions, 'smallestUnit', 'time', undefined);\r\n    if (smallestUnit === 'hour') throw new RangeError('smallestUnit must be a time unit other than \"hour\"');\r\n    const { precision, unit, increment } = ES.ToSecondsStringPrecisionRecord(smallestUnit, digits);\r\n    const time = ES.RoundTime(GetSlot(this, TIME), increment, unit, roundingMode);\r\n    return ES.TimeRecordToString(time, precision);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return ES.TimeRecordToString(GetSlot(this, TIME), 'auto');\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalTime);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('PlainTime');\r\n  }\r\n\r\n  static from(item: Params['from'][0], options: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalTime(item, options);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalTime(oneParam);\r\n    const two = ES.ToTemporalTime(twoParam);\r\n    return ES.CompareTimeRecord(GetSlot(one, TIME), GetSlot(two, TIME));\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.PlainTime';\r\n}\r\n\r\nMakeIntrinsicClass(PlainTime, 'Temporal.PlainTime');\r\n","import * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport { CALENDAR, GetSlot, ISO_DATE } from './slots';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type {\r\n  CalendarDateRecord,\r\n  PlainYearMonthParams as Params,\r\n  PlainYearMonthReturn as Return\r\n} from './internaltypes';\r\n\r\nexport class PlainYearMonth implements Temporal.PlainYearMonth {\r\n  constructor(\r\n    isoYear: Params['constructor'][0],\r\n    isoMonth: Params['constructor'][1],\r\n    calendarParam: Params['constructor'][2] = 'iso8601',\r\n    referenceISODay: Params['constructor'][3] = 1\r\n  ) {\r\n    const year = ES.ToIntegerWithTruncation(isoYear);\r\n    const month = ES.ToIntegerWithTruncation(isoMonth);\r\n    const calendar = ES.CanonicalizeCalendar(calendarParam === undefined ? 'iso8601' : ES.RequireString(calendarParam));\r\n    const day = ES.ToIntegerWithTruncation(referenceISODay);\r\n\r\n    ES.RejectISODate(year, month, day);\r\n    ES.CreateTemporalYearMonthSlots(this, { year, month, day }, calendar);\r\n  }\r\n  get year(): Return['year'] {\r\n    return getCalendarProperty(this, 'year');\r\n  }\r\n  get month(): Return['month'] {\r\n    return getCalendarProperty(this, 'month');\r\n  }\r\n  get monthCode(): Return['monthCode'] {\r\n    return getCalendarProperty(this, 'monthCode');\r\n  }\r\n  get calendarId(): Return['calendarId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return GetSlot(this, CALENDAR);\r\n  }\r\n  get era(): Return['era'] {\r\n    return getCalendarProperty(this, 'era');\r\n  }\r\n  get eraYear(): Return['eraYear'] {\r\n    return getCalendarProperty(this, 'eraYear');\r\n  }\r\n  get daysInMonth(): Return['daysInMonth'] {\r\n    return getCalendarProperty(this, 'daysInMonth');\r\n  }\r\n  get daysInYear(): Return['daysInYear'] {\r\n    return getCalendarProperty(this, 'daysInYear');\r\n  }\r\n  get monthsInYear(): Return['monthsInYear'] {\r\n    return getCalendarProperty(this, 'monthsInYear');\r\n  }\r\n  get inLeapYear(): Return['inLeapYear'] {\r\n    return getCalendarProperty(this, 'inLeapYear');\r\n  }\r\n  with(temporalYearMonthLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    if (!ES.IsObject(temporalYearMonthLike)) {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalYearMonthLike);\r\n\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    let fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE), 'year-month');\r\n    const partialYearMonth = ES.PrepareCalendarFields(\r\n      calendar,\r\n      temporalYearMonthLike,\r\n      ['year', 'month', 'monthCode'],\r\n      [],\r\n      'partial'\r\n    );\r\n    fields = ES.CalendarMergeFields(calendar, fields, partialYearMonth);\r\n\r\n    const overflow = ES.GetTemporalOverflowOption(ES.GetOptionsObject(options));\r\n    const isoDate = ES.CalendarYearMonthFromFields(calendar, fields, overflow);\r\n    return ES.CreateTemporalYearMonth(isoDate, calendar);\r\n  }\r\n  add(temporalDurationLike: Params['add'][0], options: Params['add'][1] = undefined): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return ES.AddDurationToYearMonth('add', this, temporalDurationLike, options);\r\n  }\r\n  subtract(\r\n    temporalDurationLike: Params['subtract'][0],\r\n    options: Params['subtract'][1] = undefined\r\n  ): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return ES.AddDurationToYearMonth('subtract', this, temporalDurationLike, options);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return ES.DifferenceTemporalPlainYearMonth('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return ES.DifferenceTemporalPlainYearMonth('since', this, other, options);\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    const other = ES.ToTemporalYearMonth(otherParam);\r\n    if (ES.CompareISODate(GetSlot(this, ISO_DATE), GetSlot(other, ISO_DATE)) !== 0) return false;\r\n    return ES.CalendarEquals(GetSlot(this, CALENDAR), GetSlot(other, CALENDAR));\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const showCalendar = ES.GetTemporalShowCalendarNameOption(resolvedOptions);\r\n    return ES.TemporalYearMonthToString(this, showCalendar);\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return ES.TemporalYearMonthToString(this);\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    return new DateTimeFormat(locales, options).format(this);\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('PlainYearMonth');\r\n  }\r\n  toPlainDate(item: Params['toPlainDate'][0]): Return['toPlainDate'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalYearMonth);\r\n    if (!ES.IsObject(item)) throw new TypeError('argument should be an object');\r\n    const calendar = GetSlot(this, CALENDAR);\r\n\r\n    const fields = ES.ISODateToFields(calendar, GetSlot(this, ISO_DATE), 'year-month');\r\n    const inputFields = ES.PrepareCalendarFields(calendar, item, ['day'], [], []);\r\n    const mergedFields = ES.CalendarMergeFields(calendar, fields, inputFields);\r\n    const isoDate = ES.CalendarDateFromFields(calendar, mergedFields, 'constrain');\r\n    return ES.CreateTemporalDate(isoDate, calendar);\r\n  }\r\n\r\n  static from(item: Params['from'][0], options: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalYearMonth(item, options);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalYearMonth(oneParam);\r\n    const two = ES.ToTemporalYearMonth(twoParam);\r\n    return ES.CompareISODate(GetSlot(one, ISO_DATE), GetSlot(two, ISO_DATE));\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.PlainYearMonth';\r\n}\r\n\r\nMakeIntrinsicClass(PlainYearMonth, 'Temporal.PlainYearMonth');\r\n\r\nfunction getCalendarProperty<P extends keyof CalendarDateRecord>(\r\n  ym: Temporal.PlainYearMonth,\r\n  prop: P\r\n): CalendarDateRecord[P] {\r\n  ES.CheckReceiver(ym, ES.IsTemporalYearMonth);\r\n  const isoDate = GetSlot(ym, ISO_DATE);\r\n  return ES.calendarImplForObj(ym).isoToDate(isoDate, { [prop]: true })[prop];\r\n}\r\n","import { assert } from './assert';\r\nimport * as ES from './ecmascript';\r\nimport { MakeIntrinsicClass } from './intrinsicclass';\r\nimport { CALENDAR, EPOCHNANOSECONDS, TIME, TIME_ZONE, GetSlot } from './slots';\r\nimport { TimeDuration } from './timeduration';\r\nimport type { Temporal } from '..';\r\nimport { DateTimeFormat } from './intl';\r\nimport type {\r\n  BuiltinCalendarId,\r\n  CalendarDateRecord,\r\n  ZonedDateTimeParams as Params,\r\n  ZonedDateTimeReturn as Return\r\n} from './internaltypes';\r\n\r\nconst customResolvedOptions = DateTimeFormat.prototype.resolvedOptions as Intl.DateTimeFormat['resolvedOptions'];\r\n\r\nexport class ZonedDateTime implements Temporal.ZonedDateTime {\r\n  constructor(epochNanosecondsParam: bigint, timeZoneParam: string, calendarParam = 'iso8601') {\r\n    // Note: if the argument is not passed, ToBigInt(undefined) will throw. This check exists only\r\n    //       to improve the error message.\r\n    if (arguments.length < 1) {\r\n      throw new TypeError('missing argument: epochNanoseconds is required');\r\n    }\r\n    const epochNanoseconds = epochNanosecondsParam;\r\n    let timeZone = ES.RequireString(timeZoneParam);\r\n    const { tzName, offsetMinutes } = ES.ParseTimeZoneIdentifier(timeZone);\r\n    if (offsetMinutes === undefined) {\r\n      // if offsetMinutes is undefined, then tzName must be present\r\n      const record = ES.GetAvailableNamedTimeZoneIdentifier(tzName);\r\n      if (!record) throw new RangeError(`unknown time zone ${tzName}`);\r\n      timeZone = record.identifier;\r\n    } else {\r\n      timeZone = ES.FormatOffsetTimeZoneIdentifier(offsetMinutes);\r\n    }\r\n    const calendar = ES.CanonicalizeCalendar(calendarParam === undefined ? 'iso8601' : ES.RequireString(calendarParam));\r\n\r\n    ES.CreateTemporalZonedDateTimeSlots(this, epochNanoseconds, timeZone, calendar);\r\n  }\r\n  get calendarId(): Return['calendarId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return GetSlot(this, CALENDAR);\r\n  }\r\n  get timeZoneId(): Return['timeZoneId'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return GetSlot(this, TIME_ZONE);\r\n  }\r\n  get year(): Return['year'] {\r\n    return getCalendarProperty(this, 'year');\r\n  }\r\n  get month(): Return['month'] {\r\n    return getCalendarProperty(this, 'month');\r\n  }\r\n  get monthCode(): Return['monthCode'] {\r\n    return getCalendarProperty(this, 'monthCode');\r\n  }\r\n  get day(): Return['day'] {\r\n    return getCalendarProperty(this, 'day');\r\n  }\r\n  get hour(): Return['hour'] {\r\n    return getTimeProperty(this, 'hour');\r\n  }\r\n  get minute(): Return['minute'] {\r\n    return getTimeProperty(this, 'minute');\r\n  }\r\n  get second(): Return['second'] {\r\n    return getTimeProperty(this, 'second');\r\n  }\r\n  get millisecond(): Return['millisecond'] {\r\n    return getTimeProperty(this, 'millisecond');\r\n  }\r\n  get microsecond(): Return['microsecond'] {\r\n    return getTimeProperty(this, 'microsecond');\r\n  }\r\n  get nanosecond(): Return['nanosecond'] {\r\n    return getTimeProperty(this, 'nanosecond');\r\n  }\r\n  get era(): Return['era'] {\r\n    return getCalendarProperty(this, 'era');\r\n  }\r\n  get eraYear(): Return['eraYear'] {\r\n    return getCalendarProperty(this, 'eraYear');\r\n  }\r\n  get epochMilliseconds(): Return['epochMilliseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const value = GetSlot(this, EPOCHNANOSECONDS);\r\n    return ES.epochNsToMs(value, 'floor');\r\n  }\r\n  get epochNanoseconds(): Return['epochNanoseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.ToBigIntExternal(GetSlot(this, EPOCHNANOSECONDS));\r\n  }\r\n  get dayOfWeek(): Return['dayOfWeek'] {\r\n    return getCalendarProperty(this, 'dayOfWeek');\r\n  }\r\n  get dayOfYear(): Return['dayOfYear'] {\r\n    return getCalendarProperty(this, 'dayOfYear');\r\n  }\r\n  get weekOfYear(): Return['weekOfYear'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.week;\r\n  }\r\n  get yearOfWeek(): Return['yearOfWeek'] {\r\n    return getCalendarProperty(this, 'weekOfYear')?.year;\r\n  }\r\n  get hoursInDay(): Return['hoursInDay'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n    const today = dateTime(this).isoDate;\r\n    const tomorrow = ES.BalanceISODate(today.year, today.month, today.day + 1);\r\n    const todayNs = ES.GetStartOfDay(timeZone, today);\r\n    const tomorrowNs = ES.GetStartOfDay(timeZone, tomorrow);\r\n    const diff = TimeDuration.fromEpochNsDiff(tomorrowNs, todayNs);\r\n    return ES.TotalTimeDuration(diff, 'hour');\r\n  }\r\n  get daysInWeek(): Return['daysInWeek'] {\r\n    return getCalendarProperty(this, 'daysInWeek');\r\n  }\r\n  get daysInMonth(): Return['daysInMonth'] {\r\n    return getCalendarProperty(this, 'daysInMonth');\r\n  }\r\n  get daysInYear(): Return['daysInYear'] {\r\n    return getCalendarProperty(this, 'daysInYear');\r\n  }\r\n  get monthsInYear(): Return['monthsInYear'] {\r\n    return getCalendarProperty(this, 'monthsInYear');\r\n  }\r\n  get inLeapYear(): Return['inLeapYear'] {\r\n    return getCalendarProperty(this, 'inLeapYear');\r\n  }\r\n  get offset(): Return['offset'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const offsetNs = ES.GetOffsetNanosecondsFor(GetSlot(this, TIME_ZONE), GetSlot(this, EPOCHNANOSECONDS));\r\n    return ES.FormatUTCOffsetNanoseconds(BigInt(offsetNs));\r\n  }\r\n  get offsetNanoseconds(): Return['offsetNanoseconds'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.GetOffsetNanosecondsFor(GetSlot(this, TIME_ZONE), GetSlot(this, EPOCHNANOSECONDS));\r\n  }\r\n  with(temporalZonedDateTimeLike: Params['with'][0], options: Params['with'][1] = undefined): Return['with'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    if (!ES.IsObject(temporalZonedDateTimeLike)) {\r\n      throw new TypeError('invalid zoned-date-time-like');\r\n    }\r\n    ES.RejectTemporalLikeObject(temporalZonedDateTimeLike);\r\n\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n    const epochNs = GetSlot(this, EPOCHNANOSECONDS);\r\n    const offsetNs = ES.GetOffsetNanosecondsFor(timeZone, epochNs);\r\n    const isoDateTime = dateTime(this);\r\n    let fields = {\r\n      ...ES.ISODateToFields(calendar, isoDateTime.isoDate),\r\n      ...isoDateTime.time,\r\n      offset: ES.FormatUTCOffsetNanoseconds(BigInt(offsetNs))\r\n    };\r\n    const partialZonedDateTime = ES.PrepareCalendarFields(\r\n      calendar,\r\n      temporalZonedDateTimeLike,\r\n      ['year', 'month', 'monthCode', 'day'],\r\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond', 'offset'],\r\n      'partial'\r\n    );\r\n    fields = ES.CalendarMergeFields(calendar, fields, partialZonedDateTime);\r\n\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const disambiguation = ES.GetTemporalDisambiguationOption(resolvedOptions);\r\n    const offset = ES.GetTemporalOffsetOption(resolvedOptions, 'prefer');\r\n    const overflow = ES.GetTemporalOverflowOption(resolvedOptions);\r\n\r\n    const newDateTime = ES.InterpretTemporalDateTimeFields(calendar, fields, overflow);\r\n    const newOffsetNs = ES.ParseDateTimeUTCOffset(fields.offset);\r\n    const epochNanoseconds = ES.InterpretISODateTimeOffset(\r\n      newDateTime.isoDate,\r\n      newDateTime.time,\r\n      'option',\r\n      newOffsetNs,\r\n      timeZone,\r\n      disambiguation,\r\n      offset,\r\n      /* matchMinute = */ false\r\n    );\r\n\r\n    return ES.CreateTemporalZonedDateTime(epochNanoseconds, timeZone, calendar);\r\n  }\r\n  withPlainTime(temporalTimeParam: Params['withPlainTime'][0] = undefined): Return['withPlainTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n    const calendar = GetSlot(this, CALENDAR);\r\n    const iso = dateTime(this).isoDate;\r\n\r\n    let epochNs;\r\n    if (temporalTimeParam === undefined) {\r\n      epochNs = ES.GetStartOfDay(timeZone, iso);\r\n    } else {\r\n      const temporalTime = ES.ToTemporalTime(temporalTimeParam);\r\n      const dt = ES.CombineISODateAndTimeRecord(iso, GetSlot(temporalTime, TIME));\r\n      epochNs = ES.GetEpochNanosecondsFor(timeZone, dt, 'compatible');\r\n    }\r\n    return ES.CreateTemporalZonedDateTime(epochNs, timeZone, calendar);\r\n  }\r\n  withTimeZone(timeZoneParam: Params['withTimeZone'][0]): Return['withTimeZone'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const timeZone = ES.ToTemporalTimeZoneIdentifier(timeZoneParam);\r\n    return ES.CreateTemporalZonedDateTime(GetSlot(this, EPOCHNANOSECONDS), timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  withCalendar(calendarParam: Params['withCalendar'][0]): Return['withCalendar'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const calendar = ES.ToTemporalCalendarIdentifier(calendarParam);\r\n    return ES.CreateTemporalZonedDateTime(GetSlot(this, EPOCHNANOSECONDS), GetSlot(this, TIME_ZONE), calendar);\r\n  }\r\n  add(temporalDurationLike: Params['add'][0], options: Params['add'][1] = undefined): Return['add'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.AddDurationToZonedDateTime('add', this, temporalDurationLike, options);\r\n  }\r\n  subtract(\r\n    temporalDurationLike: Params['subtract'][0],\r\n    options: Params['subtract'][1] = undefined\r\n  ): Return['subtract'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.AddDurationToZonedDateTime('subtract', this, temporalDurationLike, options);\r\n  }\r\n  until(other: Params['until'][0], options: Params['until'][1] = undefined): Return['until'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.DifferenceTemporalZonedDateTime('until', this, other, options);\r\n  }\r\n  since(other: Params['since'][0], options: Params['since'][1] = undefined): Return['since'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.DifferenceTemporalZonedDateTime('since', this, other, options);\r\n  }\r\n  round(roundToParam: Params['round'][0]): Return['round'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    if (roundToParam === undefined) throw new TypeError('options parameter is required');\r\n    const roundTo =\r\n      typeof roundToParam === 'string'\r\n        ? (ES.CreateOnePropObject('smallestUnit', roundToParam) as Exclude<typeof roundToParam, string>)\r\n        : ES.GetOptionsObject(roundToParam);\r\n    const roundingIncrement = ES.GetTemporalRoundingIncrementOption(roundTo);\r\n    const roundingMode = ES.GetRoundingModeOption(roundTo, 'halfExpand');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(roundTo, 'smallestUnit', 'time', ES.REQUIRED, ['day']);\r\n    const maximumIncrements = {\r\n      day: 1,\r\n      hour: 24,\r\n      minute: 60,\r\n      second: 60,\r\n      millisecond: 1000,\r\n      microsecond: 1000,\r\n      nanosecond: 1000\r\n    };\r\n    const maximum = maximumIncrements[smallestUnit];\r\n    const inclusive = maximum === 1;\r\n    ES.ValidateTemporalRoundingIncrement(roundingIncrement, maximum, inclusive);\r\n\r\n    if (smallestUnit === 'nanosecond' && roundingIncrement === 1) {\r\n      return ES.CreateTemporalZonedDateTime(\r\n        GetSlot(this, EPOCHNANOSECONDS),\r\n        GetSlot(this, TIME_ZONE),\r\n        GetSlot(this, CALENDAR)\r\n      );\r\n    }\r\n\r\n    // first, round the underlying DateTime fields\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n    const thisNs = GetSlot(this, EPOCHNANOSECONDS);\r\n    const iso = dateTime(this);\r\n    let epochNanoseconds;\r\n\r\n    if (smallestUnit === 'day') {\r\n      // Compute Instants for start-of-day and end-of-day\r\n      // Determine how far the current instant has progressed through this span.\r\n      const dateStart = iso.isoDate;\r\n      const dateEnd = ES.BalanceISODate(dateStart.year, dateStart.month, dateStart.day + 1);\r\n\r\n      const startNs = ES.GetStartOfDay(timeZone, dateStart);\r\n      assert(\r\n        thisNs >= startNs,\r\n        'cannot produce an instant during a day that occurs before start-of-day instant'\r\n      );\r\n\r\n      const endNs = ES.GetStartOfDay(timeZone, dateEnd);\r\n      assert(\r\n        thisNs < endNs,\r\n        'cannot produce an instant during a day that occurs on or after end-of-day instant'\r\n      );\r\n\r\n      const dayLengthNs = endNs - startNs;\r\n      const dayProgressNs = TimeDuration.fromEpochNsDiff(thisNs, startNs);\r\n      const roundedDayNs = dayProgressNs.round(dayLengthNs, roundingMode);\r\n      epochNanoseconds = roundedDayNs.addToEpochNs(startNs);\r\n    } else {\r\n      // smallestUnit < day\r\n      // Round based on ISO-calendar time units\r\n      const roundedDateTime = ES.RoundISODateTime(iso, roundingIncrement, smallestUnit, roundingMode);\r\n\r\n      // Now reset all DateTime fields but leave the TimeZone. The offset will\r\n      // also be retained if the new date/time values are still OK with the old\r\n      // offset. Otherwise the offset will be changed to be compatible with the\r\n      // new date/time values. If DST disambiguation is required, the `compatible`\r\n      // disambiguation algorithm will be used.\r\n      const offsetNs = ES.GetOffsetNanosecondsFor(timeZone, thisNs);\r\n      epochNanoseconds = ES.InterpretISODateTimeOffset(\r\n        roundedDateTime.isoDate,\r\n        roundedDateTime.time,\r\n        'option',\r\n        offsetNs,\r\n        timeZone,\r\n        'compatible',\r\n        'prefer',\r\n        /* matchMinute = */ false\r\n      );\r\n    }\r\n\r\n    return ES.CreateTemporalZonedDateTime(epochNanoseconds, timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  equals(otherParam: Params['equals'][0]): Return['equals'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const other = ES.ToTemporalZonedDateTime(otherParam);\r\n    const one = GetSlot(this, EPOCHNANOSECONDS);\r\n    const two = GetSlot(other, EPOCHNANOSECONDS);\r\n    if (one !== two) return false;\r\n    if (!ES.TimeZoneEquals(GetSlot(this, TIME_ZONE), GetSlot(other, TIME_ZONE))) return false;\r\n    return ES.CalendarEquals(GetSlot(this, CALENDAR), GetSlot(other, CALENDAR));\r\n  }\r\n  toString(options: Params['toString'][0] = undefined): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n    const showCalendar = ES.GetTemporalShowCalendarNameOption(resolvedOptions);\r\n    const digits = ES.GetTemporalFractionalSecondDigitsOption(resolvedOptions);\r\n    const showOffset = ES.GetTemporalShowOffsetOption(resolvedOptions);\r\n    const roundingMode = ES.GetRoundingModeOption(resolvedOptions, 'trunc');\r\n    const smallestUnit = ES.GetTemporalUnitValuedOption(resolvedOptions, 'smallestUnit', 'time', undefined);\r\n    if (smallestUnit === 'hour') throw new RangeError('smallestUnit must be a time unit other than \"hour\"');\r\n    const showTimeZone = ES.GetTemporalShowTimeZoneNameOption(resolvedOptions);\r\n    const { precision, unit, increment } = ES.ToSecondsStringPrecisionRecord(smallestUnit, digits);\r\n    return ES.TemporalZonedDateTimeToString(this, precision, showCalendar, showTimeZone, showOffset, {\r\n      unit,\r\n      increment,\r\n      roundingMode\r\n    });\r\n  }\r\n  toLocaleString(\r\n    locales: Params['toLocaleString'][0] = undefined,\r\n    options: Params['toLocaleString'][1] = undefined\r\n  ): string {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const resolvedOptions = ES.GetOptionsObject(options);\r\n\r\n    // This is not quite per specification, but this polyfill's DateTimeFormat\r\n    // already doesn't match the InitializeDateTimeFormat operation, and the\r\n    // access order might change anyway;\r\n    // see https://github.com/tc39/ecma402/issues/747\r\n    const optionsCopy = Object.create(null);\r\n    ES.CopyDataProperties(optionsCopy, resolvedOptions, ['timeZone']);\r\n\r\n    if (resolvedOptions.timeZone !== undefined) {\r\n      throw new TypeError('ZonedDateTime toLocaleString does not accept a timeZone option');\r\n    }\r\n\r\n    if (\r\n      optionsCopy.year === undefined &&\r\n      optionsCopy.month === undefined &&\r\n      optionsCopy.day === undefined &&\r\n      optionsCopy.era === undefined &&\r\n      optionsCopy.weekday === undefined &&\r\n      optionsCopy.dateStyle === undefined &&\r\n      optionsCopy.hour === undefined &&\r\n      optionsCopy.minute === undefined &&\r\n      optionsCopy.second === undefined &&\r\n      optionsCopy.fractionalSecondDigits === undefined &&\r\n      optionsCopy.timeStyle === undefined &&\r\n      optionsCopy.dayPeriod === undefined &&\r\n      optionsCopy.timeZoneName === undefined\r\n    ) {\r\n      optionsCopy.timeZoneName = 'short';\r\n      // The rest of the defaults will be filled in by formatting the Instant\r\n    }\r\n\r\n    optionsCopy.timeZone = GetSlot(this, TIME_ZONE);\r\n    if (ES.IsOffsetTimeZoneIdentifier(optionsCopy.timeZone)) {\r\n      // Note: https://github.com/tc39/ecma402/issues/683 will remove this\r\n      throw new RangeError('toLocaleString does not currently support offset time zones');\r\n    }\r\n\r\n    const formatter = new DateTimeFormat(locales, optionsCopy);\r\n\r\n    const localeCalendarIdentifier = customResolvedOptions.call(formatter).calendar as BuiltinCalendarId;\r\n    const calendarIdentifier = GetSlot(this, CALENDAR);\r\n    if (\r\n      calendarIdentifier !== 'iso8601' &&\r\n      localeCalendarIdentifier !== 'iso8601' &&\r\n      !ES.CalendarEquals(localeCalendarIdentifier, calendarIdentifier)\r\n    ) {\r\n      throw new RangeError(\r\n        `cannot format ZonedDateTime with calendar ${calendarIdentifier}` +\r\n          ` in locale with calendar ${localeCalendarIdentifier}`\r\n      );\r\n    }\r\n\r\n    return formatter.format(ES.CreateTemporalInstant(GetSlot(this, EPOCHNANOSECONDS)));\r\n  }\r\n  toJSON(): Return['toJSON'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.TemporalZonedDateTimeToString(this, 'auto');\r\n  }\r\n  valueOf(): never {\r\n    ES.ValueOfThrows('ZonedDateTime');\r\n  }\r\n  startOfDay(): Return['startOfDay'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n    const isoDate = dateTime(this).isoDate;\r\n    const epochNanoseconds = ES.GetStartOfDay(timeZone, isoDate);\r\n    return ES.CreateTemporalZonedDateTime(epochNanoseconds, timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  getTimeZoneTransition(directionParam: Params['getTimeZoneTransition'][0]): Return['getTimeZoneTransition'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    const timeZone = GetSlot(this, TIME_ZONE);\r\n\r\n    if (directionParam === undefined) throw new TypeError('options parameter is required');\r\n    const direction = ES.GetDirectionOption(\r\n      typeof directionParam === 'string'\r\n        ? (ES.CreateOnePropObject('direction', directionParam) as Exclude<typeof directionParam, string>)\r\n        : ES.GetOptionsObject(directionParam)\r\n    );\r\n    if (direction === undefined) throw new TypeError('direction option is required');\r\n\r\n    // Offset time zones or UTC have no transitions\r\n    if (ES.IsOffsetTimeZoneIdentifier(timeZone) || timeZone === 'UTC') {\r\n      return null;\r\n    }\r\n\r\n    const thisEpochNanoseconds = GetSlot(this, EPOCHNANOSECONDS);\r\n    const epochNanoseconds =\r\n      direction === 'next'\r\n        ? ES.GetNamedTimeZoneNextTransition(timeZone, thisEpochNanoseconds)\r\n        : ES.GetNamedTimeZonePreviousTransition(timeZone, thisEpochNanoseconds);\r\n    return epochNanoseconds === null\r\n      ? null\r\n      : ES.CreateTemporalZonedDateTime(epochNanoseconds, timeZone, GetSlot(this, CALENDAR));\r\n  }\r\n  toInstant(): Return['toInstant'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.CreateTemporalInstant(GetSlot(this, EPOCHNANOSECONDS));\r\n  }\r\n  toPlainDate(): Return['toPlainDate'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.CreateTemporalDate(dateTime(this).isoDate, GetSlot(this, CALENDAR));\r\n  }\r\n  toPlainTime(): Return['toPlainTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.CreateTemporalTime(dateTime(this).time);\r\n  }\r\n  toPlainDateTime(): Return['toPlainDateTime'] {\r\n    ES.CheckReceiver(this, ES.IsTemporalZonedDateTime);\r\n    return ES.CreateTemporalDateTime(dateTime(this), GetSlot(this, CALENDAR));\r\n  }\r\n\r\n  static from(item: Params['from'][0], optionsParam: Params['from'][1] = undefined): Return['from'] {\r\n    return ES.ToTemporalZonedDateTime(item, optionsParam);\r\n  }\r\n  static compare(oneParam: Params['compare'][0], twoParam: Params['compare'][1]): Return['compare'] {\r\n    const one = ES.ToTemporalZonedDateTime(oneParam);\r\n    const two = ES.ToTemporalZonedDateTime(twoParam);\r\n    const ns1 = GetSlot(one, EPOCHNANOSECONDS);\r\n    const ns2 = GetSlot(two, EPOCHNANOSECONDS);\r\n    if (BigInt(ns1) < BigInt(ns2)) return -1;\r\n    if (BigInt(ns1) > BigInt(ns2)) return 1;\r\n    return 0;\r\n  }\r\n  [Symbol.toStringTag]!: 'Temporal.ZonedDateTime';\r\n}\r\n\r\nMakeIntrinsicClass(ZonedDateTime, 'Temporal.ZonedDateTime');\r\n\r\nfunction dateTime(zdt: Temporal.ZonedDateTime) {\r\n  return ES.GetISODateTimeFor(GetSlot(zdt, TIME_ZONE), GetSlot(zdt, EPOCHNANOSECONDS));\r\n}\r\n\r\nfunction getCalendarProperty<P extends keyof CalendarDateRecord>(\r\n  zdt: Temporal.ZonedDateTime,\r\n  prop: P\r\n): CalendarDateRecord[P] {\r\n  ES.CheckReceiver(zdt, ES.IsTemporalZonedDateTime);\r\n  const isoDate = dateTime(zdt).isoDate;\r\n  return ES.calendarImplForObj(zdt).isoToDate(isoDate, { [prop]: true })[prop];\r\n}\r\n\r\nfunction getTimeProperty(zdt: Temporal.ZonedDateTime, prop: Temporal.TimeUnit) {\r\n  ES.CheckReceiver(zdt, ES.IsTemporalZonedDateTime);\r\n  return dateTime(zdt).time[prop];\r\n}\r\n","import * as ES from './ecmascript';\r\n\r\n// By default, a plain function can be called as a constructor. A method such as\r\n// Date.prototype.toTemporalInstant should not be able to. We could check\r\n// new.target in the body of toTemporalInstant, but that is not sufficient for\r\n// preventing construction when passing it as the newTarget parameter of\r\n// Reflect.construct. So we create it as a method of an otherwise unused class,\r\n// and monkeypatch it onto Date.prototype.\r\n\r\nclass LegacyDateImpl {\r\n  toTemporalInstant(this: Date) {\r\n    const epochNanoseconds = ES.epochMsToNs(Date.prototype.valueOf.call(this));\r\n    return ES.CreateTemporalInstant(epochNanoseconds);\r\n  }\r\n}\r\n\r\nexport const toTemporalInstant = LegacyDateImpl.prototype.toTemporalInstant;\r\n","// This entry point treats Temporal as a library, and does not polyfill it onto\r\n// the global object.\r\n// This is in order to avoid breaking the web in the future, if the polyfill\r\n// gains wide adoption before the API is finalized. We do not want checks such\r\n// as `if (typeof Temporal === 'undefined')` in the wild, until browsers start\r\n// shipping the finalized API.\r\n\r\nimport * as Temporal from './temporal';\r\nimport * as Intl from './intl';\r\nimport { toTemporalInstant } from './legacydate';\r\n\r\n// Work around https://github.com/babel/babel/issues/2025.\r\nconst types = [\r\n  Temporal.Instant,\r\n  Temporal.PlainDate,\r\n  Temporal.PlainDateTime,\r\n  Temporal.Duration,\r\n  Temporal.PlainMonthDay,\r\n  // Temporal.Now, // plain object (not a constructor), so no `prototype`\r\n  Temporal.PlainTime,\r\n  Temporal.PlainYearMonth,\r\n  Temporal.ZonedDateTime\r\n];\r\nfor (const type of types) {\r\n  const descriptor = Object.getOwnPropertyDescriptor(type, 'prototype') as PropertyDescriptor;\r\n  if (descriptor.configurable || descriptor.enumerable || descriptor.writable) {\r\n    descriptor.configurable = false;\r\n    descriptor.enumerable = false;\r\n    descriptor.writable = false;\r\n    Object.defineProperty(type, 'prototype', descriptor);\r\n  }\r\n}\r\n\r\nexport { Temporal, Intl, toTemporalInstant };\r\n"],"names":["MINUTE_NANOS","DAY_NANOS","OriginalIntlDateTimeFormat","PARSE.annotation","PARSE.zoneddatetime","PARSE.time","PARSE.yearmonth","PARSE.monthday","PARSE.timeZoneID","PARSE.offsetIdentifier","PARSE.duration","PARSE.offset","PARSE.offsetWithParts","ES.RegulateISODate","ES.BalanceISOYearMonth","ES.BalanceISODate","ES.CompareISODate","ES.ConstrainISODate","ES.ISODateToEpochDays","ES.ISODaysInMonth","ES.LeapYear","ES.RejectToRange","ES.ConstrainToRange","ES.ISOYearString","ES.ISODateTimePartString","ES.ComparisonResult","ES.assertExists","ES.ToObject","ES.ToString","ES.ToTemporalTimeZoneIdentifier","ES.CheckReceiver","ES.epochNsToMs","ES.IsTemporalDate","ES.IsTemporalTime","ES.IsTemporalDateTime","ES.IsTemporalZonedDateTime","ES.IsTemporalYearMonth","ES.IsTemporalMonthDay","ES.IsTemporalInstant","ES.ToNumber","ES.GetEpochNanosecondsFor","ES.CombineISODateAndTimeRecord","ES.NoonTimeRecord","ES.ToTemporalDuration","ES.CreateTemporalInstantSlots","ES.ToBigIntExternal","ES.AddDurationToInstant","ES.DifferenceTemporalInstant","ES.CreateOnePropObject","ES.GetOptionsObject","ES.GetTemporalRoundingIncrementOption","ES.GetRoundingModeOption","ES.GetTemporalUnitValuedOption","ES.REQUIRED","ES.ValidateTemporalRoundingIncrement","ES.RoundTemporalInstant","ES.CreateTemporalInstant","ES.ToTemporalInstant","ES.GetTemporalFractionalSecondDigitsOption","ES.ToSecondsStringPrecisionRecord","ES.TemporalInstantToString","ES.ValueOfThrows","ES.CreateTemporalZonedDateTime","ES.epochMsToNs","ES.ToIntegerWithTruncation","ES.CanonicalizeCalendar","ES.RequireString","ES.RejectISODate","ES.CreateTemporalDateSlots","getCalendarProperty","ES.IsObject","ES.RejectTemporalLikeObject","ES.ISODateToFields","ES.PrepareCalendarFields","ES.CalendarMergeFields","ES.GetTemporalOverflowOption","ES.CalendarDateFromFields","ES.CreateTemporalDate","ES.ToTemporalCalendarIdentifier","ES.AddDurationToDate","ES.DifferenceTemporalPlainDate","ES.ToTemporalDate","ES.CalendarEquals","ES.GetTemporalShowCalendarNameOption","ES.TemporalDateToString","ES.ToTimeRecordOrMidnight","ES.CreateTemporalDateTime","ES.GetStartOfDay","ES.ToTemporalTime","ES.CalendarYearMonthFromFields","ES.CreateTemporalYearMonth","ES.CalendarMonthDayFromFields","ES.CreateTemporalMonthDay","ES.calendarImplForObj","ES.RejectDateTime","ES.CreateTemporalDateTimeSlots","getTimeProperty","ES.InterpretTemporalDateTimeFields","ES.AddDurationToDateTime","ES.DifferenceTemporalPlainDateTime","ES.RoundISODateTime","ES.ToTemporalDateTime","ES.CompareISODateTime","ES.RejectDateTimeRange","ES.ISODateTimeToString","ES.GetTemporalDisambiguationOption","ES.CreateTemporalTime","ES.ToIntegerIfIntegral","ES.RejectDuration","ES.TemporalDurationToString","ES.IsTemporalDuration","ES.DurationSign","ES.ToTemporalPartialDurationRecord","ES.CreateNegatedTemporalDuration","ES.AddDurations","ES.DefaultTemporalLargestUnit","ES.GetTemporalRelativeToOption","ES.LargerOfTwoTemporalUnits","ES.TemporalUnitCategory","ES.ToInternalDurationRecord","ES.AddZonedDateTime","ES.DifferenceZonedDateTimeWithRounding","ES.TemporalDurationFromInternal","ES.ToInternalDurationRecordWith24HourDays","ES.AddTime","ES.MidnightTimeRecord","ES.AdjustDateDurationRecord","ES.CalendarDateAdd","ES.DifferencePlainDateTimeWithRounding","ES.IsCalendarUnit","ES.DAY_NANOS","ES.TotalTimeDuration","ES.RoundNumberToIncrement","ES.CombineDateAndTimeDuration","ES.RoundTimeDuration","ES.ZeroDateDuration","ES.DifferenceZonedDateTimeWithTotal","ES.DifferencePlainDateTimeWithTotal","ES.DateDurationDays","ES.CreateTemporalMonthDaySlots","ES.ToTemporalMonthDay","ES.TemporalMonthDayToString","ES.GetISODateTimeFor","ES.SystemUTCEpochNanoSeconds","ES.DefaultTimeZone","ES.RejectTime","ES.CreateTemporalTimeSlots","ES.ToTemporalTimeRecord","ES.RegulateTime","ES.AddDurationToTime","ES.DifferenceTemporalPlainTime","ES.RoundTime","ES.CompareTimeRecord","ES.TimeRecordToString","ES.CreateTemporalYearMonthSlots","ES.AddDurationToYearMonth","ES.DifferenceTemporalPlainYearMonth","ES.ToTemporalYearMonth","ES.TemporalYearMonthToString","ES.ParseTimeZoneIdentifier","ES.GetAvailableNamedTimeZoneIdentifier","ES.FormatOffsetTimeZoneIdentifier","ES.CreateTemporalZonedDateTimeSlots","ES.GetOffsetNanosecondsFor","ES.FormatUTCOffsetNanoseconds","ES.GetTemporalOffsetOption","ES.ParseDateTimeUTCOffset","ES.InterpretISODateTimeOffset","ES.AddDurationToZonedDateTime","ES.DifferenceTemporalZonedDateTime","ES.ToTemporalZonedDateTime","ES.TimeZoneEquals","ES.GetTemporalShowOffsetOption","ES.GetTemporalShowTimeZoneNameOption","ES.TemporalZonedDateTimeToString","ES.CopyDataProperties","ES.IsOffsetTimeZoneIdentifier","ES.GetDirectionOption","ES.GetNamedTimeZoneNextTransition","ES.GetNamedTimeZonePreviousTransition","Temporal.Instant","Temporal.PlainDate","Temporal.PlainDateTime","Temporal.Duration","Temporal.PlainMonthDay","Temporal.PlainTime","Temporal.PlainYearMonth","Temporal.ZonedDateTime"],"mappings":"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"}